
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Transaction
 * 
 */
export type Transaction = $Result.DefaultSelection<Prisma.$TransactionPayload>
/**
 * Model Balance
 * 
 */
export type Balance = $Result.DefaultSelection<Prisma.$BalancePayload>
/**
 * Model Extract
 * 
 */
export type Extract = $Result.DefaultSelection<Prisma.$ExtractPayload>
/**
 * Model ExtractTransaction
 * 
 */
export type ExtractTransaction = $Result.DefaultSelection<Prisma.$ExtractTransactionPayload>
/**
 * Model BankTransaction
 * 
 */
export type BankTransaction = $Result.DefaultSelection<Prisma.$BankTransactionPayload>
/**
 * Model PaymentMatch
 * 
 */
export type PaymentMatch = $Result.DefaultSelection<Prisma.$PaymentMatchPayload>
/**
 * Model CashFlow
 * 
 */
export type CashFlow = $Result.DefaultSelection<Prisma.$CashFlowPayload>
/**
 * Model ReportCache
 * 
 */
export type ReportCache = $Result.DefaultSelection<Prisma.$ReportCachePayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<ExtArgs>;

  /**
   * `prisma.balance`: Exposes CRUD operations for the **Balance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Balances
    * const balances = await prisma.balance.findMany()
    * ```
    */
  get balance(): Prisma.BalanceDelegate<ExtArgs>;

  /**
   * `prisma.extract`: Exposes CRUD operations for the **Extract** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Extracts
    * const extracts = await prisma.extract.findMany()
    * ```
    */
  get extract(): Prisma.ExtractDelegate<ExtArgs>;

  /**
   * `prisma.extractTransaction`: Exposes CRUD operations for the **ExtractTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExtractTransactions
    * const extractTransactions = await prisma.extractTransaction.findMany()
    * ```
    */
  get extractTransaction(): Prisma.ExtractTransactionDelegate<ExtArgs>;

  /**
   * `prisma.bankTransaction`: Exposes CRUD operations for the **BankTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BankTransactions
    * const bankTransactions = await prisma.bankTransaction.findMany()
    * ```
    */
  get bankTransaction(): Prisma.BankTransactionDelegate<ExtArgs>;

  /**
   * `prisma.paymentMatch`: Exposes CRUD operations for the **PaymentMatch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentMatches
    * const paymentMatches = await prisma.paymentMatch.findMany()
    * ```
    */
  get paymentMatch(): Prisma.PaymentMatchDelegate<ExtArgs>;

  /**
   * `prisma.cashFlow`: Exposes CRUD operations for the **CashFlow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CashFlows
    * const cashFlows = await prisma.cashFlow.findMany()
    * ```
    */
  get cashFlow(): Prisma.CashFlowDelegate<ExtArgs>;

  /**
   * `prisma.reportCache`: Exposes CRUD operations for the **ReportCache** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReportCaches
    * const reportCaches = await prisma.reportCache.findMany()
    * ```
    */
  get reportCache(): Prisma.ReportCacheDelegate<ExtArgs>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Customer: 'Customer',
    Category: 'Category',
    Transaction: 'Transaction',
    Balance: 'Balance',
    Extract: 'Extract',
    ExtractTransaction: 'ExtractTransaction',
    BankTransaction: 'BankTransaction',
    PaymentMatch: 'PaymentMatch',
    CashFlow: 'CashFlow',
    ReportCache: 'ReportCache',
    AuditLog: 'AuditLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "customer" | "category" | "transaction" | "balance" | "extract" | "extractTransaction" | "bankTransaction" | "paymentMatch" | "cashFlow" | "reportCache" | "auditLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Transaction: {
        payload: Prisma.$TransactionPayload<ExtArgs>
        fields: Prisma.TransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findFirst: {
            args: Prisma.TransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findMany: {
            args: Prisma.TransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          create: {
            args: Prisma.TransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          createMany: {
            args: Prisma.TransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          delete: {
            args: Prisma.TransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          update: {
            args: Prisma.TransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          deleteMany: {
            args: Prisma.TransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          aggregate: {
            args: Prisma.TransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaction>
          }
          groupBy: {
            args: Prisma.TransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionCountAggregateOutputType> | number
          }
        }
      }
      Balance: {
        payload: Prisma.$BalancePayload<ExtArgs>
        fields: Prisma.BalanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BalanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BalanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>
          }
          findFirst: {
            args: Prisma.BalanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BalanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>
          }
          findMany: {
            args: Prisma.BalanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>[]
          }
          create: {
            args: Prisma.BalanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>
          }
          createMany: {
            args: Prisma.BalanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BalanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>[]
          }
          delete: {
            args: Prisma.BalanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>
          }
          update: {
            args: Prisma.BalanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>
          }
          deleteMany: {
            args: Prisma.BalanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BalanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BalanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>
          }
          aggregate: {
            args: Prisma.BalanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBalance>
          }
          groupBy: {
            args: Prisma.BalanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<BalanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.BalanceCountArgs<ExtArgs>
            result: $Utils.Optional<BalanceCountAggregateOutputType> | number
          }
        }
      }
      Extract: {
        payload: Prisma.$ExtractPayload<ExtArgs>
        fields: Prisma.ExtractFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExtractFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExtractPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExtractFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExtractPayload>
          }
          findFirst: {
            args: Prisma.ExtractFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExtractPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExtractFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExtractPayload>
          }
          findMany: {
            args: Prisma.ExtractFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExtractPayload>[]
          }
          create: {
            args: Prisma.ExtractCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExtractPayload>
          }
          createMany: {
            args: Prisma.ExtractCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExtractCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExtractPayload>[]
          }
          delete: {
            args: Prisma.ExtractDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExtractPayload>
          }
          update: {
            args: Prisma.ExtractUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExtractPayload>
          }
          deleteMany: {
            args: Prisma.ExtractDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExtractUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ExtractUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExtractPayload>
          }
          aggregate: {
            args: Prisma.ExtractAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExtract>
          }
          groupBy: {
            args: Prisma.ExtractGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExtractGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExtractCountArgs<ExtArgs>
            result: $Utils.Optional<ExtractCountAggregateOutputType> | number
          }
        }
      }
      ExtractTransaction: {
        payload: Prisma.$ExtractTransactionPayload<ExtArgs>
        fields: Prisma.ExtractTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExtractTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExtractTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExtractTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExtractTransactionPayload>
          }
          findFirst: {
            args: Prisma.ExtractTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExtractTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExtractTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExtractTransactionPayload>
          }
          findMany: {
            args: Prisma.ExtractTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExtractTransactionPayload>[]
          }
          create: {
            args: Prisma.ExtractTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExtractTransactionPayload>
          }
          createMany: {
            args: Prisma.ExtractTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExtractTransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExtractTransactionPayload>[]
          }
          delete: {
            args: Prisma.ExtractTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExtractTransactionPayload>
          }
          update: {
            args: Prisma.ExtractTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExtractTransactionPayload>
          }
          deleteMany: {
            args: Prisma.ExtractTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExtractTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ExtractTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExtractTransactionPayload>
          }
          aggregate: {
            args: Prisma.ExtractTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExtractTransaction>
          }
          groupBy: {
            args: Prisma.ExtractTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExtractTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExtractTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<ExtractTransactionCountAggregateOutputType> | number
          }
        }
      }
      BankTransaction: {
        payload: Prisma.$BankTransactionPayload<ExtArgs>
        fields: Prisma.BankTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BankTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BankTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankTransactionPayload>
          }
          findFirst: {
            args: Prisma.BankTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BankTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankTransactionPayload>
          }
          findMany: {
            args: Prisma.BankTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankTransactionPayload>[]
          }
          create: {
            args: Prisma.BankTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankTransactionPayload>
          }
          createMany: {
            args: Prisma.BankTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BankTransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankTransactionPayload>[]
          }
          delete: {
            args: Prisma.BankTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankTransactionPayload>
          }
          update: {
            args: Prisma.BankTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankTransactionPayload>
          }
          deleteMany: {
            args: Prisma.BankTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BankTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BankTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankTransactionPayload>
          }
          aggregate: {
            args: Prisma.BankTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBankTransaction>
          }
          groupBy: {
            args: Prisma.BankTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<BankTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.BankTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<BankTransactionCountAggregateOutputType> | number
          }
        }
      }
      PaymentMatch: {
        payload: Prisma.$PaymentMatchPayload<ExtArgs>
        fields: Prisma.PaymentMatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentMatchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentMatchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMatchPayload>
          }
          findFirst: {
            args: Prisma.PaymentMatchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentMatchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMatchPayload>
          }
          findMany: {
            args: Prisma.PaymentMatchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMatchPayload>[]
          }
          create: {
            args: Prisma.PaymentMatchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMatchPayload>
          }
          createMany: {
            args: Prisma.PaymentMatchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentMatchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMatchPayload>[]
          }
          delete: {
            args: Prisma.PaymentMatchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMatchPayload>
          }
          update: {
            args: Prisma.PaymentMatchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMatchPayload>
          }
          deleteMany: {
            args: Prisma.PaymentMatchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentMatchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaymentMatchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMatchPayload>
          }
          aggregate: {
            args: Prisma.PaymentMatchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaymentMatch>
          }
          groupBy: {
            args: Prisma.PaymentMatchGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentMatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentMatchCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentMatchCountAggregateOutputType> | number
          }
        }
      }
      CashFlow: {
        payload: Prisma.$CashFlowPayload<ExtArgs>
        fields: Prisma.CashFlowFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CashFlowFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashFlowPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CashFlowFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashFlowPayload>
          }
          findFirst: {
            args: Prisma.CashFlowFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashFlowPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CashFlowFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashFlowPayload>
          }
          findMany: {
            args: Prisma.CashFlowFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashFlowPayload>[]
          }
          create: {
            args: Prisma.CashFlowCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashFlowPayload>
          }
          createMany: {
            args: Prisma.CashFlowCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CashFlowCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashFlowPayload>[]
          }
          delete: {
            args: Prisma.CashFlowDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashFlowPayload>
          }
          update: {
            args: Prisma.CashFlowUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashFlowPayload>
          }
          deleteMany: {
            args: Prisma.CashFlowDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CashFlowUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CashFlowUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashFlowPayload>
          }
          aggregate: {
            args: Prisma.CashFlowAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCashFlow>
          }
          groupBy: {
            args: Prisma.CashFlowGroupByArgs<ExtArgs>
            result: $Utils.Optional<CashFlowGroupByOutputType>[]
          }
          count: {
            args: Prisma.CashFlowCountArgs<ExtArgs>
            result: $Utils.Optional<CashFlowCountAggregateOutputType> | number
          }
        }
      }
      ReportCache: {
        payload: Prisma.$ReportCachePayload<ExtArgs>
        fields: Prisma.ReportCacheFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportCacheFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCachePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportCacheFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCachePayload>
          }
          findFirst: {
            args: Prisma.ReportCacheFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCachePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportCacheFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCachePayload>
          }
          findMany: {
            args: Prisma.ReportCacheFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCachePayload>[]
          }
          create: {
            args: Prisma.ReportCacheCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCachePayload>
          }
          createMany: {
            args: Prisma.ReportCacheCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportCacheCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCachePayload>[]
          }
          delete: {
            args: Prisma.ReportCacheDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCachePayload>
          }
          update: {
            args: Prisma.ReportCacheUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCachePayload>
          }
          deleteMany: {
            args: Prisma.ReportCacheDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportCacheUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReportCacheUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCachePayload>
          }
          aggregate: {
            args: Prisma.ReportCacheAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReportCache>
          }
          groupBy: {
            args: Prisma.ReportCacheGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportCacheGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportCacheCountArgs<ExtArgs>
            result: $Utils.Optional<ReportCacheCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    transactions: number
    categories: number
    extracts: number
    cashFlows: number
    customers: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | UserCountOutputTypeCountTransactionsArgs
    categories?: boolean | UserCountOutputTypeCountCategoriesArgs
    extracts?: boolean | UserCountOutputTypeCountExtractsArgs
    cashFlows?: boolean | UserCountOutputTypeCountCashFlowsArgs
    customers?: boolean | UserCountOutputTypeCountCustomersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountExtractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExtractWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCashFlowsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CashFlowWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCustomersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
  }


  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    transactions: number
    extractTransactions: number
    bankTransactions: number
    paymentMatches: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | CustomerCountOutputTypeCountTransactionsArgs
    extractTransactions?: boolean | CustomerCountOutputTypeCountExtractTransactionsArgs
    bankTransactions?: boolean | CustomerCountOutputTypeCountBankTransactionsArgs
    paymentMatches?: boolean | CustomerCountOutputTypeCountPaymentMatchesArgs
  }

  // Custom InputTypes
  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountExtractTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExtractTransactionWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountBankTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BankTransactionWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountPaymentMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentMatchWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    children: number
    transactions: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | CategoryCountOutputTypeCountChildrenArgs
    transactions?: boolean | CategoryCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }


  /**
   * Count Type ExtractCountOutputType
   */

  export type ExtractCountOutputType = {
    transactions: number
  }

  export type ExtractCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | ExtractCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * ExtractCountOutputType without action
   */
  export type ExtractCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExtractCountOutputType
     */
    select?: ExtractCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExtractCountOutputType without action
   */
  export type ExtractCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExtractTransactionWhereInput
  }


  /**
   * Count Type BankTransactionCountOutputType
   */

  export type BankTransactionCountOutputType = {
    paymentMatches: number
  }

  export type BankTransactionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paymentMatches?: boolean | BankTransactionCountOutputTypeCountPaymentMatchesArgs
  }

  // Custom InputTypes
  /**
   * BankTransactionCountOutputType without action
   */
  export type BankTransactionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankTransactionCountOutputType
     */
    select?: BankTransactionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BankTransactionCountOutputType without action
   */
  export type BankTransactionCountOutputTypeCountPaymentMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentMatchWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
    role: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
    role: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password: number
    role: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    email: string
    password: string
    role: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    transactions?: boolean | User$transactionsArgs<ExtArgs>
    categories?: boolean | User$categoriesArgs<ExtArgs>
    extracts?: boolean | User$extractsArgs<ExtArgs>
    cashFlows?: boolean | User$cashFlowsArgs<ExtArgs>
    customers?: boolean | User$customersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | User$transactionsArgs<ExtArgs>
    categories?: boolean | User$categoriesArgs<ExtArgs>
    extracts?: boolean | User$extractsArgs<ExtArgs>
    cashFlows?: boolean | User$cashFlowsArgs<ExtArgs>
    customers?: boolean | User$customersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
      categories: Prisma.$CategoryPayload<ExtArgs>[]
      extracts: Prisma.$ExtractPayload<ExtArgs>[]
      cashFlows: Prisma.$CashFlowPayload<ExtArgs>[]
      customers: Prisma.$CustomerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      email: string
      password: string
      role: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    transactions<T extends User$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany"> | Null>
    categories<T extends User$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, User$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany"> | Null>
    extracts<T extends User$extractsArgs<ExtArgs> = {}>(args?: Subset<T, User$extractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExtractPayload<ExtArgs>, T, "findMany"> | Null>
    cashFlows<T extends User$cashFlowsArgs<ExtArgs> = {}>(args?: Subset<T, User$cashFlowsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CashFlowPayload<ExtArgs>, T, "findMany"> | Null>
    customers<T extends User$customersArgs<ExtArgs> = {}>(args?: Subset<T, User$customersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.transactions
   */
  export type User$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * User.categories
   */
  export type User$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * User.extracts
   */
  export type User$extractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Extract
     */
    select?: ExtractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractInclude<ExtArgs> | null
    where?: ExtractWhereInput
    orderBy?: ExtractOrderByWithRelationInput | ExtractOrderByWithRelationInput[]
    cursor?: ExtractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExtractScalarFieldEnum | ExtractScalarFieldEnum[]
  }

  /**
   * User.cashFlows
   */
  export type User$cashFlowsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowInclude<ExtArgs> | null
    where?: CashFlowWhereInput
    orderBy?: CashFlowOrderByWithRelationInput | CashFlowOrderByWithRelationInput[]
    cursor?: CashFlowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CashFlowScalarFieldEnum | CashFlowScalarFieldEnum[]
  }

  /**
   * User.customers
   */
  export type User$customersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    cursor?: CustomerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    dueDays: number | null
  }

  export type CustomerSumAggregateOutputType = {
    dueDays: number | null
  }

  export type CustomerMinAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    originalName: string | null
    nameVariations: string | null
    phone: string | null
    address: string | null
    type: string | null
    accountType: string | null
    lastPaymentDate: Date | null
    paymentPattern: string | null
    dueDays: number | null
    tag1: string | null
    tag2: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    originalName: string | null
    nameVariations: string | null
    phone: string | null
    address: string | null
    type: string | null
    accountType: string | null
    lastPaymentDate: Date | null
    paymentPattern: string | null
    dueDays: number | null
    tag1: string | null
    tag2: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    code: number
    name: number
    originalName: number
    nameVariations: number
    phone: number
    address: number
    type: number
    accountType: number
    lastPaymentDate: number
    paymentPattern: number
    dueDays: number
    tag1: number
    tag2: number
    isActive: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    dueDays?: true
  }

  export type CustomerSumAggregateInputType = {
    dueDays?: true
  }

  export type CustomerMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    originalName?: true
    nameVariations?: true
    phone?: true
    address?: true
    type?: true
    accountType?: true
    lastPaymentDate?: true
    paymentPattern?: true
    dueDays?: true
    tag1?: true
    tag2?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    originalName?: true
    nameVariations?: true
    phone?: true
    address?: true
    type?: true
    accountType?: true
    lastPaymentDate?: true
    paymentPattern?: true
    dueDays?: true
    tag1?: true
    tag2?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    originalName?: true
    nameVariations?: true
    phone?: true
    address?: true
    type?: true
    accountType?: true
    lastPaymentDate?: true
    paymentPattern?: true
    dueDays?: true
    tag1?: true
    tag2?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    id: string
    code: string
    name: string
    originalName: string | null
    nameVariations: string | null
    phone: string | null
    address: string | null
    type: string
    accountType: string | null
    lastPaymentDate: Date | null
    paymentPattern: string | null
    dueDays: number | null
    tag1: string | null
    tag2: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    userId: string
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    originalName?: boolean
    nameVariations?: boolean
    phone?: boolean
    address?: boolean
    type?: boolean
    accountType?: boolean
    lastPaymentDate?: boolean
    paymentPattern?: boolean
    dueDays?: boolean
    tag1?: boolean
    tag2?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    transactions?: boolean | Customer$transactionsArgs<ExtArgs>
    extractTransactions?: boolean | Customer$extractTransactionsArgs<ExtArgs>
    bankTransactions?: boolean | Customer$bankTransactionsArgs<ExtArgs>
    paymentMatches?: boolean | Customer$paymentMatchesArgs<ExtArgs>
    balance?: boolean | Customer$balanceArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    originalName?: boolean
    nameVariations?: boolean
    phone?: boolean
    address?: boolean
    type?: boolean
    accountType?: boolean
    lastPaymentDate?: boolean
    paymentPattern?: boolean
    dueDays?: boolean
    tag1?: boolean
    tag2?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    originalName?: boolean
    nameVariations?: boolean
    phone?: boolean
    address?: boolean
    type?: boolean
    accountType?: boolean
    lastPaymentDate?: boolean
    paymentPattern?: boolean
    dueDays?: boolean
    tag1?: boolean
    tag2?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type CustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    transactions?: boolean | Customer$transactionsArgs<ExtArgs>
    extractTransactions?: boolean | Customer$extractTransactionsArgs<ExtArgs>
    bankTransactions?: boolean | Customer$bankTransactionsArgs<ExtArgs>
    paymentMatches?: boolean | Customer$paymentMatchesArgs<ExtArgs>
    balance?: boolean | Customer$balanceArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
      extractTransactions: Prisma.$ExtractTransactionPayload<ExtArgs>[]
      bankTransactions: Prisma.$BankTransactionPayload<ExtArgs>[]
      paymentMatches: Prisma.$PaymentMatchPayload<ExtArgs>[]
      balance: Prisma.$BalancePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      name: string
      originalName: string | null
      nameVariations: string | null
      phone: string | null
      address: string | null
      type: string
      accountType: string | null
      lastPaymentDate: Date | null
      paymentPattern: string | null
      dueDays: number | null
      tag1: string | null
      tag2: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      userId: string
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerFindUniqueArgs>(args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerFindFirstArgs>(args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerFindManyArgs>(args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends CustomerCreateArgs>(args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Customers.
     * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreateManyArgs>(args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {CustomerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends CustomerDeleteArgs>(args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerUpdateArgs>(args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDeleteManyArgs>(args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerUpdateManyArgs>(args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends CustomerUpsertArgs>(args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    transactions<T extends Customer$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany"> | Null>
    extractTransactions<T extends Customer$extractTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$extractTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExtractTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    bankTransactions<T extends Customer$bankTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$bankTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BankTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    paymentMatches<T extends Customer$paymentMatchesArgs<ExtArgs> = {}>(args?: Subset<T, Customer$paymentMatchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentMatchPayload<ExtArgs>, T, "findMany"> | Null>
    balance<T extends Customer$balanceArgs<ExtArgs> = {}>(args?: Subset<T, Customer$balanceArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customer model
   */ 
  interface CustomerFieldRefs {
    readonly id: FieldRef<"Customer", 'String'>
    readonly code: FieldRef<"Customer", 'String'>
    readonly name: FieldRef<"Customer", 'String'>
    readonly originalName: FieldRef<"Customer", 'String'>
    readonly nameVariations: FieldRef<"Customer", 'String'>
    readonly phone: FieldRef<"Customer", 'String'>
    readonly address: FieldRef<"Customer", 'String'>
    readonly type: FieldRef<"Customer", 'String'>
    readonly accountType: FieldRef<"Customer", 'String'>
    readonly lastPaymentDate: FieldRef<"Customer", 'DateTime'>
    readonly paymentPattern: FieldRef<"Customer", 'String'>
    readonly dueDays: FieldRef<"Customer", 'Int'>
    readonly tag1: FieldRef<"Customer", 'String'>
    readonly tag2: FieldRef<"Customer", 'String'>
    readonly isActive: FieldRef<"Customer", 'Boolean'>
    readonly createdAt: FieldRef<"Customer", 'DateTime'>
    readonly updatedAt: FieldRef<"Customer", 'DateTime'>
    readonly userId: FieldRef<"Customer", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }

  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
  }

  /**
   * Customer createManyAndReturn
   */
  export type CustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
  }

  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }

  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
  }

  /**
   * Customer.transactions
   */
  export type Customer$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Customer.extractTransactions
   */
  export type Customer$extractTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExtractTransaction
     */
    select?: ExtractTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractTransactionInclude<ExtArgs> | null
    where?: ExtractTransactionWhereInput
    orderBy?: ExtractTransactionOrderByWithRelationInput | ExtractTransactionOrderByWithRelationInput[]
    cursor?: ExtractTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExtractTransactionScalarFieldEnum | ExtractTransactionScalarFieldEnum[]
  }

  /**
   * Customer.bankTransactions
   */
  export type Customer$bankTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankTransaction
     */
    select?: BankTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankTransactionInclude<ExtArgs> | null
    where?: BankTransactionWhereInput
    orderBy?: BankTransactionOrderByWithRelationInput | BankTransactionOrderByWithRelationInput[]
    cursor?: BankTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BankTransactionScalarFieldEnum | BankTransactionScalarFieldEnum[]
  }

  /**
   * Customer.paymentMatches
   */
  export type Customer$paymentMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMatch
     */
    select?: PaymentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMatchInclude<ExtArgs> | null
    where?: PaymentMatchWhereInput
    orderBy?: PaymentMatchOrderByWithRelationInput | PaymentMatchOrderByWithRelationInput[]
    cursor?: PaymentMatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentMatchScalarFieldEnum | PaymentMatchScalarFieldEnum[]
  }

  /**
   * Customer.balance
   */
  export type Customer$balanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceInclude<ExtArgs> | null
    where?: BalanceWhereInput
  }

  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    parentId: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    parentId: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    type: number
    parentId: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    parentId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    parentId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    parentId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    type: string
    parentId: string | null
    userId: string | null
    createdAt: Date
    updatedAt: Date
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    parentId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
    children?: boolean | Category$childrenArgs<ExtArgs>
    user?: boolean | Category$userArgs<ExtArgs>
    transactions?: boolean | Category$transactionsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    parentId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
    user?: boolean | Category$userArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    parentId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
    children?: boolean | Category$childrenArgs<ExtArgs>
    user?: boolean | Category$userArgs<ExtArgs>
    transactions?: boolean | Category$transactionsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
    user?: boolean | Category$userArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      parent: Prisma.$CategoryPayload<ExtArgs> | null
      children: Prisma.$CategoryPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs> | null
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: string
      parentId: string | null
      userId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parent<T extends Category$parentArgs<ExtArgs> = {}>(args?: Subset<T, Category$parentArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    children<T extends Category$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Category$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany"> | Null>
    user<T extends Category$userArgs<ExtArgs> = {}>(args?: Subset<T, Category$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    transactions<T extends Category$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Category$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
    readonly type: FieldRef<"Category", 'String'>
    readonly parentId: FieldRef<"Category", 'String'>
    readonly userId: FieldRef<"Category", 'String'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly updatedAt: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.parent
   */
  export type Category$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Category.children
   */
  export type Category$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category.user
   */
  export type Category$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Category.transactions
   */
  export type Category$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Transaction
   */

  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    amount: number | null
    sourceRow: number | null
  }

  export type TransactionSumAggregateOutputType = {
    amount: number | null
    sourceRow: number | null
  }

  export type TransactionMinAggregateOutputType = {
    id: string | null
    type: string | null
    amount: number | null
    currency: string | null
    description: string | null
    date: Date | null
    categoryId: string | null
    customerId: string | null
    userId: string | null
    sourceFile: string | null
    sourceRow: number | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: string | null
    type: string | null
    amount: number | null
    currency: string | null
    description: string | null
    date: Date | null
    categoryId: string | null
    customerId: string | null
    userId: string | null
    sourceFile: string | null
    sourceRow: number | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    type: number
    amount: number
    currency: number
    description: number
    date: number
    categoryId: number
    customerId: number
    userId: number
    sourceFile: number
    sourceRow: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    amount?: true
    sourceRow?: true
  }

  export type TransactionSumAggregateInputType = {
    amount?: true
    sourceRow?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    type?: true
    amount?: true
    currency?: true
    description?: true
    date?: true
    categoryId?: true
    customerId?: true
    userId?: true
    sourceFile?: true
    sourceRow?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    type?: true
    amount?: true
    currency?: true
    description?: true
    date?: true
    categoryId?: true
    customerId?: true
    userId?: true
    sourceFile?: true
    sourceRow?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    type?: true
    amount?: true
    currency?: true
    description?: true
    date?: true
    categoryId?: true
    customerId?: true
    userId?: true
    sourceFile?: true
    sourceRow?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithAggregationInput | TransactionOrderByWithAggregationInput[]
    by: TransactionScalarFieldEnum[] | TransactionScalarFieldEnum
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }

  export type TransactionGroupByOutputType = {
    id: string
    type: string
    amount: number
    currency: string
    description: string | null
    date: Date
    categoryId: string | null
    customerId: string | null
    userId: string
    sourceFile: string | null
    sourceRow: number | null
    metadata: string | null
    createdAt: Date
    updatedAt: Date
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    amount?: boolean
    currency?: boolean
    description?: boolean
    date?: boolean
    categoryId?: boolean
    customerId?: boolean
    userId?: boolean
    sourceFile?: boolean
    sourceRow?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | Transaction$categoryArgs<ExtArgs>
    customer?: boolean | Transaction$customerArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    amount?: boolean
    currency?: boolean
    description?: boolean
    date?: boolean
    categoryId?: boolean
    customerId?: boolean
    userId?: boolean
    sourceFile?: boolean
    sourceRow?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | Transaction$categoryArgs<ExtArgs>
    customer?: boolean | Transaction$customerArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectScalar = {
    id?: boolean
    type?: boolean
    amount?: boolean
    currency?: boolean
    description?: boolean
    date?: boolean
    categoryId?: boolean
    customerId?: boolean
    userId?: boolean
    sourceFile?: boolean
    sourceRow?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | Transaction$categoryArgs<ExtArgs>
    customer?: boolean | Transaction$customerArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | Transaction$categoryArgs<ExtArgs>
    customer?: boolean | Transaction$customerArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaction"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs> | null
      customer: Prisma.$CustomerPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      amount: number
      currency: string
      description: string | null
      date: Date
      categoryId: string | null
      customerId: string | null
      userId: string
      sourceFile: string | null
      sourceRow: number | null
      metadata: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["transaction"]>
    composites: {}
  }

  type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = $Result.GetResult<Prisma.$TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionFindUniqueArgs>(args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Transaction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionFindFirstArgs>(args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Transaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionFindManyArgs>(args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
     */
    create<T extends TransactionCreateArgs>(args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Transactions.
     * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionCreateManyArgs>(args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {TransactionCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
     */
    delete<T extends TransactionDeleteArgs>(args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionUpdateArgs>(args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionDeleteManyArgs>(args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionUpdateManyArgs>(args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
     */
    upsert<T extends TransactionUpsertArgs>(args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends Transaction$categoryArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$categoryArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    customer<T extends Transaction$customerArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$customerArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaction model
   */ 
  interface TransactionFieldRefs {
    readonly id: FieldRef<"Transaction", 'String'>
    readonly type: FieldRef<"Transaction", 'String'>
    readonly amount: FieldRef<"Transaction", 'Float'>
    readonly currency: FieldRef<"Transaction", 'String'>
    readonly description: FieldRef<"Transaction", 'String'>
    readonly date: FieldRef<"Transaction", 'DateTime'>
    readonly categoryId: FieldRef<"Transaction", 'String'>
    readonly customerId: FieldRef<"Transaction", 'String'>
    readonly userId: FieldRef<"Transaction", 'String'>
    readonly sourceFile: FieldRef<"Transaction", 'String'>
    readonly sourceRow: FieldRef<"Transaction", 'Int'>
    readonly metadata: FieldRef<"Transaction", 'String'>
    readonly createdAt: FieldRef<"Transaction", 'DateTime'>
    readonly updatedAt: FieldRef<"Transaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }

  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
  }

  /**
   * Transaction createManyAndReturn
   */
  export type TransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
  }

  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }

  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
  }

  /**
   * Transaction.category
   */
  export type Transaction$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Transaction.customer
   */
  export type Transaction$customerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
  }

  /**
   * Transaction without action
   */
  export type TransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
  }


  /**
   * Model Balance
   */

  export type AggregateBalance = {
    _count: BalanceCountAggregateOutputType | null
    _avg: BalanceAvgAggregateOutputType | null
    _sum: BalanceSumAggregateOutputType | null
    _min: BalanceMinAggregateOutputType | null
    _max: BalanceMaxAggregateOutputType | null
  }

  export type BalanceAvgAggregateOutputType = {
    totalDebit: number | null
    totalCredit: number | null
    netBalance: number | null
  }

  export type BalanceSumAggregateOutputType = {
    totalDebit: number | null
    totalCredit: number | null
    netBalance: number | null
  }

  export type BalanceMinAggregateOutputType = {
    id: string | null
    customerId: string | null
    totalDebit: number | null
    totalCredit: number | null
    netBalance: number | null
    lastUpdated: Date | null
  }

  export type BalanceMaxAggregateOutputType = {
    id: string | null
    customerId: string | null
    totalDebit: number | null
    totalCredit: number | null
    netBalance: number | null
    lastUpdated: Date | null
  }

  export type BalanceCountAggregateOutputType = {
    id: number
    customerId: number
    totalDebit: number
    totalCredit: number
    netBalance: number
    lastUpdated: number
    _all: number
  }


  export type BalanceAvgAggregateInputType = {
    totalDebit?: true
    totalCredit?: true
    netBalance?: true
  }

  export type BalanceSumAggregateInputType = {
    totalDebit?: true
    totalCredit?: true
    netBalance?: true
  }

  export type BalanceMinAggregateInputType = {
    id?: true
    customerId?: true
    totalDebit?: true
    totalCredit?: true
    netBalance?: true
    lastUpdated?: true
  }

  export type BalanceMaxAggregateInputType = {
    id?: true
    customerId?: true
    totalDebit?: true
    totalCredit?: true
    netBalance?: true
    lastUpdated?: true
  }

  export type BalanceCountAggregateInputType = {
    id?: true
    customerId?: true
    totalDebit?: true
    totalCredit?: true
    netBalance?: true
    lastUpdated?: true
    _all?: true
  }

  export type BalanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Balance to aggregate.
     */
    where?: BalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Balances to fetch.
     */
    orderBy?: BalanceOrderByWithRelationInput | BalanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Balances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Balances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Balances
    **/
    _count?: true | BalanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BalanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BalanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BalanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BalanceMaxAggregateInputType
  }

  export type GetBalanceAggregateType<T extends BalanceAggregateArgs> = {
        [P in keyof T & keyof AggregateBalance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBalance[P]>
      : GetScalarType<T[P], AggregateBalance[P]>
  }




  export type BalanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BalanceWhereInput
    orderBy?: BalanceOrderByWithAggregationInput | BalanceOrderByWithAggregationInput[]
    by: BalanceScalarFieldEnum[] | BalanceScalarFieldEnum
    having?: BalanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BalanceCountAggregateInputType | true
    _avg?: BalanceAvgAggregateInputType
    _sum?: BalanceSumAggregateInputType
    _min?: BalanceMinAggregateInputType
    _max?: BalanceMaxAggregateInputType
  }

  export type BalanceGroupByOutputType = {
    id: string
    customerId: string
    totalDebit: number
    totalCredit: number
    netBalance: number
    lastUpdated: Date
    _count: BalanceCountAggregateOutputType | null
    _avg: BalanceAvgAggregateOutputType | null
    _sum: BalanceSumAggregateOutputType | null
    _min: BalanceMinAggregateOutputType | null
    _max: BalanceMaxAggregateOutputType | null
  }

  type GetBalanceGroupByPayload<T extends BalanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BalanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BalanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BalanceGroupByOutputType[P]>
            : GetScalarType<T[P], BalanceGroupByOutputType[P]>
        }
      >
    >


  export type BalanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    totalDebit?: boolean
    totalCredit?: boolean
    netBalance?: boolean
    lastUpdated?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["balance"]>

  export type BalanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    totalDebit?: boolean
    totalCredit?: boolean
    netBalance?: boolean
    lastUpdated?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["balance"]>

  export type BalanceSelectScalar = {
    id?: boolean
    customerId?: boolean
    totalDebit?: boolean
    totalCredit?: boolean
    netBalance?: boolean
    lastUpdated?: boolean
  }

  export type BalanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type BalanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }

  export type $BalancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Balance"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      customerId: string
      totalDebit: number
      totalCredit: number
      netBalance: number
      lastUpdated: Date
    }, ExtArgs["result"]["balance"]>
    composites: {}
  }

  type BalanceGetPayload<S extends boolean | null | undefined | BalanceDefaultArgs> = $Result.GetResult<Prisma.$BalancePayload, S>

  type BalanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BalanceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BalanceCountAggregateInputType | true
    }

  export interface BalanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Balance'], meta: { name: 'Balance' } }
    /**
     * Find zero or one Balance that matches the filter.
     * @param {BalanceFindUniqueArgs} args - Arguments to find a Balance
     * @example
     * // Get one Balance
     * const balance = await prisma.balance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BalanceFindUniqueArgs>(args: SelectSubset<T, BalanceFindUniqueArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Balance that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BalanceFindUniqueOrThrowArgs} args - Arguments to find a Balance
     * @example
     * // Get one Balance
     * const balance = await prisma.balance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BalanceFindUniqueOrThrowArgs>(args: SelectSubset<T, BalanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Balance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceFindFirstArgs} args - Arguments to find a Balance
     * @example
     * // Get one Balance
     * const balance = await prisma.balance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BalanceFindFirstArgs>(args?: SelectSubset<T, BalanceFindFirstArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Balance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceFindFirstOrThrowArgs} args - Arguments to find a Balance
     * @example
     * // Get one Balance
     * const balance = await prisma.balance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BalanceFindFirstOrThrowArgs>(args?: SelectSubset<T, BalanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Balances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Balances
     * const balances = await prisma.balance.findMany()
     * 
     * // Get first 10 Balances
     * const balances = await prisma.balance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const balanceWithIdOnly = await prisma.balance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BalanceFindManyArgs>(args?: SelectSubset<T, BalanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Balance.
     * @param {BalanceCreateArgs} args - Arguments to create a Balance.
     * @example
     * // Create one Balance
     * const Balance = await prisma.balance.create({
     *   data: {
     *     // ... data to create a Balance
     *   }
     * })
     * 
     */
    create<T extends BalanceCreateArgs>(args: SelectSubset<T, BalanceCreateArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Balances.
     * @param {BalanceCreateManyArgs} args - Arguments to create many Balances.
     * @example
     * // Create many Balances
     * const balance = await prisma.balance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BalanceCreateManyArgs>(args?: SelectSubset<T, BalanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Balances and returns the data saved in the database.
     * @param {BalanceCreateManyAndReturnArgs} args - Arguments to create many Balances.
     * @example
     * // Create many Balances
     * const balance = await prisma.balance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Balances and only return the `id`
     * const balanceWithIdOnly = await prisma.balance.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BalanceCreateManyAndReturnArgs>(args?: SelectSubset<T, BalanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Balance.
     * @param {BalanceDeleteArgs} args - Arguments to delete one Balance.
     * @example
     * // Delete one Balance
     * const Balance = await prisma.balance.delete({
     *   where: {
     *     // ... filter to delete one Balance
     *   }
     * })
     * 
     */
    delete<T extends BalanceDeleteArgs>(args: SelectSubset<T, BalanceDeleteArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Balance.
     * @param {BalanceUpdateArgs} args - Arguments to update one Balance.
     * @example
     * // Update one Balance
     * const balance = await prisma.balance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BalanceUpdateArgs>(args: SelectSubset<T, BalanceUpdateArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Balances.
     * @param {BalanceDeleteManyArgs} args - Arguments to filter Balances to delete.
     * @example
     * // Delete a few Balances
     * const { count } = await prisma.balance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BalanceDeleteManyArgs>(args?: SelectSubset<T, BalanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Balances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Balances
     * const balance = await prisma.balance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BalanceUpdateManyArgs>(args: SelectSubset<T, BalanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Balance.
     * @param {BalanceUpsertArgs} args - Arguments to update or create a Balance.
     * @example
     * // Update or create a Balance
     * const balance = await prisma.balance.upsert({
     *   create: {
     *     // ... data to create a Balance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Balance we want to update
     *   }
     * })
     */
    upsert<T extends BalanceUpsertArgs>(args: SelectSubset<T, BalanceUpsertArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Balances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceCountArgs} args - Arguments to filter Balances to count.
     * @example
     * // Count the number of Balances
     * const count = await prisma.balance.count({
     *   where: {
     *     // ... the filter for the Balances we want to count
     *   }
     * })
    **/
    count<T extends BalanceCountArgs>(
      args?: Subset<T, BalanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BalanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Balance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BalanceAggregateArgs>(args: Subset<T, BalanceAggregateArgs>): Prisma.PrismaPromise<GetBalanceAggregateType<T>>

    /**
     * Group by Balance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BalanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BalanceGroupByArgs['orderBy'] }
        : { orderBy?: BalanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BalanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBalanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Balance model
   */
  readonly fields: BalanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Balance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BalanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Balance model
   */ 
  interface BalanceFieldRefs {
    readonly id: FieldRef<"Balance", 'String'>
    readonly customerId: FieldRef<"Balance", 'String'>
    readonly totalDebit: FieldRef<"Balance", 'Float'>
    readonly totalCredit: FieldRef<"Balance", 'Float'>
    readonly netBalance: FieldRef<"Balance", 'Float'>
    readonly lastUpdated: FieldRef<"Balance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Balance findUnique
   */
  export type BalanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceInclude<ExtArgs> | null
    /**
     * Filter, which Balance to fetch.
     */
    where: BalanceWhereUniqueInput
  }

  /**
   * Balance findUniqueOrThrow
   */
  export type BalanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceInclude<ExtArgs> | null
    /**
     * Filter, which Balance to fetch.
     */
    where: BalanceWhereUniqueInput
  }

  /**
   * Balance findFirst
   */
  export type BalanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceInclude<ExtArgs> | null
    /**
     * Filter, which Balance to fetch.
     */
    where?: BalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Balances to fetch.
     */
    orderBy?: BalanceOrderByWithRelationInput | BalanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Balances.
     */
    cursor?: BalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Balances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Balances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Balances.
     */
    distinct?: BalanceScalarFieldEnum | BalanceScalarFieldEnum[]
  }

  /**
   * Balance findFirstOrThrow
   */
  export type BalanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceInclude<ExtArgs> | null
    /**
     * Filter, which Balance to fetch.
     */
    where?: BalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Balances to fetch.
     */
    orderBy?: BalanceOrderByWithRelationInput | BalanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Balances.
     */
    cursor?: BalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Balances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Balances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Balances.
     */
    distinct?: BalanceScalarFieldEnum | BalanceScalarFieldEnum[]
  }

  /**
   * Balance findMany
   */
  export type BalanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceInclude<ExtArgs> | null
    /**
     * Filter, which Balances to fetch.
     */
    where?: BalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Balances to fetch.
     */
    orderBy?: BalanceOrderByWithRelationInput | BalanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Balances.
     */
    cursor?: BalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Balances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Balances.
     */
    skip?: number
    distinct?: BalanceScalarFieldEnum | BalanceScalarFieldEnum[]
  }

  /**
   * Balance create
   */
  export type BalanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceInclude<ExtArgs> | null
    /**
     * The data needed to create a Balance.
     */
    data: XOR<BalanceCreateInput, BalanceUncheckedCreateInput>
  }

  /**
   * Balance createMany
   */
  export type BalanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Balances.
     */
    data: BalanceCreateManyInput | BalanceCreateManyInput[]
  }

  /**
   * Balance createManyAndReturn
   */
  export type BalanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Balances.
     */
    data: BalanceCreateManyInput | BalanceCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Balance update
   */
  export type BalanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceInclude<ExtArgs> | null
    /**
     * The data needed to update a Balance.
     */
    data: XOR<BalanceUpdateInput, BalanceUncheckedUpdateInput>
    /**
     * Choose, which Balance to update.
     */
    where: BalanceWhereUniqueInput
  }

  /**
   * Balance updateMany
   */
  export type BalanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Balances.
     */
    data: XOR<BalanceUpdateManyMutationInput, BalanceUncheckedUpdateManyInput>
    /**
     * Filter which Balances to update
     */
    where?: BalanceWhereInput
  }

  /**
   * Balance upsert
   */
  export type BalanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceInclude<ExtArgs> | null
    /**
     * The filter to search for the Balance to update in case it exists.
     */
    where: BalanceWhereUniqueInput
    /**
     * In case the Balance found by the `where` argument doesn't exist, create a new Balance with this data.
     */
    create: XOR<BalanceCreateInput, BalanceUncheckedCreateInput>
    /**
     * In case the Balance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BalanceUpdateInput, BalanceUncheckedUpdateInput>
  }

  /**
   * Balance delete
   */
  export type BalanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceInclude<ExtArgs> | null
    /**
     * Filter which Balance to delete.
     */
    where: BalanceWhereUniqueInput
  }

  /**
   * Balance deleteMany
   */
  export type BalanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Balances to delete
     */
    where?: BalanceWhereInput
  }

  /**
   * Balance without action
   */
  export type BalanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceInclude<ExtArgs> | null
  }


  /**
   * Model Extract
   */

  export type AggregateExtract = {
    _count: ExtractCountAggregateOutputType | null
    _avg: ExtractAvgAggregateOutputType | null
    _sum: ExtractSumAggregateOutputType | null
    _min: ExtractMinAggregateOutputType | null
    _max: ExtractMaxAggregateOutputType | null
  }

  export type ExtractAvgAggregateOutputType = {
    totalRows: number | null
    processedRows: number | null
    errorRows: number | null
  }

  export type ExtractSumAggregateOutputType = {
    totalRows: number | null
    processedRows: number | null
    errorRows: number | null
  }

  export type ExtractMinAggregateOutputType = {
    id: string | null
    fileName: string | null
    uploadDate: Date | null
    status: string | null
    totalRows: number | null
    processedRows: number | null
    errorRows: number | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExtractMaxAggregateOutputType = {
    id: string | null
    fileName: string | null
    uploadDate: Date | null
    status: string | null
    totalRows: number | null
    processedRows: number | null
    errorRows: number | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExtractCountAggregateOutputType = {
    id: number
    fileName: number
    uploadDate: number
    status: number
    totalRows: number
    processedRows: number
    errorRows: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ExtractAvgAggregateInputType = {
    totalRows?: true
    processedRows?: true
    errorRows?: true
  }

  export type ExtractSumAggregateInputType = {
    totalRows?: true
    processedRows?: true
    errorRows?: true
  }

  export type ExtractMinAggregateInputType = {
    id?: true
    fileName?: true
    uploadDate?: true
    status?: true
    totalRows?: true
    processedRows?: true
    errorRows?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExtractMaxAggregateInputType = {
    id?: true
    fileName?: true
    uploadDate?: true
    status?: true
    totalRows?: true
    processedRows?: true
    errorRows?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExtractCountAggregateInputType = {
    id?: true
    fileName?: true
    uploadDate?: true
    status?: true
    totalRows?: true
    processedRows?: true
    errorRows?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ExtractAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Extract to aggregate.
     */
    where?: ExtractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Extracts to fetch.
     */
    orderBy?: ExtractOrderByWithRelationInput | ExtractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExtractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Extracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Extracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Extracts
    **/
    _count?: true | ExtractCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExtractAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExtractSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExtractMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExtractMaxAggregateInputType
  }

  export type GetExtractAggregateType<T extends ExtractAggregateArgs> = {
        [P in keyof T & keyof AggregateExtract]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExtract[P]>
      : GetScalarType<T[P], AggregateExtract[P]>
  }




  export type ExtractGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExtractWhereInput
    orderBy?: ExtractOrderByWithAggregationInput | ExtractOrderByWithAggregationInput[]
    by: ExtractScalarFieldEnum[] | ExtractScalarFieldEnum
    having?: ExtractScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExtractCountAggregateInputType | true
    _avg?: ExtractAvgAggregateInputType
    _sum?: ExtractSumAggregateInputType
    _min?: ExtractMinAggregateInputType
    _max?: ExtractMaxAggregateInputType
  }

  export type ExtractGroupByOutputType = {
    id: string
    fileName: string
    uploadDate: Date
    status: string
    totalRows: number
    processedRows: number
    errorRows: number
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: ExtractCountAggregateOutputType | null
    _avg: ExtractAvgAggregateOutputType | null
    _sum: ExtractSumAggregateOutputType | null
    _min: ExtractMinAggregateOutputType | null
    _max: ExtractMaxAggregateOutputType | null
  }

  type GetExtractGroupByPayload<T extends ExtractGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExtractGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExtractGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExtractGroupByOutputType[P]>
            : GetScalarType<T[P], ExtractGroupByOutputType[P]>
        }
      >
    >


  export type ExtractSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileName?: boolean
    uploadDate?: boolean
    status?: boolean
    totalRows?: boolean
    processedRows?: boolean
    errorRows?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    transactions?: boolean | Extract$transactionsArgs<ExtArgs>
    _count?: boolean | ExtractCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["extract"]>

  export type ExtractSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileName?: boolean
    uploadDate?: boolean
    status?: boolean
    totalRows?: boolean
    processedRows?: boolean
    errorRows?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["extract"]>

  export type ExtractSelectScalar = {
    id?: boolean
    fileName?: boolean
    uploadDate?: boolean
    status?: boolean
    totalRows?: boolean
    processedRows?: boolean
    errorRows?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ExtractInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    transactions?: boolean | Extract$transactionsArgs<ExtArgs>
    _count?: boolean | ExtractCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ExtractIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ExtractPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Extract"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      transactions: Prisma.$ExtractTransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fileName: string
      uploadDate: Date
      status: string
      totalRows: number
      processedRows: number
      errorRows: number
      userId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["extract"]>
    composites: {}
  }

  type ExtractGetPayload<S extends boolean | null | undefined | ExtractDefaultArgs> = $Result.GetResult<Prisma.$ExtractPayload, S>

  type ExtractCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExtractFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExtractCountAggregateInputType | true
    }

  export interface ExtractDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Extract'], meta: { name: 'Extract' } }
    /**
     * Find zero or one Extract that matches the filter.
     * @param {ExtractFindUniqueArgs} args - Arguments to find a Extract
     * @example
     * // Get one Extract
     * const extract = await prisma.extract.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExtractFindUniqueArgs>(args: SelectSubset<T, ExtractFindUniqueArgs<ExtArgs>>): Prisma__ExtractClient<$Result.GetResult<Prisma.$ExtractPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Extract that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ExtractFindUniqueOrThrowArgs} args - Arguments to find a Extract
     * @example
     * // Get one Extract
     * const extract = await prisma.extract.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExtractFindUniqueOrThrowArgs>(args: SelectSubset<T, ExtractFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExtractClient<$Result.GetResult<Prisma.$ExtractPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Extract that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExtractFindFirstArgs} args - Arguments to find a Extract
     * @example
     * // Get one Extract
     * const extract = await prisma.extract.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExtractFindFirstArgs>(args?: SelectSubset<T, ExtractFindFirstArgs<ExtArgs>>): Prisma__ExtractClient<$Result.GetResult<Prisma.$ExtractPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Extract that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExtractFindFirstOrThrowArgs} args - Arguments to find a Extract
     * @example
     * // Get one Extract
     * const extract = await prisma.extract.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExtractFindFirstOrThrowArgs>(args?: SelectSubset<T, ExtractFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExtractClient<$Result.GetResult<Prisma.$ExtractPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Extracts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExtractFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Extracts
     * const extracts = await prisma.extract.findMany()
     * 
     * // Get first 10 Extracts
     * const extracts = await prisma.extract.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const extractWithIdOnly = await prisma.extract.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExtractFindManyArgs>(args?: SelectSubset<T, ExtractFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExtractPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Extract.
     * @param {ExtractCreateArgs} args - Arguments to create a Extract.
     * @example
     * // Create one Extract
     * const Extract = await prisma.extract.create({
     *   data: {
     *     // ... data to create a Extract
     *   }
     * })
     * 
     */
    create<T extends ExtractCreateArgs>(args: SelectSubset<T, ExtractCreateArgs<ExtArgs>>): Prisma__ExtractClient<$Result.GetResult<Prisma.$ExtractPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Extracts.
     * @param {ExtractCreateManyArgs} args - Arguments to create many Extracts.
     * @example
     * // Create many Extracts
     * const extract = await prisma.extract.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExtractCreateManyArgs>(args?: SelectSubset<T, ExtractCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Extracts and returns the data saved in the database.
     * @param {ExtractCreateManyAndReturnArgs} args - Arguments to create many Extracts.
     * @example
     * // Create many Extracts
     * const extract = await prisma.extract.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Extracts and only return the `id`
     * const extractWithIdOnly = await prisma.extract.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExtractCreateManyAndReturnArgs>(args?: SelectSubset<T, ExtractCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExtractPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Extract.
     * @param {ExtractDeleteArgs} args - Arguments to delete one Extract.
     * @example
     * // Delete one Extract
     * const Extract = await prisma.extract.delete({
     *   where: {
     *     // ... filter to delete one Extract
     *   }
     * })
     * 
     */
    delete<T extends ExtractDeleteArgs>(args: SelectSubset<T, ExtractDeleteArgs<ExtArgs>>): Prisma__ExtractClient<$Result.GetResult<Prisma.$ExtractPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Extract.
     * @param {ExtractUpdateArgs} args - Arguments to update one Extract.
     * @example
     * // Update one Extract
     * const extract = await prisma.extract.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExtractUpdateArgs>(args: SelectSubset<T, ExtractUpdateArgs<ExtArgs>>): Prisma__ExtractClient<$Result.GetResult<Prisma.$ExtractPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Extracts.
     * @param {ExtractDeleteManyArgs} args - Arguments to filter Extracts to delete.
     * @example
     * // Delete a few Extracts
     * const { count } = await prisma.extract.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExtractDeleteManyArgs>(args?: SelectSubset<T, ExtractDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Extracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExtractUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Extracts
     * const extract = await prisma.extract.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExtractUpdateManyArgs>(args: SelectSubset<T, ExtractUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Extract.
     * @param {ExtractUpsertArgs} args - Arguments to update or create a Extract.
     * @example
     * // Update or create a Extract
     * const extract = await prisma.extract.upsert({
     *   create: {
     *     // ... data to create a Extract
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Extract we want to update
     *   }
     * })
     */
    upsert<T extends ExtractUpsertArgs>(args: SelectSubset<T, ExtractUpsertArgs<ExtArgs>>): Prisma__ExtractClient<$Result.GetResult<Prisma.$ExtractPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Extracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExtractCountArgs} args - Arguments to filter Extracts to count.
     * @example
     * // Count the number of Extracts
     * const count = await prisma.extract.count({
     *   where: {
     *     // ... the filter for the Extracts we want to count
     *   }
     * })
    **/
    count<T extends ExtractCountArgs>(
      args?: Subset<T, ExtractCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExtractCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Extract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExtractAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExtractAggregateArgs>(args: Subset<T, ExtractAggregateArgs>): Prisma.PrismaPromise<GetExtractAggregateType<T>>

    /**
     * Group by Extract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExtractGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExtractGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExtractGroupByArgs['orderBy'] }
        : { orderBy?: ExtractGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExtractGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExtractGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Extract model
   */
  readonly fields: ExtractFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Extract.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExtractClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    transactions<T extends Extract$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Extract$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExtractTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Extract model
   */ 
  interface ExtractFieldRefs {
    readonly id: FieldRef<"Extract", 'String'>
    readonly fileName: FieldRef<"Extract", 'String'>
    readonly uploadDate: FieldRef<"Extract", 'DateTime'>
    readonly status: FieldRef<"Extract", 'String'>
    readonly totalRows: FieldRef<"Extract", 'Int'>
    readonly processedRows: FieldRef<"Extract", 'Int'>
    readonly errorRows: FieldRef<"Extract", 'Int'>
    readonly userId: FieldRef<"Extract", 'String'>
    readonly createdAt: FieldRef<"Extract", 'DateTime'>
    readonly updatedAt: FieldRef<"Extract", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Extract findUnique
   */
  export type ExtractFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Extract
     */
    select?: ExtractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractInclude<ExtArgs> | null
    /**
     * Filter, which Extract to fetch.
     */
    where: ExtractWhereUniqueInput
  }

  /**
   * Extract findUniqueOrThrow
   */
  export type ExtractFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Extract
     */
    select?: ExtractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractInclude<ExtArgs> | null
    /**
     * Filter, which Extract to fetch.
     */
    where: ExtractWhereUniqueInput
  }

  /**
   * Extract findFirst
   */
  export type ExtractFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Extract
     */
    select?: ExtractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractInclude<ExtArgs> | null
    /**
     * Filter, which Extract to fetch.
     */
    where?: ExtractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Extracts to fetch.
     */
    orderBy?: ExtractOrderByWithRelationInput | ExtractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Extracts.
     */
    cursor?: ExtractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Extracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Extracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Extracts.
     */
    distinct?: ExtractScalarFieldEnum | ExtractScalarFieldEnum[]
  }

  /**
   * Extract findFirstOrThrow
   */
  export type ExtractFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Extract
     */
    select?: ExtractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractInclude<ExtArgs> | null
    /**
     * Filter, which Extract to fetch.
     */
    where?: ExtractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Extracts to fetch.
     */
    orderBy?: ExtractOrderByWithRelationInput | ExtractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Extracts.
     */
    cursor?: ExtractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Extracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Extracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Extracts.
     */
    distinct?: ExtractScalarFieldEnum | ExtractScalarFieldEnum[]
  }

  /**
   * Extract findMany
   */
  export type ExtractFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Extract
     */
    select?: ExtractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractInclude<ExtArgs> | null
    /**
     * Filter, which Extracts to fetch.
     */
    where?: ExtractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Extracts to fetch.
     */
    orderBy?: ExtractOrderByWithRelationInput | ExtractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Extracts.
     */
    cursor?: ExtractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Extracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Extracts.
     */
    skip?: number
    distinct?: ExtractScalarFieldEnum | ExtractScalarFieldEnum[]
  }

  /**
   * Extract create
   */
  export type ExtractCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Extract
     */
    select?: ExtractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractInclude<ExtArgs> | null
    /**
     * The data needed to create a Extract.
     */
    data: XOR<ExtractCreateInput, ExtractUncheckedCreateInput>
  }

  /**
   * Extract createMany
   */
  export type ExtractCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Extracts.
     */
    data: ExtractCreateManyInput | ExtractCreateManyInput[]
  }

  /**
   * Extract createManyAndReturn
   */
  export type ExtractCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Extract
     */
    select?: ExtractSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Extracts.
     */
    data: ExtractCreateManyInput | ExtractCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Extract update
   */
  export type ExtractUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Extract
     */
    select?: ExtractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractInclude<ExtArgs> | null
    /**
     * The data needed to update a Extract.
     */
    data: XOR<ExtractUpdateInput, ExtractUncheckedUpdateInput>
    /**
     * Choose, which Extract to update.
     */
    where: ExtractWhereUniqueInput
  }

  /**
   * Extract updateMany
   */
  export type ExtractUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Extracts.
     */
    data: XOR<ExtractUpdateManyMutationInput, ExtractUncheckedUpdateManyInput>
    /**
     * Filter which Extracts to update
     */
    where?: ExtractWhereInput
  }

  /**
   * Extract upsert
   */
  export type ExtractUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Extract
     */
    select?: ExtractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractInclude<ExtArgs> | null
    /**
     * The filter to search for the Extract to update in case it exists.
     */
    where: ExtractWhereUniqueInput
    /**
     * In case the Extract found by the `where` argument doesn't exist, create a new Extract with this data.
     */
    create: XOR<ExtractCreateInput, ExtractUncheckedCreateInput>
    /**
     * In case the Extract was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExtractUpdateInput, ExtractUncheckedUpdateInput>
  }

  /**
   * Extract delete
   */
  export type ExtractDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Extract
     */
    select?: ExtractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractInclude<ExtArgs> | null
    /**
     * Filter which Extract to delete.
     */
    where: ExtractWhereUniqueInput
  }

  /**
   * Extract deleteMany
   */
  export type ExtractDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Extracts to delete
     */
    where?: ExtractWhereInput
  }

  /**
   * Extract.transactions
   */
  export type Extract$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExtractTransaction
     */
    select?: ExtractTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractTransactionInclude<ExtArgs> | null
    where?: ExtractTransactionWhereInput
    orderBy?: ExtractTransactionOrderByWithRelationInput | ExtractTransactionOrderByWithRelationInput[]
    cursor?: ExtractTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExtractTransactionScalarFieldEnum | ExtractTransactionScalarFieldEnum[]
  }

  /**
   * Extract without action
   */
  export type ExtractDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Extract
     */
    select?: ExtractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractInclude<ExtArgs> | null
  }


  /**
   * Model ExtractTransaction
   */

  export type AggregateExtractTransaction = {
    _count: ExtractTransactionCountAggregateOutputType | null
    _avg: ExtractTransactionAvgAggregateOutputType | null
    _sum: ExtractTransactionSumAggregateOutputType | null
    _min: ExtractTransactionMinAggregateOutputType | null
    _max: ExtractTransactionMaxAggregateOutputType | null
  }

  export type ExtractTransactionAvgAggregateOutputType = {
    debit: number | null
    credit: number | null
    amountBase: number | null
    discount: number | null
    amountNet: number | null
    vat: number | null
    sourceRow: number | null
  }

  export type ExtractTransactionSumAggregateOutputType = {
    debit: number | null
    credit: number | null
    amountBase: number | null
    discount: number | null
    amountNet: number | null
    vat: number | null
    sourceRow: number | null
  }

  export type ExtractTransactionMinAggregateOutputType = {
    id: string | null
    extractId: string | null
    customerId: string | null
    date: Date | null
    description: string | null
    debit: number | null
    credit: number | null
    documentType: string | null
    voucherNo: string | null
    dueDate: Date | null
    amountBase: number | null
    discount: number | null
    amountNet: number | null
    vat: number | null
    sourceRow: number | null
    createdAt: Date | null
  }

  export type ExtractTransactionMaxAggregateOutputType = {
    id: string | null
    extractId: string | null
    customerId: string | null
    date: Date | null
    description: string | null
    debit: number | null
    credit: number | null
    documentType: string | null
    voucherNo: string | null
    dueDate: Date | null
    amountBase: number | null
    discount: number | null
    amountNet: number | null
    vat: number | null
    sourceRow: number | null
    createdAt: Date | null
  }

  export type ExtractTransactionCountAggregateOutputType = {
    id: number
    extractId: number
    customerId: number
    date: number
    description: number
    debit: number
    credit: number
    documentType: number
    voucherNo: number
    dueDate: number
    amountBase: number
    discount: number
    amountNet: number
    vat: number
    sourceRow: number
    createdAt: number
    _all: number
  }


  export type ExtractTransactionAvgAggregateInputType = {
    debit?: true
    credit?: true
    amountBase?: true
    discount?: true
    amountNet?: true
    vat?: true
    sourceRow?: true
  }

  export type ExtractTransactionSumAggregateInputType = {
    debit?: true
    credit?: true
    amountBase?: true
    discount?: true
    amountNet?: true
    vat?: true
    sourceRow?: true
  }

  export type ExtractTransactionMinAggregateInputType = {
    id?: true
    extractId?: true
    customerId?: true
    date?: true
    description?: true
    debit?: true
    credit?: true
    documentType?: true
    voucherNo?: true
    dueDate?: true
    amountBase?: true
    discount?: true
    amountNet?: true
    vat?: true
    sourceRow?: true
    createdAt?: true
  }

  export type ExtractTransactionMaxAggregateInputType = {
    id?: true
    extractId?: true
    customerId?: true
    date?: true
    description?: true
    debit?: true
    credit?: true
    documentType?: true
    voucherNo?: true
    dueDate?: true
    amountBase?: true
    discount?: true
    amountNet?: true
    vat?: true
    sourceRow?: true
    createdAt?: true
  }

  export type ExtractTransactionCountAggregateInputType = {
    id?: true
    extractId?: true
    customerId?: true
    date?: true
    description?: true
    debit?: true
    credit?: true
    documentType?: true
    voucherNo?: true
    dueDate?: true
    amountBase?: true
    discount?: true
    amountNet?: true
    vat?: true
    sourceRow?: true
    createdAt?: true
    _all?: true
  }

  export type ExtractTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExtractTransaction to aggregate.
     */
    where?: ExtractTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExtractTransactions to fetch.
     */
    orderBy?: ExtractTransactionOrderByWithRelationInput | ExtractTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExtractTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExtractTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExtractTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExtractTransactions
    **/
    _count?: true | ExtractTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExtractTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExtractTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExtractTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExtractTransactionMaxAggregateInputType
  }

  export type GetExtractTransactionAggregateType<T extends ExtractTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateExtractTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExtractTransaction[P]>
      : GetScalarType<T[P], AggregateExtractTransaction[P]>
  }




  export type ExtractTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExtractTransactionWhereInput
    orderBy?: ExtractTransactionOrderByWithAggregationInput | ExtractTransactionOrderByWithAggregationInput[]
    by: ExtractTransactionScalarFieldEnum[] | ExtractTransactionScalarFieldEnum
    having?: ExtractTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExtractTransactionCountAggregateInputType | true
    _avg?: ExtractTransactionAvgAggregateInputType
    _sum?: ExtractTransactionSumAggregateInputType
    _min?: ExtractTransactionMinAggregateInputType
    _max?: ExtractTransactionMaxAggregateInputType
  }

  export type ExtractTransactionGroupByOutputType = {
    id: string
    extractId: string
    customerId: string | null
    date: Date
    description: string
    debit: number
    credit: number
    documentType: string | null
    voucherNo: string | null
    dueDate: Date | null
    amountBase: number
    discount: number
    amountNet: number
    vat: number
    sourceRow: number
    createdAt: Date
    _count: ExtractTransactionCountAggregateOutputType | null
    _avg: ExtractTransactionAvgAggregateOutputType | null
    _sum: ExtractTransactionSumAggregateOutputType | null
    _min: ExtractTransactionMinAggregateOutputType | null
    _max: ExtractTransactionMaxAggregateOutputType | null
  }

  type GetExtractTransactionGroupByPayload<T extends ExtractTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExtractTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExtractTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExtractTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], ExtractTransactionGroupByOutputType[P]>
        }
      >
    >


  export type ExtractTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    extractId?: boolean
    customerId?: boolean
    date?: boolean
    description?: boolean
    debit?: boolean
    credit?: boolean
    documentType?: boolean
    voucherNo?: boolean
    dueDate?: boolean
    amountBase?: boolean
    discount?: boolean
    amountNet?: boolean
    vat?: boolean
    sourceRow?: boolean
    createdAt?: boolean
    extract?: boolean | ExtractDefaultArgs<ExtArgs>
    customer?: boolean | ExtractTransaction$customerArgs<ExtArgs>
  }, ExtArgs["result"]["extractTransaction"]>

  export type ExtractTransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    extractId?: boolean
    customerId?: boolean
    date?: boolean
    description?: boolean
    debit?: boolean
    credit?: boolean
    documentType?: boolean
    voucherNo?: boolean
    dueDate?: boolean
    amountBase?: boolean
    discount?: boolean
    amountNet?: boolean
    vat?: boolean
    sourceRow?: boolean
    createdAt?: boolean
    extract?: boolean | ExtractDefaultArgs<ExtArgs>
    customer?: boolean | ExtractTransaction$customerArgs<ExtArgs>
  }, ExtArgs["result"]["extractTransaction"]>

  export type ExtractTransactionSelectScalar = {
    id?: boolean
    extractId?: boolean
    customerId?: boolean
    date?: boolean
    description?: boolean
    debit?: boolean
    credit?: boolean
    documentType?: boolean
    voucherNo?: boolean
    dueDate?: boolean
    amountBase?: boolean
    discount?: boolean
    amountNet?: boolean
    vat?: boolean
    sourceRow?: boolean
    createdAt?: boolean
  }

  export type ExtractTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    extract?: boolean | ExtractDefaultArgs<ExtArgs>
    customer?: boolean | ExtractTransaction$customerArgs<ExtArgs>
  }
  export type ExtractTransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    extract?: boolean | ExtractDefaultArgs<ExtArgs>
    customer?: boolean | ExtractTransaction$customerArgs<ExtArgs>
  }

  export type $ExtractTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExtractTransaction"
    objects: {
      extract: Prisma.$ExtractPayload<ExtArgs>
      customer: Prisma.$CustomerPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      extractId: string
      customerId: string | null
      date: Date
      description: string
      debit: number
      credit: number
      documentType: string | null
      voucherNo: string | null
      dueDate: Date | null
      amountBase: number
      discount: number
      amountNet: number
      vat: number
      sourceRow: number
      createdAt: Date
    }, ExtArgs["result"]["extractTransaction"]>
    composites: {}
  }

  type ExtractTransactionGetPayload<S extends boolean | null | undefined | ExtractTransactionDefaultArgs> = $Result.GetResult<Prisma.$ExtractTransactionPayload, S>

  type ExtractTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExtractTransactionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExtractTransactionCountAggregateInputType | true
    }

  export interface ExtractTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExtractTransaction'], meta: { name: 'ExtractTransaction' } }
    /**
     * Find zero or one ExtractTransaction that matches the filter.
     * @param {ExtractTransactionFindUniqueArgs} args - Arguments to find a ExtractTransaction
     * @example
     * // Get one ExtractTransaction
     * const extractTransaction = await prisma.extractTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExtractTransactionFindUniqueArgs>(args: SelectSubset<T, ExtractTransactionFindUniqueArgs<ExtArgs>>): Prisma__ExtractTransactionClient<$Result.GetResult<Prisma.$ExtractTransactionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ExtractTransaction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ExtractTransactionFindUniqueOrThrowArgs} args - Arguments to find a ExtractTransaction
     * @example
     * // Get one ExtractTransaction
     * const extractTransaction = await prisma.extractTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExtractTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, ExtractTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExtractTransactionClient<$Result.GetResult<Prisma.$ExtractTransactionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ExtractTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExtractTransactionFindFirstArgs} args - Arguments to find a ExtractTransaction
     * @example
     * // Get one ExtractTransaction
     * const extractTransaction = await prisma.extractTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExtractTransactionFindFirstArgs>(args?: SelectSubset<T, ExtractTransactionFindFirstArgs<ExtArgs>>): Prisma__ExtractTransactionClient<$Result.GetResult<Prisma.$ExtractTransactionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ExtractTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExtractTransactionFindFirstOrThrowArgs} args - Arguments to find a ExtractTransaction
     * @example
     * // Get one ExtractTransaction
     * const extractTransaction = await prisma.extractTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExtractTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, ExtractTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExtractTransactionClient<$Result.GetResult<Prisma.$ExtractTransactionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ExtractTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExtractTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExtractTransactions
     * const extractTransactions = await prisma.extractTransaction.findMany()
     * 
     * // Get first 10 ExtractTransactions
     * const extractTransactions = await prisma.extractTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const extractTransactionWithIdOnly = await prisma.extractTransaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExtractTransactionFindManyArgs>(args?: SelectSubset<T, ExtractTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExtractTransactionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ExtractTransaction.
     * @param {ExtractTransactionCreateArgs} args - Arguments to create a ExtractTransaction.
     * @example
     * // Create one ExtractTransaction
     * const ExtractTransaction = await prisma.extractTransaction.create({
     *   data: {
     *     // ... data to create a ExtractTransaction
     *   }
     * })
     * 
     */
    create<T extends ExtractTransactionCreateArgs>(args: SelectSubset<T, ExtractTransactionCreateArgs<ExtArgs>>): Prisma__ExtractTransactionClient<$Result.GetResult<Prisma.$ExtractTransactionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ExtractTransactions.
     * @param {ExtractTransactionCreateManyArgs} args - Arguments to create many ExtractTransactions.
     * @example
     * // Create many ExtractTransactions
     * const extractTransaction = await prisma.extractTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExtractTransactionCreateManyArgs>(args?: SelectSubset<T, ExtractTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ExtractTransactions and returns the data saved in the database.
     * @param {ExtractTransactionCreateManyAndReturnArgs} args - Arguments to create many ExtractTransactions.
     * @example
     * // Create many ExtractTransactions
     * const extractTransaction = await prisma.extractTransaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ExtractTransactions and only return the `id`
     * const extractTransactionWithIdOnly = await prisma.extractTransaction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExtractTransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, ExtractTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExtractTransactionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ExtractTransaction.
     * @param {ExtractTransactionDeleteArgs} args - Arguments to delete one ExtractTransaction.
     * @example
     * // Delete one ExtractTransaction
     * const ExtractTransaction = await prisma.extractTransaction.delete({
     *   where: {
     *     // ... filter to delete one ExtractTransaction
     *   }
     * })
     * 
     */
    delete<T extends ExtractTransactionDeleteArgs>(args: SelectSubset<T, ExtractTransactionDeleteArgs<ExtArgs>>): Prisma__ExtractTransactionClient<$Result.GetResult<Prisma.$ExtractTransactionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ExtractTransaction.
     * @param {ExtractTransactionUpdateArgs} args - Arguments to update one ExtractTransaction.
     * @example
     * // Update one ExtractTransaction
     * const extractTransaction = await prisma.extractTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExtractTransactionUpdateArgs>(args: SelectSubset<T, ExtractTransactionUpdateArgs<ExtArgs>>): Prisma__ExtractTransactionClient<$Result.GetResult<Prisma.$ExtractTransactionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ExtractTransactions.
     * @param {ExtractTransactionDeleteManyArgs} args - Arguments to filter ExtractTransactions to delete.
     * @example
     * // Delete a few ExtractTransactions
     * const { count } = await prisma.extractTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExtractTransactionDeleteManyArgs>(args?: SelectSubset<T, ExtractTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExtractTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExtractTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExtractTransactions
     * const extractTransaction = await prisma.extractTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExtractTransactionUpdateManyArgs>(args: SelectSubset<T, ExtractTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ExtractTransaction.
     * @param {ExtractTransactionUpsertArgs} args - Arguments to update or create a ExtractTransaction.
     * @example
     * // Update or create a ExtractTransaction
     * const extractTransaction = await prisma.extractTransaction.upsert({
     *   create: {
     *     // ... data to create a ExtractTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExtractTransaction we want to update
     *   }
     * })
     */
    upsert<T extends ExtractTransactionUpsertArgs>(args: SelectSubset<T, ExtractTransactionUpsertArgs<ExtArgs>>): Prisma__ExtractTransactionClient<$Result.GetResult<Prisma.$ExtractTransactionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ExtractTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExtractTransactionCountArgs} args - Arguments to filter ExtractTransactions to count.
     * @example
     * // Count the number of ExtractTransactions
     * const count = await prisma.extractTransaction.count({
     *   where: {
     *     // ... the filter for the ExtractTransactions we want to count
     *   }
     * })
    **/
    count<T extends ExtractTransactionCountArgs>(
      args?: Subset<T, ExtractTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExtractTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExtractTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExtractTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExtractTransactionAggregateArgs>(args: Subset<T, ExtractTransactionAggregateArgs>): Prisma.PrismaPromise<GetExtractTransactionAggregateType<T>>

    /**
     * Group by ExtractTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExtractTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExtractTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExtractTransactionGroupByArgs['orderBy'] }
        : { orderBy?: ExtractTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExtractTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExtractTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExtractTransaction model
   */
  readonly fields: ExtractTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExtractTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExtractTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    extract<T extends ExtractDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExtractDefaultArgs<ExtArgs>>): Prisma__ExtractClient<$Result.GetResult<Prisma.$ExtractPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    customer<T extends ExtractTransaction$customerArgs<ExtArgs> = {}>(args?: Subset<T, ExtractTransaction$customerArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExtractTransaction model
   */ 
  interface ExtractTransactionFieldRefs {
    readonly id: FieldRef<"ExtractTransaction", 'String'>
    readonly extractId: FieldRef<"ExtractTransaction", 'String'>
    readonly customerId: FieldRef<"ExtractTransaction", 'String'>
    readonly date: FieldRef<"ExtractTransaction", 'DateTime'>
    readonly description: FieldRef<"ExtractTransaction", 'String'>
    readonly debit: FieldRef<"ExtractTransaction", 'Float'>
    readonly credit: FieldRef<"ExtractTransaction", 'Float'>
    readonly documentType: FieldRef<"ExtractTransaction", 'String'>
    readonly voucherNo: FieldRef<"ExtractTransaction", 'String'>
    readonly dueDate: FieldRef<"ExtractTransaction", 'DateTime'>
    readonly amountBase: FieldRef<"ExtractTransaction", 'Float'>
    readonly discount: FieldRef<"ExtractTransaction", 'Float'>
    readonly amountNet: FieldRef<"ExtractTransaction", 'Float'>
    readonly vat: FieldRef<"ExtractTransaction", 'Float'>
    readonly sourceRow: FieldRef<"ExtractTransaction", 'Int'>
    readonly createdAt: FieldRef<"ExtractTransaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ExtractTransaction findUnique
   */
  export type ExtractTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExtractTransaction
     */
    select?: ExtractTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractTransactionInclude<ExtArgs> | null
    /**
     * Filter, which ExtractTransaction to fetch.
     */
    where: ExtractTransactionWhereUniqueInput
  }

  /**
   * ExtractTransaction findUniqueOrThrow
   */
  export type ExtractTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExtractTransaction
     */
    select?: ExtractTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractTransactionInclude<ExtArgs> | null
    /**
     * Filter, which ExtractTransaction to fetch.
     */
    where: ExtractTransactionWhereUniqueInput
  }

  /**
   * ExtractTransaction findFirst
   */
  export type ExtractTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExtractTransaction
     */
    select?: ExtractTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractTransactionInclude<ExtArgs> | null
    /**
     * Filter, which ExtractTransaction to fetch.
     */
    where?: ExtractTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExtractTransactions to fetch.
     */
    orderBy?: ExtractTransactionOrderByWithRelationInput | ExtractTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExtractTransactions.
     */
    cursor?: ExtractTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExtractTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExtractTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExtractTransactions.
     */
    distinct?: ExtractTransactionScalarFieldEnum | ExtractTransactionScalarFieldEnum[]
  }

  /**
   * ExtractTransaction findFirstOrThrow
   */
  export type ExtractTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExtractTransaction
     */
    select?: ExtractTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractTransactionInclude<ExtArgs> | null
    /**
     * Filter, which ExtractTransaction to fetch.
     */
    where?: ExtractTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExtractTransactions to fetch.
     */
    orderBy?: ExtractTransactionOrderByWithRelationInput | ExtractTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExtractTransactions.
     */
    cursor?: ExtractTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExtractTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExtractTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExtractTransactions.
     */
    distinct?: ExtractTransactionScalarFieldEnum | ExtractTransactionScalarFieldEnum[]
  }

  /**
   * ExtractTransaction findMany
   */
  export type ExtractTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExtractTransaction
     */
    select?: ExtractTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractTransactionInclude<ExtArgs> | null
    /**
     * Filter, which ExtractTransactions to fetch.
     */
    where?: ExtractTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExtractTransactions to fetch.
     */
    orderBy?: ExtractTransactionOrderByWithRelationInput | ExtractTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExtractTransactions.
     */
    cursor?: ExtractTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExtractTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExtractTransactions.
     */
    skip?: number
    distinct?: ExtractTransactionScalarFieldEnum | ExtractTransactionScalarFieldEnum[]
  }

  /**
   * ExtractTransaction create
   */
  export type ExtractTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExtractTransaction
     */
    select?: ExtractTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a ExtractTransaction.
     */
    data: XOR<ExtractTransactionCreateInput, ExtractTransactionUncheckedCreateInput>
  }

  /**
   * ExtractTransaction createMany
   */
  export type ExtractTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExtractTransactions.
     */
    data: ExtractTransactionCreateManyInput | ExtractTransactionCreateManyInput[]
  }

  /**
   * ExtractTransaction createManyAndReturn
   */
  export type ExtractTransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExtractTransaction
     */
    select?: ExtractTransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ExtractTransactions.
     */
    data: ExtractTransactionCreateManyInput | ExtractTransactionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractTransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExtractTransaction update
   */
  export type ExtractTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExtractTransaction
     */
    select?: ExtractTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a ExtractTransaction.
     */
    data: XOR<ExtractTransactionUpdateInput, ExtractTransactionUncheckedUpdateInput>
    /**
     * Choose, which ExtractTransaction to update.
     */
    where: ExtractTransactionWhereUniqueInput
  }

  /**
   * ExtractTransaction updateMany
   */
  export type ExtractTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExtractTransactions.
     */
    data: XOR<ExtractTransactionUpdateManyMutationInput, ExtractTransactionUncheckedUpdateManyInput>
    /**
     * Filter which ExtractTransactions to update
     */
    where?: ExtractTransactionWhereInput
  }

  /**
   * ExtractTransaction upsert
   */
  export type ExtractTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExtractTransaction
     */
    select?: ExtractTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the ExtractTransaction to update in case it exists.
     */
    where: ExtractTransactionWhereUniqueInput
    /**
     * In case the ExtractTransaction found by the `where` argument doesn't exist, create a new ExtractTransaction with this data.
     */
    create: XOR<ExtractTransactionCreateInput, ExtractTransactionUncheckedCreateInput>
    /**
     * In case the ExtractTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExtractTransactionUpdateInput, ExtractTransactionUncheckedUpdateInput>
  }

  /**
   * ExtractTransaction delete
   */
  export type ExtractTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExtractTransaction
     */
    select?: ExtractTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractTransactionInclude<ExtArgs> | null
    /**
     * Filter which ExtractTransaction to delete.
     */
    where: ExtractTransactionWhereUniqueInput
  }

  /**
   * ExtractTransaction deleteMany
   */
  export type ExtractTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExtractTransactions to delete
     */
    where?: ExtractTransactionWhereInput
  }

  /**
   * ExtractTransaction.customer
   */
  export type ExtractTransaction$customerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
  }

  /**
   * ExtractTransaction without action
   */
  export type ExtractTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExtractTransaction
     */
    select?: ExtractTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExtractTransactionInclude<ExtArgs> | null
  }


  /**
   * Model BankTransaction
   */

  export type AggregateBankTransaction = {
    _count: BankTransactionCountAggregateOutputType | null
    _avg: BankTransactionAvgAggregateOutputType | null
    _sum: BankTransactionSumAggregateOutputType | null
    _min: BankTransactionMinAggregateOutputType | null
    _max: BankTransactionMaxAggregateOutputType | null
  }

  export type BankTransactionAvgAggregateOutputType = {
    amount: number | null
    balanceAfter: number | null
    confidenceScore: number | null
  }

  export type BankTransactionSumAggregateOutputType = {
    amount: number | null
    balanceAfter: number | null
    confidenceScore: number | null
  }

  export type BankTransactionMinAggregateOutputType = {
    id: string | null
    messageId: string | null
    bankCode: string | null
    direction: string | null
    accountIban: string | null
    maskedAccount: string | null
    transactionDate: Date | null
    amount: number | null
    senderName: string | null
    counterpartyName: string | null
    balanceAfter: number | null
    isMatched: boolean | null
    matchedCustomerId: string | null
    confidenceScore: number | null
    rawEmailData: string | null
    parsedData: string | null
    createdAt: Date | null
    processedAt: Date | null
  }

  export type BankTransactionMaxAggregateOutputType = {
    id: string | null
    messageId: string | null
    bankCode: string | null
    direction: string | null
    accountIban: string | null
    maskedAccount: string | null
    transactionDate: Date | null
    amount: number | null
    senderName: string | null
    counterpartyName: string | null
    balanceAfter: number | null
    isMatched: boolean | null
    matchedCustomerId: string | null
    confidenceScore: number | null
    rawEmailData: string | null
    parsedData: string | null
    createdAt: Date | null
    processedAt: Date | null
  }

  export type BankTransactionCountAggregateOutputType = {
    id: number
    messageId: number
    bankCode: number
    direction: number
    accountIban: number
    maskedAccount: number
    transactionDate: number
    amount: number
    senderName: number
    counterpartyName: number
    balanceAfter: number
    isMatched: number
    matchedCustomerId: number
    confidenceScore: number
    rawEmailData: number
    parsedData: number
    createdAt: number
    processedAt: number
    _all: number
  }


  export type BankTransactionAvgAggregateInputType = {
    amount?: true
    balanceAfter?: true
    confidenceScore?: true
  }

  export type BankTransactionSumAggregateInputType = {
    amount?: true
    balanceAfter?: true
    confidenceScore?: true
  }

  export type BankTransactionMinAggregateInputType = {
    id?: true
    messageId?: true
    bankCode?: true
    direction?: true
    accountIban?: true
    maskedAccount?: true
    transactionDate?: true
    amount?: true
    senderName?: true
    counterpartyName?: true
    balanceAfter?: true
    isMatched?: true
    matchedCustomerId?: true
    confidenceScore?: true
    rawEmailData?: true
    parsedData?: true
    createdAt?: true
    processedAt?: true
  }

  export type BankTransactionMaxAggregateInputType = {
    id?: true
    messageId?: true
    bankCode?: true
    direction?: true
    accountIban?: true
    maskedAccount?: true
    transactionDate?: true
    amount?: true
    senderName?: true
    counterpartyName?: true
    balanceAfter?: true
    isMatched?: true
    matchedCustomerId?: true
    confidenceScore?: true
    rawEmailData?: true
    parsedData?: true
    createdAt?: true
    processedAt?: true
  }

  export type BankTransactionCountAggregateInputType = {
    id?: true
    messageId?: true
    bankCode?: true
    direction?: true
    accountIban?: true
    maskedAccount?: true
    transactionDate?: true
    amount?: true
    senderName?: true
    counterpartyName?: true
    balanceAfter?: true
    isMatched?: true
    matchedCustomerId?: true
    confidenceScore?: true
    rawEmailData?: true
    parsedData?: true
    createdAt?: true
    processedAt?: true
    _all?: true
  }

  export type BankTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BankTransaction to aggregate.
     */
    where?: BankTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankTransactions to fetch.
     */
    orderBy?: BankTransactionOrderByWithRelationInput | BankTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BankTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BankTransactions
    **/
    _count?: true | BankTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BankTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BankTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BankTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BankTransactionMaxAggregateInputType
  }

  export type GetBankTransactionAggregateType<T extends BankTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateBankTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBankTransaction[P]>
      : GetScalarType<T[P], AggregateBankTransaction[P]>
  }




  export type BankTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BankTransactionWhereInput
    orderBy?: BankTransactionOrderByWithAggregationInput | BankTransactionOrderByWithAggregationInput[]
    by: BankTransactionScalarFieldEnum[] | BankTransactionScalarFieldEnum
    having?: BankTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BankTransactionCountAggregateInputType | true
    _avg?: BankTransactionAvgAggregateInputType
    _sum?: BankTransactionSumAggregateInputType
    _min?: BankTransactionMinAggregateInputType
    _max?: BankTransactionMaxAggregateInputType
  }

  export type BankTransactionGroupByOutputType = {
    id: string
    messageId: string
    bankCode: string
    direction: string
    accountIban: string
    maskedAccount: string | null
    transactionDate: Date
    amount: number
    senderName: string | null
    counterpartyName: string | null
    balanceAfter: number | null
    isMatched: boolean
    matchedCustomerId: string | null
    confidenceScore: number | null
    rawEmailData: string | null
    parsedData: string | null
    createdAt: Date
    processedAt: Date | null
    _count: BankTransactionCountAggregateOutputType | null
    _avg: BankTransactionAvgAggregateOutputType | null
    _sum: BankTransactionSumAggregateOutputType | null
    _min: BankTransactionMinAggregateOutputType | null
    _max: BankTransactionMaxAggregateOutputType | null
  }

  type GetBankTransactionGroupByPayload<T extends BankTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BankTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BankTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BankTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], BankTransactionGroupByOutputType[P]>
        }
      >
    >


  export type BankTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    bankCode?: boolean
    direction?: boolean
    accountIban?: boolean
    maskedAccount?: boolean
    transactionDate?: boolean
    amount?: boolean
    senderName?: boolean
    counterpartyName?: boolean
    balanceAfter?: boolean
    isMatched?: boolean
    matchedCustomerId?: boolean
    confidenceScore?: boolean
    rawEmailData?: boolean
    parsedData?: boolean
    createdAt?: boolean
    processedAt?: boolean
    customer?: boolean | BankTransaction$customerArgs<ExtArgs>
    paymentMatches?: boolean | BankTransaction$paymentMatchesArgs<ExtArgs>
    _count?: boolean | BankTransactionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bankTransaction"]>

  export type BankTransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    bankCode?: boolean
    direction?: boolean
    accountIban?: boolean
    maskedAccount?: boolean
    transactionDate?: boolean
    amount?: boolean
    senderName?: boolean
    counterpartyName?: boolean
    balanceAfter?: boolean
    isMatched?: boolean
    matchedCustomerId?: boolean
    confidenceScore?: boolean
    rawEmailData?: boolean
    parsedData?: boolean
    createdAt?: boolean
    processedAt?: boolean
    customer?: boolean | BankTransaction$customerArgs<ExtArgs>
  }, ExtArgs["result"]["bankTransaction"]>

  export type BankTransactionSelectScalar = {
    id?: boolean
    messageId?: boolean
    bankCode?: boolean
    direction?: boolean
    accountIban?: boolean
    maskedAccount?: boolean
    transactionDate?: boolean
    amount?: boolean
    senderName?: boolean
    counterpartyName?: boolean
    balanceAfter?: boolean
    isMatched?: boolean
    matchedCustomerId?: boolean
    confidenceScore?: boolean
    rawEmailData?: boolean
    parsedData?: boolean
    createdAt?: boolean
    processedAt?: boolean
  }

  export type BankTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | BankTransaction$customerArgs<ExtArgs>
    paymentMatches?: boolean | BankTransaction$paymentMatchesArgs<ExtArgs>
    _count?: boolean | BankTransactionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BankTransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | BankTransaction$customerArgs<ExtArgs>
  }

  export type $BankTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BankTransaction"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs> | null
      paymentMatches: Prisma.$PaymentMatchPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      messageId: string
      bankCode: string
      direction: string
      accountIban: string
      maskedAccount: string | null
      transactionDate: Date
      amount: number
      senderName: string | null
      counterpartyName: string | null
      balanceAfter: number | null
      isMatched: boolean
      matchedCustomerId: string | null
      confidenceScore: number | null
      rawEmailData: string | null
      parsedData: string | null
      createdAt: Date
      processedAt: Date | null
    }, ExtArgs["result"]["bankTransaction"]>
    composites: {}
  }

  type BankTransactionGetPayload<S extends boolean | null | undefined | BankTransactionDefaultArgs> = $Result.GetResult<Prisma.$BankTransactionPayload, S>

  type BankTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BankTransactionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BankTransactionCountAggregateInputType | true
    }

  export interface BankTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BankTransaction'], meta: { name: 'BankTransaction' } }
    /**
     * Find zero or one BankTransaction that matches the filter.
     * @param {BankTransactionFindUniqueArgs} args - Arguments to find a BankTransaction
     * @example
     * // Get one BankTransaction
     * const bankTransaction = await prisma.bankTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BankTransactionFindUniqueArgs>(args: SelectSubset<T, BankTransactionFindUniqueArgs<ExtArgs>>): Prisma__BankTransactionClient<$Result.GetResult<Prisma.$BankTransactionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BankTransaction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BankTransactionFindUniqueOrThrowArgs} args - Arguments to find a BankTransaction
     * @example
     * // Get one BankTransaction
     * const bankTransaction = await prisma.bankTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BankTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, BankTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BankTransactionClient<$Result.GetResult<Prisma.$BankTransactionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BankTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankTransactionFindFirstArgs} args - Arguments to find a BankTransaction
     * @example
     * // Get one BankTransaction
     * const bankTransaction = await prisma.bankTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BankTransactionFindFirstArgs>(args?: SelectSubset<T, BankTransactionFindFirstArgs<ExtArgs>>): Prisma__BankTransactionClient<$Result.GetResult<Prisma.$BankTransactionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BankTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankTransactionFindFirstOrThrowArgs} args - Arguments to find a BankTransaction
     * @example
     * // Get one BankTransaction
     * const bankTransaction = await prisma.bankTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BankTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, BankTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__BankTransactionClient<$Result.GetResult<Prisma.$BankTransactionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BankTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BankTransactions
     * const bankTransactions = await prisma.bankTransaction.findMany()
     * 
     * // Get first 10 BankTransactions
     * const bankTransactions = await prisma.bankTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bankTransactionWithIdOnly = await prisma.bankTransaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BankTransactionFindManyArgs>(args?: SelectSubset<T, BankTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BankTransactionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BankTransaction.
     * @param {BankTransactionCreateArgs} args - Arguments to create a BankTransaction.
     * @example
     * // Create one BankTransaction
     * const BankTransaction = await prisma.bankTransaction.create({
     *   data: {
     *     // ... data to create a BankTransaction
     *   }
     * })
     * 
     */
    create<T extends BankTransactionCreateArgs>(args: SelectSubset<T, BankTransactionCreateArgs<ExtArgs>>): Prisma__BankTransactionClient<$Result.GetResult<Prisma.$BankTransactionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BankTransactions.
     * @param {BankTransactionCreateManyArgs} args - Arguments to create many BankTransactions.
     * @example
     * // Create many BankTransactions
     * const bankTransaction = await prisma.bankTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BankTransactionCreateManyArgs>(args?: SelectSubset<T, BankTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BankTransactions and returns the data saved in the database.
     * @param {BankTransactionCreateManyAndReturnArgs} args - Arguments to create many BankTransactions.
     * @example
     * // Create many BankTransactions
     * const bankTransaction = await prisma.bankTransaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BankTransactions and only return the `id`
     * const bankTransactionWithIdOnly = await prisma.bankTransaction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BankTransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, BankTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BankTransactionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BankTransaction.
     * @param {BankTransactionDeleteArgs} args - Arguments to delete one BankTransaction.
     * @example
     * // Delete one BankTransaction
     * const BankTransaction = await prisma.bankTransaction.delete({
     *   where: {
     *     // ... filter to delete one BankTransaction
     *   }
     * })
     * 
     */
    delete<T extends BankTransactionDeleteArgs>(args: SelectSubset<T, BankTransactionDeleteArgs<ExtArgs>>): Prisma__BankTransactionClient<$Result.GetResult<Prisma.$BankTransactionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BankTransaction.
     * @param {BankTransactionUpdateArgs} args - Arguments to update one BankTransaction.
     * @example
     * // Update one BankTransaction
     * const bankTransaction = await prisma.bankTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BankTransactionUpdateArgs>(args: SelectSubset<T, BankTransactionUpdateArgs<ExtArgs>>): Prisma__BankTransactionClient<$Result.GetResult<Prisma.$BankTransactionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BankTransactions.
     * @param {BankTransactionDeleteManyArgs} args - Arguments to filter BankTransactions to delete.
     * @example
     * // Delete a few BankTransactions
     * const { count } = await prisma.bankTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BankTransactionDeleteManyArgs>(args?: SelectSubset<T, BankTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BankTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BankTransactions
     * const bankTransaction = await prisma.bankTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BankTransactionUpdateManyArgs>(args: SelectSubset<T, BankTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BankTransaction.
     * @param {BankTransactionUpsertArgs} args - Arguments to update or create a BankTransaction.
     * @example
     * // Update or create a BankTransaction
     * const bankTransaction = await prisma.bankTransaction.upsert({
     *   create: {
     *     // ... data to create a BankTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BankTransaction we want to update
     *   }
     * })
     */
    upsert<T extends BankTransactionUpsertArgs>(args: SelectSubset<T, BankTransactionUpsertArgs<ExtArgs>>): Prisma__BankTransactionClient<$Result.GetResult<Prisma.$BankTransactionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BankTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankTransactionCountArgs} args - Arguments to filter BankTransactions to count.
     * @example
     * // Count the number of BankTransactions
     * const count = await prisma.bankTransaction.count({
     *   where: {
     *     // ... the filter for the BankTransactions we want to count
     *   }
     * })
    **/
    count<T extends BankTransactionCountArgs>(
      args?: Subset<T, BankTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BankTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BankTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BankTransactionAggregateArgs>(args: Subset<T, BankTransactionAggregateArgs>): Prisma.PrismaPromise<GetBankTransactionAggregateType<T>>

    /**
     * Group by BankTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BankTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BankTransactionGroupByArgs['orderBy'] }
        : { orderBy?: BankTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BankTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBankTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BankTransaction model
   */
  readonly fields: BankTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BankTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BankTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends BankTransaction$customerArgs<ExtArgs> = {}>(args?: Subset<T, BankTransaction$customerArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    paymentMatches<T extends BankTransaction$paymentMatchesArgs<ExtArgs> = {}>(args?: Subset<T, BankTransaction$paymentMatchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentMatchPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BankTransaction model
   */ 
  interface BankTransactionFieldRefs {
    readonly id: FieldRef<"BankTransaction", 'String'>
    readonly messageId: FieldRef<"BankTransaction", 'String'>
    readonly bankCode: FieldRef<"BankTransaction", 'String'>
    readonly direction: FieldRef<"BankTransaction", 'String'>
    readonly accountIban: FieldRef<"BankTransaction", 'String'>
    readonly maskedAccount: FieldRef<"BankTransaction", 'String'>
    readonly transactionDate: FieldRef<"BankTransaction", 'DateTime'>
    readonly amount: FieldRef<"BankTransaction", 'Float'>
    readonly senderName: FieldRef<"BankTransaction", 'String'>
    readonly counterpartyName: FieldRef<"BankTransaction", 'String'>
    readonly balanceAfter: FieldRef<"BankTransaction", 'Float'>
    readonly isMatched: FieldRef<"BankTransaction", 'Boolean'>
    readonly matchedCustomerId: FieldRef<"BankTransaction", 'String'>
    readonly confidenceScore: FieldRef<"BankTransaction", 'Float'>
    readonly rawEmailData: FieldRef<"BankTransaction", 'String'>
    readonly parsedData: FieldRef<"BankTransaction", 'String'>
    readonly createdAt: FieldRef<"BankTransaction", 'DateTime'>
    readonly processedAt: FieldRef<"BankTransaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BankTransaction findUnique
   */
  export type BankTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankTransaction
     */
    select?: BankTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankTransactionInclude<ExtArgs> | null
    /**
     * Filter, which BankTransaction to fetch.
     */
    where: BankTransactionWhereUniqueInput
  }

  /**
   * BankTransaction findUniqueOrThrow
   */
  export type BankTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankTransaction
     */
    select?: BankTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankTransactionInclude<ExtArgs> | null
    /**
     * Filter, which BankTransaction to fetch.
     */
    where: BankTransactionWhereUniqueInput
  }

  /**
   * BankTransaction findFirst
   */
  export type BankTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankTransaction
     */
    select?: BankTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankTransactionInclude<ExtArgs> | null
    /**
     * Filter, which BankTransaction to fetch.
     */
    where?: BankTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankTransactions to fetch.
     */
    orderBy?: BankTransactionOrderByWithRelationInput | BankTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BankTransactions.
     */
    cursor?: BankTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BankTransactions.
     */
    distinct?: BankTransactionScalarFieldEnum | BankTransactionScalarFieldEnum[]
  }

  /**
   * BankTransaction findFirstOrThrow
   */
  export type BankTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankTransaction
     */
    select?: BankTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankTransactionInclude<ExtArgs> | null
    /**
     * Filter, which BankTransaction to fetch.
     */
    where?: BankTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankTransactions to fetch.
     */
    orderBy?: BankTransactionOrderByWithRelationInput | BankTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BankTransactions.
     */
    cursor?: BankTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BankTransactions.
     */
    distinct?: BankTransactionScalarFieldEnum | BankTransactionScalarFieldEnum[]
  }

  /**
   * BankTransaction findMany
   */
  export type BankTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankTransaction
     */
    select?: BankTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankTransactionInclude<ExtArgs> | null
    /**
     * Filter, which BankTransactions to fetch.
     */
    where?: BankTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankTransactions to fetch.
     */
    orderBy?: BankTransactionOrderByWithRelationInput | BankTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BankTransactions.
     */
    cursor?: BankTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankTransactions.
     */
    skip?: number
    distinct?: BankTransactionScalarFieldEnum | BankTransactionScalarFieldEnum[]
  }

  /**
   * BankTransaction create
   */
  export type BankTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankTransaction
     */
    select?: BankTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a BankTransaction.
     */
    data: XOR<BankTransactionCreateInput, BankTransactionUncheckedCreateInput>
  }

  /**
   * BankTransaction createMany
   */
  export type BankTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BankTransactions.
     */
    data: BankTransactionCreateManyInput | BankTransactionCreateManyInput[]
  }

  /**
   * BankTransaction createManyAndReturn
   */
  export type BankTransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankTransaction
     */
    select?: BankTransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BankTransactions.
     */
    data: BankTransactionCreateManyInput | BankTransactionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankTransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BankTransaction update
   */
  export type BankTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankTransaction
     */
    select?: BankTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a BankTransaction.
     */
    data: XOR<BankTransactionUpdateInput, BankTransactionUncheckedUpdateInput>
    /**
     * Choose, which BankTransaction to update.
     */
    where: BankTransactionWhereUniqueInput
  }

  /**
   * BankTransaction updateMany
   */
  export type BankTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BankTransactions.
     */
    data: XOR<BankTransactionUpdateManyMutationInput, BankTransactionUncheckedUpdateManyInput>
    /**
     * Filter which BankTransactions to update
     */
    where?: BankTransactionWhereInput
  }

  /**
   * BankTransaction upsert
   */
  export type BankTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankTransaction
     */
    select?: BankTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the BankTransaction to update in case it exists.
     */
    where: BankTransactionWhereUniqueInput
    /**
     * In case the BankTransaction found by the `where` argument doesn't exist, create a new BankTransaction with this data.
     */
    create: XOR<BankTransactionCreateInput, BankTransactionUncheckedCreateInput>
    /**
     * In case the BankTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BankTransactionUpdateInput, BankTransactionUncheckedUpdateInput>
  }

  /**
   * BankTransaction delete
   */
  export type BankTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankTransaction
     */
    select?: BankTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankTransactionInclude<ExtArgs> | null
    /**
     * Filter which BankTransaction to delete.
     */
    where: BankTransactionWhereUniqueInput
  }

  /**
   * BankTransaction deleteMany
   */
  export type BankTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BankTransactions to delete
     */
    where?: BankTransactionWhereInput
  }

  /**
   * BankTransaction.customer
   */
  export type BankTransaction$customerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
  }

  /**
   * BankTransaction.paymentMatches
   */
  export type BankTransaction$paymentMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMatch
     */
    select?: PaymentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMatchInclude<ExtArgs> | null
    where?: PaymentMatchWhereInput
    orderBy?: PaymentMatchOrderByWithRelationInput | PaymentMatchOrderByWithRelationInput[]
    cursor?: PaymentMatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentMatchScalarFieldEnum | PaymentMatchScalarFieldEnum[]
  }

  /**
   * BankTransaction without action
   */
  export type BankTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankTransaction
     */
    select?: BankTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankTransactionInclude<ExtArgs> | null
  }


  /**
   * Model PaymentMatch
   */

  export type AggregatePaymentMatch = {
    _count: PaymentMatchCountAggregateOutputType | null
    _avg: PaymentMatchAvgAggregateOutputType | null
    _sum: PaymentMatchSumAggregateOutputType | null
    _min: PaymentMatchMinAggregateOutputType | null
    _max: PaymentMatchMaxAggregateOutputType | null
  }

  export type PaymentMatchAvgAggregateOutputType = {
    matchedAmount: number | null
    confidenceScore: number | null
  }

  export type PaymentMatchSumAggregateOutputType = {
    matchedAmount: number | null
    confidenceScore: number | null
  }

  export type PaymentMatchMinAggregateOutputType = {
    id: string | null
    bankTransactionId: string | null
    customerId: string | null
    matchedAmount: number | null
    confidenceScore: number | null
    matchMethod: string | null
    isConfirmed: boolean | null
    createdAt: Date | null
  }

  export type PaymentMatchMaxAggregateOutputType = {
    id: string | null
    bankTransactionId: string | null
    customerId: string | null
    matchedAmount: number | null
    confidenceScore: number | null
    matchMethod: string | null
    isConfirmed: boolean | null
    createdAt: Date | null
  }

  export type PaymentMatchCountAggregateOutputType = {
    id: number
    bankTransactionId: number
    customerId: number
    matchedAmount: number
    confidenceScore: number
    matchMethod: number
    isConfirmed: number
    createdAt: number
    _all: number
  }


  export type PaymentMatchAvgAggregateInputType = {
    matchedAmount?: true
    confidenceScore?: true
  }

  export type PaymentMatchSumAggregateInputType = {
    matchedAmount?: true
    confidenceScore?: true
  }

  export type PaymentMatchMinAggregateInputType = {
    id?: true
    bankTransactionId?: true
    customerId?: true
    matchedAmount?: true
    confidenceScore?: true
    matchMethod?: true
    isConfirmed?: true
    createdAt?: true
  }

  export type PaymentMatchMaxAggregateInputType = {
    id?: true
    bankTransactionId?: true
    customerId?: true
    matchedAmount?: true
    confidenceScore?: true
    matchMethod?: true
    isConfirmed?: true
    createdAt?: true
  }

  export type PaymentMatchCountAggregateInputType = {
    id?: true
    bankTransactionId?: true
    customerId?: true
    matchedAmount?: true
    confidenceScore?: true
    matchMethod?: true
    isConfirmed?: true
    createdAt?: true
    _all?: true
  }

  export type PaymentMatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentMatch to aggregate.
     */
    where?: PaymentMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMatches to fetch.
     */
    orderBy?: PaymentMatchOrderByWithRelationInput | PaymentMatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentMatches
    **/
    _count?: true | PaymentMatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentMatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentMatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMatchMaxAggregateInputType
  }

  export type GetPaymentMatchAggregateType<T extends PaymentMatchAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentMatch[P]>
      : GetScalarType<T[P], AggregatePaymentMatch[P]>
  }




  export type PaymentMatchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentMatchWhereInput
    orderBy?: PaymentMatchOrderByWithAggregationInput | PaymentMatchOrderByWithAggregationInput[]
    by: PaymentMatchScalarFieldEnum[] | PaymentMatchScalarFieldEnum
    having?: PaymentMatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentMatchCountAggregateInputType | true
    _avg?: PaymentMatchAvgAggregateInputType
    _sum?: PaymentMatchSumAggregateInputType
    _min?: PaymentMatchMinAggregateInputType
    _max?: PaymentMatchMaxAggregateInputType
  }

  export type PaymentMatchGroupByOutputType = {
    id: string
    bankTransactionId: string
    customerId: string
    matchedAmount: number
    confidenceScore: number
    matchMethod: string
    isConfirmed: boolean
    createdAt: Date
    _count: PaymentMatchCountAggregateOutputType | null
    _avg: PaymentMatchAvgAggregateOutputType | null
    _sum: PaymentMatchSumAggregateOutputType | null
    _min: PaymentMatchMinAggregateOutputType | null
    _max: PaymentMatchMaxAggregateOutputType | null
  }

  type GetPaymentMatchGroupByPayload<T extends PaymentMatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentMatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentMatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentMatchGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentMatchGroupByOutputType[P]>
        }
      >
    >


  export type PaymentMatchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bankTransactionId?: boolean
    customerId?: boolean
    matchedAmount?: boolean
    confidenceScore?: boolean
    matchMethod?: boolean
    isConfirmed?: boolean
    createdAt?: boolean
    bankTransaction?: boolean | BankTransactionDefaultArgs<ExtArgs>
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentMatch"]>

  export type PaymentMatchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bankTransactionId?: boolean
    customerId?: boolean
    matchedAmount?: boolean
    confidenceScore?: boolean
    matchMethod?: boolean
    isConfirmed?: boolean
    createdAt?: boolean
    bankTransaction?: boolean | BankTransactionDefaultArgs<ExtArgs>
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentMatch"]>

  export type PaymentMatchSelectScalar = {
    id?: boolean
    bankTransactionId?: boolean
    customerId?: boolean
    matchedAmount?: boolean
    confidenceScore?: boolean
    matchMethod?: boolean
    isConfirmed?: boolean
    createdAt?: boolean
  }

  export type PaymentMatchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bankTransaction?: boolean | BankTransactionDefaultArgs<ExtArgs>
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type PaymentMatchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bankTransaction?: boolean | BankTransactionDefaultArgs<ExtArgs>
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }

  export type $PaymentMatchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentMatch"
    objects: {
      bankTransaction: Prisma.$BankTransactionPayload<ExtArgs>
      customer: Prisma.$CustomerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      bankTransactionId: string
      customerId: string
      matchedAmount: number
      confidenceScore: number
      matchMethod: string
      isConfirmed: boolean
      createdAt: Date
    }, ExtArgs["result"]["paymentMatch"]>
    composites: {}
  }

  type PaymentMatchGetPayload<S extends boolean | null | undefined | PaymentMatchDefaultArgs> = $Result.GetResult<Prisma.$PaymentMatchPayload, S>

  type PaymentMatchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaymentMatchFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaymentMatchCountAggregateInputType | true
    }

  export interface PaymentMatchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentMatch'], meta: { name: 'PaymentMatch' } }
    /**
     * Find zero or one PaymentMatch that matches the filter.
     * @param {PaymentMatchFindUniqueArgs} args - Arguments to find a PaymentMatch
     * @example
     * // Get one PaymentMatch
     * const paymentMatch = await prisma.paymentMatch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentMatchFindUniqueArgs>(args: SelectSubset<T, PaymentMatchFindUniqueArgs<ExtArgs>>): Prisma__PaymentMatchClient<$Result.GetResult<Prisma.$PaymentMatchPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PaymentMatch that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PaymentMatchFindUniqueOrThrowArgs} args - Arguments to find a PaymentMatch
     * @example
     * // Get one PaymentMatch
     * const paymentMatch = await prisma.paymentMatch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentMatchFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentMatchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentMatchClient<$Result.GetResult<Prisma.$PaymentMatchPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PaymentMatch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMatchFindFirstArgs} args - Arguments to find a PaymentMatch
     * @example
     * // Get one PaymentMatch
     * const paymentMatch = await prisma.paymentMatch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentMatchFindFirstArgs>(args?: SelectSubset<T, PaymentMatchFindFirstArgs<ExtArgs>>): Prisma__PaymentMatchClient<$Result.GetResult<Prisma.$PaymentMatchPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PaymentMatch that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMatchFindFirstOrThrowArgs} args - Arguments to find a PaymentMatch
     * @example
     * // Get one PaymentMatch
     * const paymentMatch = await prisma.paymentMatch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentMatchFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentMatchFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentMatchClient<$Result.GetResult<Prisma.$PaymentMatchPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PaymentMatches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMatchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentMatches
     * const paymentMatches = await prisma.paymentMatch.findMany()
     * 
     * // Get first 10 PaymentMatches
     * const paymentMatches = await prisma.paymentMatch.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentMatchWithIdOnly = await prisma.paymentMatch.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentMatchFindManyArgs>(args?: SelectSubset<T, PaymentMatchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentMatchPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PaymentMatch.
     * @param {PaymentMatchCreateArgs} args - Arguments to create a PaymentMatch.
     * @example
     * // Create one PaymentMatch
     * const PaymentMatch = await prisma.paymentMatch.create({
     *   data: {
     *     // ... data to create a PaymentMatch
     *   }
     * })
     * 
     */
    create<T extends PaymentMatchCreateArgs>(args: SelectSubset<T, PaymentMatchCreateArgs<ExtArgs>>): Prisma__PaymentMatchClient<$Result.GetResult<Prisma.$PaymentMatchPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PaymentMatches.
     * @param {PaymentMatchCreateManyArgs} args - Arguments to create many PaymentMatches.
     * @example
     * // Create many PaymentMatches
     * const paymentMatch = await prisma.paymentMatch.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentMatchCreateManyArgs>(args?: SelectSubset<T, PaymentMatchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PaymentMatches and returns the data saved in the database.
     * @param {PaymentMatchCreateManyAndReturnArgs} args - Arguments to create many PaymentMatches.
     * @example
     * // Create many PaymentMatches
     * const paymentMatch = await prisma.paymentMatch.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PaymentMatches and only return the `id`
     * const paymentMatchWithIdOnly = await prisma.paymentMatch.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentMatchCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentMatchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentMatchPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PaymentMatch.
     * @param {PaymentMatchDeleteArgs} args - Arguments to delete one PaymentMatch.
     * @example
     * // Delete one PaymentMatch
     * const PaymentMatch = await prisma.paymentMatch.delete({
     *   where: {
     *     // ... filter to delete one PaymentMatch
     *   }
     * })
     * 
     */
    delete<T extends PaymentMatchDeleteArgs>(args: SelectSubset<T, PaymentMatchDeleteArgs<ExtArgs>>): Prisma__PaymentMatchClient<$Result.GetResult<Prisma.$PaymentMatchPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PaymentMatch.
     * @param {PaymentMatchUpdateArgs} args - Arguments to update one PaymentMatch.
     * @example
     * // Update one PaymentMatch
     * const paymentMatch = await prisma.paymentMatch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentMatchUpdateArgs>(args: SelectSubset<T, PaymentMatchUpdateArgs<ExtArgs>>): Prisma__PaymentMatchClient<$Result.GetResult<Prisma.$PaymentMatchPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PaymentMatches.
     * @param {PaymentMatchDeleteManyArgs} args - Arguments to filter PaymentMatches to delete.
     * @example
     * // Delete a few PaymentMatches
     * const { count } = await prisma.paymentMatch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentMatchDeleteManyArgs>(args?: SelectSubset<T, PaymentMatchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentMatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentMatches
     * const paymentMatch = await prisma.paymentMatch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentMatchUpdateManyArgs>(args: SelectSubset<T, PaymentMatchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PaymentMatch.
     * @param {PaymentMatchUpsertArgs} args - Arguments to update or create a PaymentMatch.
     * @example
     * // Update or create a PaymentMatch
     * const paymentMatch = await prisma.paymentMatch.upsert({
     *   create: {
     *     // ... data to create a PaymentMatch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentMatch we want to update
     *   }
     * })
     */
    upsert<T extends PaymentMatchUpsertArgs>(args: SelectSubset<T, PaymentMatchUpsertArgs<ExtArgs>>): Prisma__PaymentMatchClient<$Result.GetResult<Prisma.$PaymentMatchPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PaymentMatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMatchCountArgs} args - Arguments to filter PaymentMatches to count.
     * @example
     * // Count the number of PaymentMatches
     * const count = await prisma.paymentMatch.count({
     *   where: {
     *     // ... the filter for the PaymentMatches we want to count
     *   }
     * })
    **/
    count<T extends PaymentMatchCountArgs>(
      args?: Subset<T, PaymentMatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentMatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentMatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentMatchAggregateArgs>(args: Subset<T, PaymentMatchAggregateArgs>): Prisma.PrismaPromise<GetPaymentMatchAggregateType<T>>

    /**
     * Group by PaymentMatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentMatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentMatchGroupByArgs['orderBy'] }
        : { orderBy?: PaymentMatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentMatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentMatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentMatch model
   */
  readonly fields: PaymentMatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentMatch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentMatchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bankTransaction<T extends BankTransactionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BankTransactionDefaultArgs<ExtArgs>>): Prisma__BankTransactionClient<$Result.GetResult<Prisma.$BankTransactionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaymentMatch model
   */ 
  interface PaymentMatchFieldRefs {
    readonly id: FieldRef<"PaymentMatch", 'String'>
    readonly bankTransactionId: FieldRef<"PaymentMatch", 'String'>
    readonly customerId: FieldRef<"PaymentMatch", 'String'>
    readonly matchedAmount: FieldRef<"PaymentMatch", 'Float'>
    readonly confidenceScore: FieldRef<"PaymentMatch", 'Float'>
    readonly matchMethod: FieldRef<"PaymentMatch", 'String'>
    readonly isConfirmed: FieldRef<"PaymentMatch", 'Boolean'>
    readonly createdAt: FieldRef<"PaymentMatch", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PaymentMatch findUnique
   */
  export type PaymentMatchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMatch
     */
    select?: PaymentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMatchInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMatch to fetch.
     */
    where: PaymentMatchWhereUniqueInput
  }

  /**
   * PaymentMatch findUniqueOrThrow
   */
  export type PaymentMatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMatch
     */
    select?: PaymentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMatchInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMatch to fetch.
     */
    where: PaymentMatchWhereUniqueInput
  }

  /**
   * PaymentMatch findFirst
   */
  export type PaymentMatchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMatch
     */
    select?: PaymentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMatchInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMatch to fetch.
     */
    where?: PaymentMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMatches to fetch.
     */
    orderBy?: PaymentMatchOrderByWithRelationInput | PaymentMatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentMatches.
     */
    cursor?: PaymentMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentMatches.
     */
    distinct?: PaymentMatchScalarFieldEnum | PaymentMatchScalarFieldEnum[]
  }

  /**
   * PaymentMatch findFirstOrThrow
   */
  export type PaymentMatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMatch
     */
    select?: PaymentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMatchInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMatch to fetch.
     */
    where?: PaymentMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMatches to fetch.
     */
    orderBy?: PaymentMatchOrderByWithRelationInput | PaymentMatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentMatches.
     */
    cursor?: PaymentMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentMatches.
     */
    distinct?: PaymentMatchScalarFieldEnum | PaymentMatchScalarFieldEnum[]
  }

  /**
   * PaymentMatch findMany
   */
  export type PaymentMatchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMatch
     */
    select?: PaymentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMatchInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMatches to fetch.
     */
    where?: PaymentMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMatches to fetch.
     */
    orderBy?: PaymentMatchOrderByWithRelationInput | PaymentMatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentMatches.
     */
    cursor?: PaymentMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMatches.
     */
    skip?: number
    distinct?: PaymentMatchScalarFieldEnum | PaymentMatchScalarFieldEnum[]
  }

  /**
   * PaymentMatch create
   */
  export type PaymentMatchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMatch
     */
    select?: PaymentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMatchInclude<ExtArgs> | null
    /**
     * The data needed to create a PaymentMatch.
     */
    data: XOR<PaymentMatchCreateInput, PaymentMatchUncheckedCreateInput>
  }

  /**
   * PaymentMatch createMany
   */
  export type PaymentMatchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentMatches.
     */
    data: PaymentMatchCreateManyInput | PaymentMatchCreateManyInput[]
  }

  /**
   * PaymentMatch createManyAndReturn
   */
  export type PaymentMatchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMatch
     */
    select?: PaymentMatchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PaymentMatches.
     */
    data: PaymentMatchCreateManyInput | PaymentMatchCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMatchIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaymentMatch update
   */
  export type PaymentMatchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMatch
     */
    select?: PaymentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMatchInclude<ExtArgs> | null
    /**
     * The data needed to update a PaymentMatch.
     */
    data: XOR<PaymentMatchUpdateInput, PaymentMatchUncheckedUpdateInput>
    /**
     * Choose, which PaymentMatch to update.
     */
    where: PaymentMatchWhereUniqueInput
  }

  /**
   * PaymentMatch updateMany
   */
  export type PaymentMatchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentMatches.
     */
    data: XOR<PaymentMatchUpdateManyMutationInput, PaymentMatchUncheckedUpdateManyInput>
    /**
     * Filter which PaymentMatches to update
     */
    where?: PaymentMatchWhereInput
  }

  /**
   * PaymentMatch upsert
   */
  export type PaymentMatchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMatch
     */
    select?: PaymentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMatchInclude<ExtArgs> | null
    /**
     * The filter to search for the PaymentMatch to update in case it exists.
     */
    where: PaymentMatchWhereUniqueInput
    /**
     * In case the PaymentMatch found by the `where` argument doesn't exist, create a new PaymentMatch with this data.
     */
    create: XOR<PaymentMatchCreateInput, PaymentMatchUncheckedCreateInput>
    /**
     * In case the PaymentMatch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentMatchUpdateInput, PaymentMatchUncheckedUpdateInput>
  }

  /**
   * PaymentMatch delete
   */
  export type PaymentMatchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMatch
     */
    select?: PaymentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMatchInclude<ExtArgs> | null
    /**
     * Filter which PaymentMatch to delete.
     */
    where: PaymentMatchWhereUniqueInput
  }

  /**
   * PaymentMatch deleteMany
   */
  export type PaymentMatchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentMatches to delete
     */
    where?: PaymentMatchWhereInput
  }

  /**
   * PaymentMatch without action
   */
  export type PaymentMatchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMatch
     */
    select?: PaymentMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMatchInclude<ExtArgs> | null
  }


  /**
   * Model CashFlow
   */

  export type AggregateCashFlow = {
    _count: CashFlowCountAggregateOutputType | null
    _avg: CashFlowAvgAggregateOutputType | null
    _sum: CashFlowSumAggregateOutputType | null
    _min: CashFlowMinAggregateOutputType | null
    _max: CashFlowMaxAggregateOutputType | null
  }

  export type CashFlowAvgAggregateOutputType = {
    openingBalance: number | null
    closingBalance: number | null
    totalIncome: number | null
    totalExpense: number | null
    difference: number | null
  }

  export type CashFlowSumAggregateOutputType = {
    openingBalance: number | null
    closingBalance: number | null
    totalIncome: number | null
    totalExpense: number | null
    difference: number | null
  }

  export type CashFlowMinAggregateOutputType = {
    id: string | null
    date: Date | null
    openingBalance: number | null
    closingBalance: number | null
    totalIncome: number | null
    totalExpense: number | null
    difference: number | null
    notes: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type CashFlowMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    openingBalance: number | null
    closingBalance: number | null
    totalIncome: number | null
    totalExpense: number | null
    difference: number | null
    notes: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type CashFlowCountAggregateOutputType = {
    id: number
    date: number
    openingBalance: number
    closingBalance: number
    totalIncome: number
    totalExpense: number
    difference: number
    notes: number
    userId: number
    createdAt: number
    _all: number
  }


  export type CashFlowAvgAggregateInputType = {
    openingBalance?: true
    closingBalance?: true
    totalIncome?: true
    totalExpense?: true
    difference?: true
  }

  export type CashFlowSumAggregateInputType = {
    openingBalance?: true
    closingBalance?: true
    totalIncome?: true
    totalExpense?: true
    difference?: true
  }

  export type CashFlowMinAggregateInputType = {
    id?: true
    date?: true
    openingBalance?: true
    closingBalance?: true
    totalIncome?: true
    totalExpense?: true
    difference?: true
    notes?: true
    userId?: true
    createdAt?: true
  }

  export type CashFlowMaxAggregateInputType = {
    id?: true
    date?: true
    openingBalance?: true
    closingBalance?: true
    totalIncome?: true
    totalExpense?: true
    difference?: true
    notes?: true
    userId?: true
    createdAt?: true
  }

  export type CashFlowCountAggregateInputType = {
    id?: true
    date?: true
    openingBalance?: true
    closingBalance?: true
    totalIncome?: true
    totalExpense?: true
    difference?: true
    notes?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type CashFlowAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CashFlow to aggregate.
     */
    where?: CashFlowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashFlows to fetch.
     */
    orderBy?: CashFlowOrderByWithRelationInput | CashFlowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CashFlowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashFlows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashFlows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CashFlows
    **/
    _count?: true | CashFlowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CashFlowAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CashFlowSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CashFlowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CashFlowMaxAggregateInputType
  }

  export type GetCashFlowAggregateType<T extends CashFlowAggregateArgs> = {
        [P in keyof T & keyof AggregateCashFlow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCashFlow[P]>
      : GetScalarType<T[P], AggregateCashFlow[P]>
  }




  export type CashFlowGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CashFlowWhereInput
    orderBy?: CashFlowOrderByWithAggregationInput | CashFlowOrderByWithAggregationInput[]
    by: CashFlowScalarFieldEnum[] | CashFlowScalarFieldEnum
    having?: CashFlowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CashFlowCountAggregateInputType | true
    _avg?: CashFlowAvgAggregateInputType
    _sum?: CashFlowSumAggregateInputType
    _min?: CashFlowMinAggregateInputType
    _max?: CashFlowMaxAggregateInputType
  }

  export type CashFlowGroupByOutputType = {
    id: string
    date: Date
    openingBalance: number
    closingBalance: number
    totalIncome: number
    totalExpense: number
    difference: number
    notes: string | null
    userId: string
    createdAt: Date
    _count: CashFlowCountAggregateOutputType | null
    _avg: CashFlowAvgAggregateOutputType | null
    _sum: CashFlowSumAggregateOutputType | null
    _min: CashFlowMinAggregateOutputType | null
    _max: CashFlowMaxAggregateOutputType | null
  }

  type GetCashFlowGroupByPayload<T extends CashFlowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CashFlowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CashFlowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CashFlowGroupByOutputType[P]>
            : GetScalarType<T[P], CashFlowGroupByOutputType[P]>
        }
      >
    >


  export type CashFlowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    openingBalance?: boolean
    closingBalance?: boolean
    totalIncome?: boolean
    totalExpense?: boolean
    difference?: boolean
    notes?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cashFlow"]>

  export type CashFlowSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    openingBalance?: boolean
    closingBalance?: boolean
    totalIncome?: boolean
    totalExpense?: boolean
    difference?: boolean
    notes?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cashFlow"]>

  export type CashFlowSelectScalar = {
    id?: boolean
    date?: boolean
    openingBalance?: boolean
    closingBalance?: boolean
    totalIncome?: boolean
    totalExpense?: boolean
    difference?: boolean
    notes?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type CashFlowInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CashFlowIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CashFlowPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CashFlow"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      openingBalance: number
      closingBalance: number
      totalIncome: number
      totalExpense: number
      difference: number
      notes: string | null
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["cashFlow"]>
    composites: {}
  }

  type CashFlowGetPayload<S extends boolean | null | undefined | CashFlowDefaultArgs> = $Result.GetResult<Prisma.$CashFlowPayload, S>

  type CashFlowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CashFlowFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CashFlowCountAggregateInputType | true
    }

  export interface CashFlowDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CashFlow'], meta: { name: 'CashFlow' } }
    /**
     * Find zero or one CashFlow that matches the filter.
     * @param {CashFlowFindUniqueArgs} args - Arguments to find a CashFlow
     * @example
     * // Get one CashFlow
     * const cashFlow = await prisma.cashFlow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CashFlowFindUniqueArgs>(args: SelectSubset<T, CashFlowFindUniqueArgs<ExtArgs>>): Prisma__CashFlowClient<$Result.GetResult<Prisma.$CashFlowPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CashFlow that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CashFlowFindUniqueOrThrowArgs} args - Arguments to find a CashFlow
     * @example
     * // Get one CashFlow
     * const cashFlow = await prisma.cashFlow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CashFlowFindUniqueOrThrowArgs>(args: SelectSubset<T, CashFlowFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CashFlowClient<$Result.GetResult<Prisma.$CashFlowPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CashFlow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashFlowFindFirstArgs} args - Arguments to find a CashFlow
     * @example
     * // Get one CashFlow
     * const cashFlow = await prisma.cashFlow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CashFlowFindFirstArgs>(args?: SelectSubset<T, CashFlowFindFirstArgs<ExtArgs>>): Prisma__CashFlowClient<$Result.GetResult<Prisma.$CashFlowPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CashFlow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashFlowFindFirstOrThrowArgs} args - Arguments to find a CashFlow
     * @example
     * // Get one CashFlow
     * const cashFlow = await prisma.cashFlow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CashFlowFindFirstOrThrowArgs>(args?: SelectSubset<T, CashFlowFindFirstOrThrowArgs<ExtArgs>>): Prisma__CashFlowClient<$Result.GetResult<Prisma.$CashFlowPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CashFlows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashFlowFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CashFlows
     * const cashFlows = await prisma.cashFlow.findMany()
     * 
     * // Get first 10 CashFlows
     * const cashFlows = await prisma.cashFlow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cashFlowWithIdOnly = await prisma.cashFlow.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CashFlowFindManyArgs>(args?: SelectSubset<T, CashFlowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CashFlowPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CashFlow.
     * @param {CashFlowCreateArgs} args - Arguments to create a CashFlow.
     * @example
     * // Create one CashFlow
     * const CashFlow = await prisma.cashFlow.create({
     *   data: {
     *     // ... data to create a CashFlow
     *   }
     * })
     * 
     */
    create<T extends CashFlowCreateArgs>(args: SelectSubset<T, CashFlowCreateArgs<ExtArgs>>): Prisma__CashFlowClient<$Result.GetResult<Prisma.$CashFlowPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CashFlows.
     * @param {CashFlowCreateManyArgs} args - Arguments to create many CashFlows.
     * @example
     * // Create many CashFlows
     * const cashFlow = await prisma.cashFlow.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CashFlowCreateManyArgs>(args?: SelectSubset<T, CashFlowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CashFlows and returns the data saved in the database.
     * @param {CashFlowCreateManyAndReturnArgs} args - Arguments to create many CashFlows.
     * @example
     * // Create many CashFlows
     * const cashFlow = await prisma.cashFlow.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CashFlows and only return the `id`
     * const cashFlowWithIdOnly = await prisma.cashFlow.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CashFlowCreateManyAndReturnArgs>(args?: SelectSubset<T, CashFlowCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CashFlowPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CashFlow.
     * @param {CashFlowDeleteArgs} args - Arguments to delete one CashFlow.
     * @example
     * // Delete one CashFlow
     * const CashFlow = await prisma.cashFlow.delete({
     *   where: {
     *     // ... filter to delete one CashFlow
     *   }
     * })
     * 
     */
    delete<T extends CashFlowDeleteArgs>(args: SelectSubset<T, CashFlowDeleteArgs<ExtArgs>>): Prisma__CashFlowClient<$Result.GetResult<Prisma.$CashFlowPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CashFlow.
     * @param {CashFlowUpdateArgs} args - Arguments to update one CashFlow.
     * @example
     * // Update one CashFlow
     * const cashFlow = await prisma.cashFlow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CashFlowUpdateArgs>(args: SelectSubset<T, CashFlowUpdateArgs<ExtArgs>>): Prisma__CashFlowClient<$Result.GetResult<Prisma.$CashFlowPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CashFlows.
     * @param {CashFlowDeleteManyArgs} args - Arguments to filter CashFlows to delete.
     * @example
     * // Delete a few CashFlows
     * const { count } = await prisma.cashFlow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CashFlowDeleteManyArgs>(args?: SelectSubset<T, CashFlowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CashFlows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashFlowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CashFlows
     * const cashFlow = await prisma.cashFlow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CashFlowUpdateManyArgs>(args: SelectSubset<T, CashFlowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CashFlow.
     * @param {CashFlowUpsertArgs} args - Arguments to update or create a CashFlow.
     * @example
     * // Update or create a CashFlow
     * const cashFlow = await prisma.cashFlow.upsert({
     *   create: {
     *     // ... data to create a CashFlow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CashFlow we want to update
     *   }
     * })
     */
    upsert<T extends CashFlowUpsertArgs>(args: SelectSubset<T, CashFlowUpsertArgs<ExtArgs>>): Prisma__CashFlowClient<$Result.GetResult<Prisma.$CashFlowPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CashFlows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashFlowCountArgs} args - Arguments to filter CashFlows to count.
     * @example
     * // Count the number of CashFlows
     * const count = await prisma.cashFlow.count({
     *   where: {
     *     // ... the filter for the CashFlows we want to count
     *   }
     * })
    **/
    count<T extends CashFlowCountArgs>(
      args?: Subset<T, CashFlowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CashFlowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CashFlow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashFlowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CashFlowAggregateArgs>(args: Subset<T, CashFlowAggregateArgs>): Prisma.PrismaPromise<GetCashFlowAggregateType<T>>

    /**
     * Group by CashFlow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashFlowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CashFlowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CashFlowGroupByArgs['orderBy'] }
        : { orderBy?: CashFlowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CashFlowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCashFlowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CashFlow model
   */
  readonly fields: CashFlowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CashFlow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CashFlowClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CashFlow model
   */ 
  interface CashFlowFieldRefs {
    readonly id: FieldRef<"CashFlow", 'String'>
    readonly date: FieldRef<"CashFlow", 'DateTime'>
    readonly openingBalance: FieldRef<"CashFlow", 'Float'>
    readonly closingBalance: FieldRef<"CashFlow", 'Float'>
    readonly totalIncome: FieldRef<"CashFlow", 'Float'>
    readonly totalExpense: FieldRef<"CashFlow", 'Float'>
    readonly difference: FieldRef<"CashFlow", 'Float'>
    readonly notes: FieldRef<"CashFlow", 'String'>
    readonly userId: FieldRef<"CashFlow", 'String'>
    readonly createdAt: FieldRef<"CashFlow", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CashFlow findUnique
   */
  export type CashFlowFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowInclude<ExtArgs> | null
    /**
     * Filter, which CashFlow to fetch.
     */
    where: CashFlowWhereUniqueInput
  }

  /**
   * CashFlow findUniqueOrThrow
   */
  export type CashFlowFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowInclude<ExtArgs> | null
    /**
     * Filter, which CashFlow to fetch.
     */
    where: CashFlowWhereUniqueInput
  }

  /**
   * CashFlow findFirst
   */
  export type CashFlowFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowInclude<ExtArgs> | null
    /**
     * Filter, which CashFlow to fetch.
     */
    where?: CashFlowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashFlows to fetch.
     */
    orderBy?: CashFlowOrderByWithRelationInput | CashFlowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CashFlows.
     */
    cursor?: CashFlowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashFlows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashFlows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CashFlows.
     */
    distinct?: CashFlowScalarFieldEnum | CashFlowScalarFieldEnum[]
  }

  /**
   * CashFlow findFirstOrThrow
   */
  export type CashFlowFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowInclude<ExtArgs> | null
    /**
     * Filter, which CashFlow to fetch.
     */
    where?: CashFlowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashFlows to fetch.
     */
    orderBy?: CashFlowOrderByWithRelationInput | CashFlowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CashFlows.
     */
    cursor?: CashFlowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashFlows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashFlows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CashFlows.
     */
    distinct?: CashFlowScalarFieldEnum | CashFlowScalarFieldEnum[]
  }

  /**
   * CashFlow findMany
   */
  export type CashFlowFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowInclude<ExtArgs> | null
    /**
     * Filter, which CashFlows to fetch.
     */
    where?: CashFlowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashFlows to fetch.
     */
    orderBy?: CashFlowOrderByWithRelationInput | CashFlowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CashFlows.
     */
    cursor?: CashFlowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashFlows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashFlows.
     */
    skip?: number
    distinct?: CashFlowScalarFieldEnum | CashFlowScalarFieldEnum[]
  }

  /**
   * CashFlow create
   */
  export type CashFlowCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowInclude<ExtArgs> | null
    /**
     * The data needed to create a CashFlow.
     */
    data: XOR<CashFlowCreateInput, CashFlowUncheckedCreateInput>
  }

  /**
   * CashFlow createMany
   */
  export type CashFlowCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CashFlows.
     */
    data: CashFlowCreateManyInput | CashFlowCreateManyInput[]
  }

  /**
   * CashFlow createManyAndReturn
   */
  export type CashFlowCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CashFlows.
     */
    data: CashFlowCreateManyInput | CashFlowCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CashFlow update
   */
  export type CashFlowUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowInclude<ExtArgs> | null
    /**
     * The data needed to update a CashFlow.
     */
    data: XOR<CashFlowUpdateInput, CashFlowUncheckedUpdateInput>
    /**
     * Choose, which CashFlow to update.
     */
    where: CashFlowWhereUniqueInput
  }

  /**
   * CashFlow updateMany
   */
  export type CashFlowUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CashFlows.
     */
    data: XOR<CashFlowUpdateManyMutationInput, CashFlowUncheckedUpdateManyInput>
    /**
     * Filter which CashFlows to update
     */
    where?: CashFlowWhereInput
  }

  /**
   * CashFlow upsert
   */
  export type CashFlowUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowInclude<ExtArgs> | null
    /**
     * The filter to search for the CashFlow to update in case it exists.
     */
    where: CashFlowWhereUniqueInput
    /**
     * In case the CashFlow found by the `where` argument doesn't exist, create a new CashFlow with this data.
     */
    create: XOR<CashFlowCreateInput, CashFlowUncheckedCreateInput>
    /**
     * In case the CashFlow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CashFlowUpdateInput, CashFlowUncheckedUpdateInput>
  }

  /**
   * CashFlow delete
   */
  export type CashFlowDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowInclude<ExtArgs> | null
    /**
     * Filter which CashFlow to delete.
     */
    where: CashFlowWhereUniqueInput
  }

  /**
   * CashFlow deleteMany
   */
  export type CashFlowDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CashFlows to delete
     */
    where?: CashFlowWhereInput
  }

  /**
   * CashFlow without action
   */
  export type CashFlowDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowInclude<ExtArgs> | null
  }


  /**
   * Model ReportCache
   */

  export type AggregateReportCache = {
    _count: ReportCacheCountAggregateOutputType | null
    _min: ReportCacheMinAggregateOutputType | null
    _max: ReportCacheMaxAggregateOutputType | null
  }

  export type ReportCacheMinAggregateOutputType = {
    id: string | null
    reportKey: string | null
    data: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type ReportCacheMaxAggregateOutputType = {
    id: string | null
    reportKey: string | null
    data: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type ReportCacheCountAggregateOutputType = {
    id: number
    reportKey: number
    data: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type ReportCacheMinAggregateInputType = {
    id?: true
    reportKey?: true
    data?: true
    expiresAt?: true
    createdAt?: true
  }

  export type ReportCacheMaxAggregateInputType = {
    id?: true
    reportKey?: true
    data?: true
    expiresAt?: true
    createdAt?: true
  }

  export type ReportCacheCountAggregateInputType = {
    id?: true
    reportKey?: true
    data?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type ReportCacheAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportCache to aggregate.
     */
    where?: ReportCacheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportCaches to fetch.
     */
    orderBy?: ReportCacheOrderByWithRelationInput | ReportCacheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportCacheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportCaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportCaches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReportCaches
    **/
    _count?: true | ReportCacheCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportCacheMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportCacheMaxAggregateInputType
  }

  export type GetReportCacheAggregateType<T extends ReportCacheAggregateArgs> = {
        [P in keyof T & keyof AggregateReportCache]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReportCache[P]>
      : GetScalarType<T[P], AggregateReportCache[P]>
  }




  export type ReportCacheGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportCacheWhereInput
    orderBy?: ReportCacheOrderByWithAggregationInput | ReportCacheOrderByWithAggregationInput[]
    by: ReportCacheScalarFieldEnum[] | ReportCacheScalarFieldEnum
    having?: ReportCacheScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportCacheCountAggregateInputType | true
    _min?: ReportCacheMinAggregateInputType
    _max?: ReportCacheMaxAggregateInputType
  }

  export type ReportCacheGroupByOutputType = {
    id: string
    reportKey: string
    data: string
    expiresAt: Date
    createdAt: Date
    _count: ReportCacheCountAggregateOutputType | null
    _min: ReportCacheMinAggregateOutputType | null
    _max: ReportCacheMaxAggregateOutputType | null
  }

  type GetReportCacheGroupByPayload<T extends ReportCacheGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportCacheGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportCacheGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportCacheGroupByOutputType[P]>
            : GetScalarType<T[P], ReportCacheGroupByOutputType[P]>
        }
      >
    >


  export type ReportCacheSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportKey?: boolean
    data?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["reportCache"]>

  export type ReportCacheSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportKey?: boolean
    data?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["reportCache"]>

  export type ReportCacheSelectScalar = {
    id?: boolean
    reportKey?: boolean
    data?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }


  export type $ReportCachePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReportCache"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      reportKey: string
      data: string
      expiresAt: Date
      createdAt: Date
    }, ExtArgs["result"]["reportCache"]>
    composites: {}
  }

  type ReportCacheGetPayload<S extends boolean | null | undefined | ReportCacheDefaultArgs> = $Result.GetResult<Prisma.$ReportCachePayload, S>

  type ReportCacheCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReportCacheFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReportCacheCountAggregateInputType | true
    }

  export interface ReportCacheDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReportCache'], meta: { name: 'ReportCache' } }
    /**
     * Find zero or one ReportCache that matches the filter.
     * @param {ReportCacheFindUniqueArgs} args - Arguments to find a ReportCache
     * @example
     * // Get one ReportCache
     * const reportCache = await prisma.reportCache.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportCacheFindUniqueArgs>(args: SelectSubset<T, ReportCacheFindUniqueArgs<ExtArgs>>): Prisma__ReportCacheClient<$Result.GetResult<Prisma.$ReportCachePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ReportCache that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReportCacheFindUniqueOrThrowArgs} args - Arguments to find a ReportCache
     * @example
     * // Get one ReportCache
     * const reportCache = await prisma.reportCache.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportCacheFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportCacheFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportCacheClient<$Result.GetResult<Prisma.$ReportCachePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ReportCache that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCacheFindFirstArgs} args - Arguments to find a ReportCache
     * @example
     * // Get one ReportCache
     * const reportCache = await prisma.reportCache.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportCacheFindFirstArgs>(args?: SelectSubset<T, ReportCacheFindFirstArgs<ExtArgs>>): Prisma__ReportCacheClient<$Result.GetResult<Prisma.$ReportCachePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ReportCache that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCacheFindFirstOrThrowArgs} args - Arguments to find a ReportCache
     * @example
     * // Get one ReportCache
     * const reportCache = await prisma.reportCache.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportCacheFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportCacheFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportCacheClient<$Result.GetResult<Prisma.$ReportCachePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ReportCaches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCacheFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReportCaches
     * const reportCaches = await prisma.reportCache.findMany()
     * 
     * // Get first 10 ReportCaches
     * const reportCaches = await prisma.reportCache.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportCacheWithIdOnly = await prisma.reportCache.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportCacheFindManyArgs>(args?: SelectSubset<T, ReportCacheFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportCachePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ReportCache.
     * @param {ReportCacheCreateArgs} args - Arguments to create a ReportCache.
     * @example
     * // Create one ReportCache
     * const ReportCache = await prisma.reportCache.create({
     *   data: {
     *     // ... data to create a ReportCache
     *   }
     * })
     * 
     */
    create<T extends ReportCacheCreateArgs>(args: SelectSubset<T, ReportCacheCreateArgs<ExtArgs>>): Prisma__ReportCacheClient<$Result.GetResult<Prisma.$ReportCachePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ReportCaches.
     * @param {ReportCacheCreateManyArgs} args - Arguments to create many ReportCaches.
     * @example
     * // Create many ReportCaches
     * const reportCache = await prisma.reportCache.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportCacheCreateManyArgs>(args?: SelectSubset<T, ReportCacheCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReportCaches and returns the data saved in the database.
     * @param {ReportCacheCreateManyAndReturnArgs} args - Arguments to create many ReportCaches.
     * @example
     * // Create many ReportCaches
     * const reportCache = await prisma.reportCache.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReportCaches and only return the `id`
     * const reportCacheWithIdOnly = await prisma.reportCache.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportCacheCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportCacheCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportCachePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ReportCache.
     * @param {ReportCacheDeleteArgs} args - Arguments to delete one ReportCache.
     * @example
     * // Delete one ReportCache
     * const ReportCache = await prisma.reportCache.delete({
     *   where: {
     *     // ... filter to delete one ReportCache
     *   }
     * })
     * 
     */
    delete<T extends ReportCacheDeleteArgs>(args: SelectSubset<T, ReportCacheDeleteArgs<ExtArgs>>): Prisma__ReportCacheClient<$Result.GetResult<Prisma.$ReportCachePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ReportCache.
     * @param {ReportCacheUpdateArgs} args - Arguments to update one ReportCache.
     * @example
     * // Update one ReportCache
     * const reportCache = await prisma.reportCache.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportCacheUpdateArgs>(args: SelectSubset<T, ReportCacheUpdateArgs<ExtArgs>>): Prisma__ReportCacheClient<$Result.GetResult<Prisma.$ReportCachePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ReportCaches.
     * @param {ReportCacheDeleteManyArgs} args - Arguments to filter ReportCaches to delete.
     * @example
     * // Delete a few ReportCaches
     * const { count } = await prisma.reportCache.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportCacheDeleteManyArgs>(args?: SelectSubset<T, ReportCacheDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportCaches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCacheUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReportCaches
     * const reportCache = await prisma.reportCache.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportCacheUpdateManyArgs>(args: SelectSubset<T, ReportCacheUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ReportCache.
     * @param {ReportCacheUpsertArgs} args - Arguments to update or create a ReportCache.
     * @example
     * // Update or create a ReportCache
     * const reportCache = await prisma.reportCache.upsert({
     *   create: {
     *     // ... data to create a ReportCache
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReportCache we want to update
     *   }
     * })
     */
    upsert<T extends ReportCacheUpsertArgs>(args: SelectSubset<T, ReportCacheUpsertArgs<ExtArgs>>): Prisma__ReportCacheClient<$Result.GetResult<Prisma.$ReportCachePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ReportCaches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCacheCountArgs} args - Arguments to filter ReportCaches to count.
     * @example
     * // Count the number of ReportCaches
     * const count = await prisma.reportCache.count({
     *   where: {
     *     // ... the filter for the ReportCaches we want to count
     *   }
     * })
    **/
    count<T extends ReportCacheCountArgs>(
      args?: Subset<T, ReportCacheCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportCacheCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReportCache.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCacheAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportCacheAggregateArgs>(args: Subset<T, ReportCacheAggregateArgs>): Prisma.PrismaPromise<GetReportCacheAggregateType<T>>

    /**
     * Group by ReportCache.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCacheGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportCacheGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportCacheGroupByArgs['orderBy'] }
        : { orderBy?: ReportCacheGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportCacheGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportCacheGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReportCache model
   */
  readonly fields: ReportCacheFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReportCache.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportCacheClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReportCache model
   */ 
  interface ReportCacheFieldRefs {
    readonly id: FieldRef<"ReportCache", 'String'>
    readonly reportKey: FieldRef<"ReportCache", 'String'>
    readonly data: FieldRef<"ReportCache", 'String'>
    readonly expiresAt: FieldRef<"ReportCache", 'DateTime'>
    readonly createdAt: FieldRef<"ReportCache", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReportCache findUnique
   */
  export type ReportCacheFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCache
     */
    select?: ReportCacheSelect<ExtArgs> | null
    /**
     * Filter, which ReportCache to fetch.
     */
    where: ReportCacheWhereUniqueInput
  }

  /**
   * ReportCache findUniqueOrThrow
   */
  export type ReportCacheFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCache
     */
    select?: ReportCacheSelect<ExtArgs> | null
    /**
     * Filter, which ReportCache to fetch.
     */
    where: ReportCacheWhereUniqueInput
  }

  /**
   * ReportCache findFirst
   */
  export type ReportCacheFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCache
     */
    select?: ReportCacheSelect<ExtArgs> | null
    /**
     * Filter, which ReportCache to fetch.
     */
    where?: ReportCacheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportCaches to fetch.
     */
    orderBy?: ReportCacheOrderByWithRelationInput | ReportCacheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportCaches.
     */
    cursor?: ReportCacheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportCaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportCaches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportCaches.
     */
    distinct?: ReportCacheScalarFieldEnum | ReportCacheScalarFieldEnum[]
  }

  /**
   * ReportCache findFirstOrThrow
   */
  export type ReportCacheFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCache
     */
    select?: ReportCacheSelect<ExtArgs> | null
    /**
     * Filter, which ReportCache to fetch.
     */
    where?: ReportCacheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportCaches to fetch.
     */
    orderBy?: ReportCacheOrderByWithRelationInput | ReportCacheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportCaches.
     */
    cursor?: ReportCacheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportCaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportCaches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportCaches.
     */
    distinct?: ReportCacheScalarFieldEnum | ReportCacheScalarFieldEnum[]
  }

  /**
   * ReportCache findMany
   */
  export type ReportCacheFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCache
     */
    select?: ReportCacheSelect<ExtArgs> | null
    /**
     * Filter, which ReportCaches to fetch.
     */
    where?: ReportCacheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportCaches to fetch.
     */
    orderBy?: ReportCacheOrderByWithRelationInput | ReportCacheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReportCaches.
     */
    cursor?: ReportCacheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportCaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportCaches.
     */
    skip?: number
    distinct?: ReportCacheScalarFieldEnum | ReportCacheScalarFieldEnum[]
  }

  /**
   * ReportCache create
   */
  export type ReportCacheCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCache
     */
    select?: ReportCacheSelect<ExtArgs> | null
    /**
     * The data needed to create a ReportCache.
     */
    data: XOR<ReportCacheCreateInput, ReportCacheUncheckedCreateInput>
  }

  /**
   * ReportCache createMany
   */
  export type ReportCacheCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReportCaches.
     */
    data: ReportCacheCreateManyInput | ReportCacheCreateManyInput[]
  }

  /**
   * ReportCache createManyAndReturn
   */
  export type ReportCacheCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCache
     */
    select?: ReportCacheSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ReportCaches.
     */
    data: ReportCacheCreateManyInput | ReportCacheCreateManyInput[]
  }

  /**
   * ReportCache update
   */
  export type ReportCacheUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCache
     */
    select?: ReportCacheSelect<ExtArgs> | null
    /**
     * The data needed to update a ReportCache.
     */
    data: XOR<ReportCacheUpdateInput, ReportCacheUncheckedUpdateInput>
    /**
     * Choose, which ReportCache to update.
     */
    where: ReportCacheWhereUniqueInput
  }

  /**
   * ReportCache updateMany
   */
  export type ReportCacheUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReportCaches.
     */
    data: XOR<ReportCacheUpdateManyMutationInput, ReportCacheUncheckedUpdateManyInput>
    /**
     * Filter which ReportCaches to update
     */
    where?: ReportCacheWhereInput
  }

  /**
   * ReportCache upsert
   */
  export type ReportCacheUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCache
     */
    select?: ReportCacheSelect<ExtArgs> | null
    /**
     * The filter to search for the ReportCache to update in case it exists.
     */
    where: ReportCacheWhereUniqueInput
    /**
     * In case the ReportCache found by the `where` argument doesn't exist, create a new ReportCache with this data.
     */
    create: XOR<ReportCacheCreateInput, ReportCacheUncheckedCreateInput>
    /**
     * In case the ReportCache was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportCacheUpdateInput, ReportCacheUncheckedUpdateInput>
  }

  /**
   * ReportCache delete
   */
  export type ReportCacheDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCache
     */
    select?: ReportCacheSelect<ExtArgs> | null
    /**
     * Filter which ReportCache to delete.
     */
    where: ReportCacheWhereUniqueInput
  }

  /**
   * ReportCache deleteMany
   */
  export type ReportCacheDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportCaches to delete
     */
    where?: ReportCacheWhereInput
  }

  /**
   * ReportCache without action
   */
  export type ReportCacheDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCache
     */
    select?: ReportCacheSelect<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    table: string | null
    recordId: string | null
    oldData: string | null
    newData: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    table: string | null
    recordId: string | null
    oldData: string | null
    newData: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    table: number
    recordId: number
    oldData: number
    newData: number
    ipAddress: number
    userAgent: number
    createdAt: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    table?: true
    recordId?: true
    oldData?: true
    newData?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    table?: true
    recordId?: true
    oldData?: true
    newData?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    table?: true
    recordId?: true
    oldData?: true
    newData?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    userId: string | null
    action: string
    table: string
    recordId: string | null
    oldData: string | null
    newData: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    table?: boolean
    recordId?: boolean
    oldData?: boolean
    newData?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    table?: boolean
    recordId?: boolean
    oldData?: boolean
    newData?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    table?: boolean
    recordId?: boolean
    oldData?: boolean
    newData?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }


  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      action: string
      table: string
      recordId: string | null
      oldData: string | null
      newData: string | null
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */ 
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly table: FieldRef<"AuditLog", 'String'>
    readonly recordId: FieldRef<"AuditLog", 'String'>
    readonly oldData: FieldRef<"AuditLog", 'String'>
    readonly newData: FieldRef<"AuditLog", 'String'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password',
    role: 'role',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    originalName: 'originalName',
    nameVariations: 'nameVariations',
    phone: 'phone',
    address: 'address',
    type: 'type',
    accountType: 'accountType',
    lastPaymentDate: 'lastPaymentDate',
    paymentPattern: 'paymentPattern',
    dueDays: 'dueDays',
    tag1: 'tag1',
    tag2: 'tag2',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    parentId: 'parentId',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    type: 'type',
    amount: 'amount',
    currency: 'currency',
    description: 'description',
    date: 'date',
    categoryId: 'categoryId',
    customerId: 'customerId',
    userId: 'userId',
    sourceFile: 'sourceFile',
    sourceRow: 'sourceRow',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const BalanceScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    totalDebit: 'totalDebit',
    totalCredit: 'totalCredit',
    netBalance: 'netBalance',
    lastUpdated: 'lastUpdated'
  };

  export type BalanceScalarFieldEnum = (typeof BalanceScalarFieldEnum)[keyof typeof BalanceScalarFieldEnum]


  export const ExtractScalarFieldEnum: {
    id: 'id',
    fileName: 'fileName',
    uploadDate: 'uploadDate',
    status: 'status',
    totalRows: 'totalRows',
    processedRows: 'processedRows',
    errorRows: 'errorRows',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ExtractScalarFieldEnum = (typeof ExtractScalarFieldEnum)[keyof typeof ExtractScalarFieldEnum]


  export const ExtractTransactionScalarFieldEnum: {
    id: 'id',
    extractId: 'extractId',
    customerId: 'customerId',
    date: 'date',
    description: 'description',
    debit: 'debit',
    credit: 'credit',
    documentType: 'documentType',
    voucherNo: 'voucherNo',
    dueDate: 'dueDate',
    amountBase: 'amountBase',
    discount: 'discount',
    amountNet: 'amountNet',
    vat: 'vat',
    sourceRow: 'sourceRow',
    createdAt: 'createdAt'
  };

  export type ExtractTransactionScalarFieldEnum = (typeof ExtractTransactionScalarFieldEnum)[keyof typeof ExtractTransactionScalarFieldEnum]


  export const BankTransactionScalarFieldEnum: {
    id: 'id',
    messageId: 'messageId',
    bankCode: 'bankCode',
    direction: 'direction',
    accountIban: 'accountIban',
    maskedAccount: 'maskedAccount',
    transactionDate: 'transactionDate',
    amount: 'amount',
    senderName: 'senderName',
    counterpartyName: 'counterpartyName',
    balanceAfter: 'balanceAfter',
    isMatched: 'isMatched',
    matchedCustomerId: 'matchedCustomerId',
    confidenceScore: 'confidenceScore',
    rawEmailData: 'rawEmailData',
    parsedData: 'parsedData',
    createdAt: 'createdAt',
    processedAt: 'processedAt'
  };

  export type BankTransactionScalarFieldEnum = (typeof BankTransactionScalarFieldEnum)[keyof typeof BankTransactionScalarFieldEnum]


  export const PaymentMatchScalarFieldEnum: {
    id: 'id',
    bankTransactionId: 'bankTransactionId',
    customerId: 'customerId',
    matchedAmount: 'matchedAmount',
    confidenceScore: 'confidenceScore',
    matchMethod: 'matchMethod',
    isConfirmed: 'isConfirmed',
    createdAt: 'createdAt'
  };

  export type PaymentMatchScalarFieldEnum = (typeof PaymentMatchScalarFieldEnum)[keyof typeof PaymentMatchScalarFieldEnum]


  export const CashFlowScalarFieldEnum: {
    id: 'id',
    date: 'date',
    openingBalance: 'openingBalance',
    closingBalance: 'closingBalance',
    totalIncome: 'totalIncome',
    totalExpense: 'totalExpense',
    difference: 'difference',
    notes: 'notes',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type CashFlowScalarFieldEnum = (typeof CashFlowScalarFieldEnum)[keyof typeof CashFlowScalarFieldEnum]


  export const ReportCacheScalarFieldEnum: {
    id: 'id',
    reportKey: 'reportKey',
    data: 'data',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type ReportCacheScalarFieldEnum = (typeof ReportCacheScalarFieldEnum)[keyof typeof ReportCacheScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    table: 'table',
    recordId: 'recordId',
    oldData: 'oldData',
    newData: 'newData',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    transactions?: TransactionListRelationFilter
    categories?: CategoryListRelationFilter
    extracts?: ExtractListRelationFilter
    cashFlows?: CashFlowListRelationFilter
    customers?: CustomerListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    transactions?: TransactionOrderByRelationAggregateInput
    categories?: CategoryOrderByRelationAggregateInput
    extracts?: ExtractOrderByRelationAggregateInput
    cashFlows?: CashFlowOrderByRelationAggregateInput
    customers?: CustomerOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    transactions?: TransactionListRelationFilter
    categories?: CategoryListRelationFilter
    extracts?: ExtractListRelationFilter
    cashFlows?: CashFlowListRelationFilter
    customers?: CustomerListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    id?: StringFilter<"Customer"> | string
    code?: StringFilter<"Customer"> | string
    name?: StringFilter<"Customer"> | string
    originalName?: StringNullableFilter<"Customer"> | string | null
    nameVariations?: StringNullableFilter<"Customer"> | string | null
    phone?: StringNullableFilter<"Customer"> | string | null
    address?: StringNullableFilter<"Customer"> | string | null
    type?: StringFilter<"Customer"> | string
    accountType?: StringNullableFilter<"Customer"> | string | null
    lastPaymentDate?: DateTimeNullableFilter<"Customer"> | Date | string | null
    paymentPattern?: StringNullableFilter<"Customer"> | string | null
    dueDays?: IntNullableFilter<"Customer"> | number | null
    tag1?: StringNullableFilter<"Customer"> | string | null
    tag2?: StringNullableFilter<"Customer"> | string | null
    isActive?: BoolFilter<"Customer"> | boolean
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    userId?: StringFilter<"Customer"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    transactions?: TransactionListRelationFilter
    extractTransactions?: ExtractTransactionListRelationFilter
    bankTransactions?: BankTransactionListRelationFilter
    paymentMatches?: PaymentMatchListRelationFilter
    balance?: XOR<BalanceNullableRelationFilter, BalanceWhereInput> | null
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    originalName?: SortOrderInput | SortOrder
    nameVariations?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    type?: SortOrder
    accountType?: SortOrderInput | SortOrder
    lastPaymentDate?: SortOrderInput | SortOrder
    paymentPattern?: SortOrderInput | SortOrder
    dueDays?: SortOrderInput | SortOrder
    tag1?: SortOrderInput | SortOrder
    tag2?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    transactions?: TransactionOrderByRelationAggregateInput
    extractTransactions?: ExtractTransactionOrderByRelationAggregateInput
    bankTransactions?: BankTransactionOrderByRelationAggregateInput
    paymentMatches?: PaymentMatchOrderByRelationAggregateInput
    balance?: BalanceOrderByWithRelationInput
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    name?: StringFilter<"Customer"> | string
    originalName?: StringNullableFilter<"Customer"> | string | null
    nameVariations?: StringNullableFilter<"Customer"> | string | null
    phone?: StringNullableFilter<"Customer"> | string | null
    address?: StringNullableFilter<"Customer"> | string | null
    type?: StringFilter<"Customer"> | string
    accountType?: StringNullableFilter<"Customer"> | string | null
    lastPaymentDate?: DateTimeNullableFilter<"Customer"> | Date | string | null
    paymentPattern?: StringNullableFilter<"Customer"> | string | null
    dueDays?: IntNullableFilter<"Customer"> | number | null
    tag1?: StringNullableFilter<"Customer"> | string | null
    tag2?: StringNullableFilter<"Customer"> | string | null
    isActive?: BoolFilter<"Customer"> | boolean
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    userId?: StringFilter<"Customer"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    transactions?: TransactionListRelationFilter
    extractTransactions?: ExtractTransactionListRelationFilter
    bankTransactions?: BankTransactionListRelationFilter
    paymentMatches?: PaymentMatchListRelationFilter
    balance?: XOR<BalanceNullableRelationFilter, BalanceWhereInput> | null
  }, "id" | "code">

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    originalName?: SortOrderInput | SortOrder
    nameVariations?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    type?: SortOrder
    accountType?: SortOrderInput | SortOrder
    lastPaymentDate?: SortOrderInput | SortOrder
    paymentPattern?: SortOrderInput | SortOrder
    dueDays?: SortOrderInput | SortOrder
    tag1?: SortOrderInput | SortOrder
    tag2?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Customer"> | string
    code?: StringWithAggregatesFilter<"Customer"> | string
    name?: StringWithAggregatesFilter<"Customer"> | string
    originalName?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    nameVariations?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    address?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    type?: StringWithAggregatesFilter<"Customer"> | string
    accountType?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    lastPaymentDate?: DateTimeNullableWithAggregatesFilter<"Customer"> | Date | string | null
    paymentPattern?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    dueDays?: IntNullableWithAggregatesFilter<"Customer"> | number | null
    tag1?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    tag2?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    isActive?: BoolWithAggregatesFilter<"Customer"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
    userId?: StringWithAggregatesFilter<"Customer"> | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    type?: StringFilter<"Category"> | string
    parentId?: StringNullableFilter<"Category"> | string | null
    userId?: StringNullableFilter<"Category"> | string | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    parent?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    children?: CategoryListRelationFilter
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    transactions?: TransactionListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    parentId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parent?: CategoryOrderByWithRelationInput
    children?: CategoryOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
    transactions?: TransactionOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name_type?: CategoryNameTypeCompoundUniqueInput
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    name?: StringFilter<"Category"> | string
    type?: StringFilter<"Category"> | string
    parentId?: StringNullableFilter<"Category"> | string | null
    userId?: StringNullableFilter<"Category"> | string | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    parent?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    children?: CategoryListRelationFilter
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    transactions?: TransactionListRelationFilter
  }, "id" | "name_type">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    parentId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    name?: StringWithAggregatesFilter<"Category"> | string
    type?: StringWithAggregatesFilter<"Category"> | string
    parentId?: StringNullableWithAggregatesFilter<"Category"> | string | null
    userId?: StringNullableWithAggregatesFilter<"Category"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
  }

  export type TransactionWhereInput = {
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    id?: StringFilter<"Transaction"> | string
    type?: StringFilter<"Transaction"> | string
    amount?: FloatFilter<"Transaction"> | number
    currency?: StringFilter<"Transaction"> | string
    description?: StringNullableFilter<"Transaction"> | string | null
    date?: DateTimeFilter<"Transaction"> | Date | string
    categoryId?: StringNullableFilter<"Transaction"> | string | null
    customerId?: StringNullableFilter<"Transaction"> | string | null
    userId?: StringFilter<"Transaction"> | string
    sourceFile?: StringNullableFilter<"Transaction"> | string | null
    sourceRow?: IntNullableFilter<"Transaction"> | number | null
    metadata?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    category?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    customer?: XOR<CustomerNullableRelationFilter, CustomerWhereInput> | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    description?: SortOrderInput | SortOrder
    date?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    customerId?: SortOrderInput | SortOrder
    userId?: SortOrder
    sourceFile?: SortOrderInput | SortOrder
    sourceRow?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: CategoryOrderByWithRelationInput
    customer?: CustomerOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type TransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    type?: StringFilter<"Transaction"> | string
    amount?: FloatFilter<"Transaction"> | number
    currency?: StringFilter<"Transaction"> | string
    description?: StringNullableFilter<"Transaction"> | string | null
    date?: DateTimeFilter<"Transaction"> | Date | string
    categoryId?: StringNullableFilter<"Transaction"> | string | null
    customerId?: StringNullableFilter<"Transaction"> | string | null
    userId?: StringFilter<"Transaction"> | string
    sourceFile?: StringNullableFilter<"Transaction"> | string | null
    sourceRow?: IntNullableFilter<"Transaction"> | number | null
    metadata?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    category?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    customer?: XOR<CustomerNullableRelationFilter, CustomerWhereInput> | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    description?: SortOrderInput | SortOrder
    date?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    customerId?: SortOrderInput | SortOrder
    userId?: SortOrder
    sourceFile?: SortOrderInput | SortOrder
    sourceRow?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    OR?: TransactionScalarWhereWithAggregatesInput[]
    NOT?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Transaction"> | string
    type?: StringWithAggregatesFilter<"Transaction"> | string
    amount?: FloatWithAggregatesFilter<"Transaction"> | number
    currency?: StringWithAggregatesFilter<"Transaction"> | string
    description?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    date?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    categoryId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    customerId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    userId?: StringWithAggregatesFilter<"Transaction"> | string
    sourceFile?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    sourceRow?: IntNullableWithAggregatesFilter<"Transaction"> | number | null
    metadata?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
  }

  export type BalanceWhereInput = {
    AND?: BalanceWhereInput | BalanceWhereInput[]
    OR?: BalanceWhereInput[]
    NOT?: BalanceWhereInput | BalanceWhereInput[]
    id?: StringFilter<"Balance"> | string
    customerId?: StringFilter<"Balance"> | string
    totalDebit?: FloatFilter<"Balance"> | number
    totalCredit?: FloatFilter<"Balance"> | number
    netBalance?: FloatFilter<"Balance"> | number
    lastUpdated?: DateTimeFilter<"Balance"> | Date | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
  }

  export type BalanceOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    totalDebit?: SortOrder
    totalCredit?: SortOrder
    netBalance?: SortOrder
    lastUpdated?: SortOrder
    customer?: CustomerOrderByWithRelationInput
  }

  export type BalanceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    customerId?: string
    AND?: BalanceWhereInput | BalanceWhereInput[]
    OR?: BalanceWhereInput[]
    NOT?: BalanceWhereInput | BalanceWhereInput[]
    totalDebit?: FloatFilter<"Balance"> | number
    totalCredit?: FloatFilter<"Balance"> | number
    netBalance?: FloatFilter<"Balance"> | number
    lastUpdated?: DateTimeFilter<"Balance"> | Date | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
  }, "id" | "customerId">

  export type BalanceOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    totalDebit?: SortOrder
    totalCredit?: SortOrder
    netBalance?: SortOrder
    lastUpdated?: SortOrder
    _count?: BalanceCountOrderByAggregateInput
    _avg?: BalanceAvgOrderByAggregateInput
    _max?: BalanceMaxOrderByAggregateInput
    _min?: BalanceMinOrderByAggregateInput
    _sum?: BalanceSumOrderByAggregateInput
  }

  export type BalanceScalarWhereWithAggregatesInput = {
    AND?: BalanceScalarWhereWithAggregatesInput | BalanceScalarWhereWithAggregatesInput[]
    OR?: BalanceScalarWhereWithAggregatesInput[]
    NOT?: BalanceScalarWhereWithAggregatesInput | BalanceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Balance"> | string
    customerId?: StringWithAggregatesFilter<"Balance"> | string
    totalDebit?: FloatWithAggregatesFilter<"Balance"> | number
    totalCredit?: FloatWithAggregatesFilter<"Balance"> | number
    netBalance?: FloatWithAggregatesFilter<"Balance"> | number
    lastUpdated?: DateTimeWithAggregatesFilter<"Balance"> | Date | string
  }

  export type ExtractWhereInput = {
    AND?: ExtractWhereInput | ExtractWhereInput[]
    OR?: ExtractWhereInput[]
    NOT?: ExtractWhereInput | ExtractWhereInput[]
    id?: StringFilter<"Extract"> | string
    fileName?: StringFilter<"Extract"> | string
    uploadDate?: DateTimeFilter<"Extract"> | Date | string
    status?: StringFilter<"Extract"> | string
    totalRows?: IntFilter<"Extract"> | number
    processedRows?: IntFilter<"Extract"> | number
    errorRows?: IntFilter<"Extract"> | number
    userId?: StringFilter<"Extract"> | string
    createdAt?: DateTimeFilter<"Extract"> | Date | string
    updatedAt?: DateTimeFilter<"Extract"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    transactions?: ExtractTransactionListRelationFilter
  }

  export type ExtractOrderByWithRelationInput = {
    id?: SortOrder
    fileName?: SortOrder
    uploadDate?: SortOrder
    status?: SortOrder
    totalRows?: SortOrder
    processedRows?: SortOrder
    errorRows?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    transactions?: ExtractTransactionOrderByRelationAggregateInput
  }

  export type ExtractWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExtractWhereInput | ExtractWhereInput[]
    OR?: ExtractWhereInput[]
    NOT?: ExtractWhereInput | ExtractWhereInput[]
    fileName?: StringFilter<"Extract"> | string
    uploadDate?: DateTimeFilter<"Extract"> | Date | string
    status?: StringFilter<"Extract"> | string
    totalRows?: IntFilter<"Extract"> | number
    processedRows?: IntFilter<"Extract"> | number
    errorRows?: IntFilter<"Extract"> | number
    userId?: StringFilter<"Extract"> | string
    createdAt?: DateTimeFilter<"Extract"> | Date | string
    updatedAt?: DateTimeFilter<"Extract"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    transactions?: ExtractTransactionListRelationFilter
  }, "id">

  export type ExtractOrderByWithAggregationInput = {
    id?: SortOrder
    fileName?: SortOrder
    uploadDate?: SortOrder
    status?: SortOrder
    totalRows?: SortOrder
    processedRows?: SortOrder
    errorRows?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ExtractCountOrderByAggregateInput
    _avg?: ExtractAvgOrderByAggregateInput
    _max?: ExtractMaxOrderByAggregateInput
    _min?: ExtractMinOrderByAggregateInput
    _sum?: ExtractSumOrderByAggregateInput
  }

  export type ExtractScalarWhereWithAggregatesInput = {
    AND?: ExtractScalarWhereWithAggregatesInput | ExtractScalarWhereWithAggregatesInput[]
    OR?: ExtractScalarWhereWithAggregatesInput[]
    NOT?: ExtractScalarWhereWithAggregatesInput | ExtractScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Extract"> | string
    fileName?: StringWithAggregatesFilter<"Extract"> | string
    uploadDate?: DateTimeWithAggregatesFilter<"Extract"> | Date | string
    status?: StringWithAggregatesFilter<"Extract"> | string
    totalRows?: IntWithAggregatesFilter<"Extract"> | number
    processedRows?: IntWithAggregatesFilter<"Extract"> | number
    errorRows?: IntWithAggregatesFilter<"Extract"> | number
    userId?: StringWithAggregatesFilter<"Extract"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Extract"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Extract"> | Date | string
  }

  export type ExtractTransactionWhereInput = {
    AND?: ExtractTransactionWhereInput | ExtractTransactionWhereInput[]
    OR?: ExtractTransactionWhereInput[]
    NOT?: ExtractTransactionWhereInput | ExtractTransactionWhereInput[]
    id?: StringFilter<"ExtractTransaction"> | string
    extractId?: StringFilter<"ExtractTransaction"> | string
    customerId?: StringNullableFilter<"ExtractTransaction"> | string | null
    date?: DateTimeFilter<"ExtractTransaction"> | Date | string
    description?: StringFilter<"ExtractTransaction"> | string
    debit?: FloatFilter<"ExtractTransaction"> | number
    credit?: FloatFilter<"ExtractTransaction"> | number
    documentType?: StringNullableFilter<"ExtractTransaction"> | string | null
    voucherNo?: StringNullableFilter<"ExtractTransaction"> | string | null
    dueDate?: DateTimeNullableFilter<"ExtractTransaction"> | Date | string | null
    amountBase?: FloatFilter<"ExtractTransaction"> | number
    discount?: FloatFilter<"ExtractTransaction"> | number
    amountNet?: FloatFilter<"ExtractTransaction"> | number
    vat?: FloatFilter<"ExtractTransaction"> | number
    sourceRow?: IntFilter<"ExtractTransaction"> | number
    createdAt?: DateTimeFilter<"ExtractTransaction"> | Date | string
    extract?: XOR<ExtractRelationFilter, ExtractWhereInput>
    customer?: XOR<CustomerNullableRelationFilter, CustomerWhereInput> | null
  }

  export type ExtractTransactionOrderByWithRelationInput = {
    id?: SortOrder
    extractId?: SortOrder
    customerId?: SortOrderInput | SortOrder
    date?: SortOrder
    description?: SortOrder
    debit?: SortOrder
    credit?: SortOrder
    documentType?: SortOrderInput | SortOrder
    voucherNo?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    amountBase?: SortOrder
    discount?: SortOrder
    amountNet?: SortOrder
    vat?: SortOrder
    sourceRow?: SortOrder
    createdAt?: SortOrder
    extract?: ExtractOrderByWithRelationInput
    customer?: CustomerOrderByWithRelationInput
  }

  export type ExtractTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    customerId_voucherNo_date_description_debit_credit?: ExtractTransactionCustomerIdVoucherNoDateDescriptionDebitCreditCompoundUniqueInput
    AND?: ExtractTransactionWhereInput | ExtractTransactionWhereInput[]
    OR?: ExtractTransactionWhereInput[]
    NOT?: ExtractTransactionWhereInput | ExtractTransactionWhereInput[]
    extractId?: StringFilter<"ExtractTransaction"> | string
    customerId?: StringNullableFilter<"ExtractTransaction"> | string | null
    date?: DateTimeFilter<"ExtractTransaction"> | Date | string
    description?: StringFilter<"ExtractTransaction"> | string
    debit?: FloatFilter<"ExtractTransaction"> | number
    credit?: FloatFilter<"ExtractTransaction"> | number
    documentType?: StringNullableFilter<"ExtractTransaction"> | string | null
    voucherNo?: StringNullableFilter<"ExtractTransaction"> | string | null
    dueDate?: DateTimeNullableFilter<"ExtractTransaction"> | Date | string | null
    amountBase?: FloatFilter<"ExtractTransaction"> | number
    discount?: FloatFilter<"ExtractTransaction"> | number
    amountNet?: FloatFilter<"ExtractTransaction"> | number
    vat?: FloatFilter<"ExtractTransaction"> | number
    sourceRow?: IntFilter<"ExtractTransaction"> | number
    createdAt?: DateTimeFilter<"ExtractTransaction"> | Date | string
    extract?: XOR<ExtractRelationFilter, ExtractWhereInput>
    customer?: XOR<CustomerNullableRelationFilter, CustomerWhereInput> | null
  }, "id" | "customerId_voucherNo_date_description_debit_credit">

  export type ExtractTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    extractId?: SortOrder
    customerId?: SortOrderInput | SortOrder
    date?: SortOrder
    description?: SortOrder
    debit?: SortOrder
    credit?: SortOrder
    documentType?: SortOrderInput | SortOrder
    voucherNo?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    amountBase?: SortOrder
    discount?: SortOrder
    amountNet?: SortOrder
    vat?: SortOrder
    sourceRow?: SortOrder
    createdAt?: SortOrder
    _count?: ExtractTransactionCountOrderByAggregateInput
    _avg?: ExtractTransactionAvgOrderByAggregateInput
    _max?: ExtractTransactionMaxOrderByAggregateInput
    _min?: ExtractTransactionMinOrderByAggregateInput
    _sum?: ExtractTransactionSumOrderByAggregateInput
  }

  export type ExtractTransactionScalarWhereWithAggregatesInput = {
    AND?: ExtractTransactionScalarWhereWithAggregatesInput | ExtractTransactionScalarWhereWithAggregatesInput[]
    OR?: ExtractTransactionScalarWhereWithAggregatesInput[]
    NOT?: ExtractTransactionScalarWhereWithAggregatesInput | ExtractTransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ExtractTransaction"> | string
    extractId?: StringWithAggregatesFilter<"ExtractTransaction"> | string
    customerId?: StringNullableWithAggregatesFilter<"ExtractTransaction"> | string | null
    date?: DateTimeWithAggregatesFilter<"ExtractTransaction"> | Date | string
    description?: StringWithAggregatesFilter<"ExtractTransaction"> | string
    debit?: FloatWithAggregatesFilter<"ExtractTransaction"> | number
    credit?: FloatWithAggregatesFilter<"ExtractTransaction"> | number
    documentType?: StringNullableWithAggregatesFilter<"ExtractTransaction"> | string | null
    voucherNo?: StringNullableWithAggregatesFilter<"ExtractTransaction"> | string | null
    dueDate?: DateTimeNullableWithAggregatesFilter<"ExtractTransaction"> | Date | string | null
    amountBase?: FloatWithAggregatesFilter<"ExtractTransaction"> | number
    discount?: FloatWithAggregatesFilter<"ExtractTransaction"> | number
    amountNet?: FloatWithAggregatesFilter<"ExtractTransaction"> | number
    vat?: FloatWithAggregatesFilter<"ExtractTransaction"> | number
    sourceRow?: IntWithAggregatesFilter<"ExtractTransaction"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ExtractTransaction"> | Date | string
  }

  export type BankTransactionWhereInput = {
    AND?: BankTransactionWhereInput | BankTransactionWhereInput[]
    OR?: BankTransactionWhereInput[]
    NOT?: BankTransactionWhereInput | BankTransactionWhereInput[]
    id?: StringFilter<"BankTransaction"> | string
    messageId?: StringFilter<"BankTransaction"> | string
    bankCode?: StringFilter<"BankTransaction"> | string
    direction?: StringFilter<"BankTransaction"> | string
    accountIban?: StringFilter<"BankTransaction"> | string
    maskedAccount?: StringNullableFilter<"BankTransaction"> | string | null
    transactionDate?: DateTimeFilter<"BankTransaction"> | Date | string
    amount?: FloatFilter<"BankTransaction"> | number
    senderName?: StringNullableFilter<"BankTransaction"> | string | null
    counterpartyName?: StringNullableFilter<"BankTransaction"> | string | null
    balanceAfter?: FloatNullableFilter<"BankTransaction"> | number | null
    isMatched?: BoolFilter<"BankTransaction"> | boolean
    matchedCustomerId?: StringNullableFilter<"BankTransaction"> | string | null
    confidenceScore?: FloatNullableFilter<"BankTransaction"> | number | null
    rawEmailData?: StringNullableFilter<"BankTransaction"> | string | null
    parsedData?: StringNullableFilter<"BankTransaction"> | string | null
    createdAt?: DateTimeFilter<"BankTransaction"> | Date | string
    processedAt?: DateTimeNullableFilter<"BankTransaction"> | Date | string | null
    customer?: XOR<CustomerNullableRelationFilter, CustomerWhereInput> | null
    paymentMatches?: PaymentMatchListRelationFilter
  }

  export type BankTransactionOrderByWithRelationInput = {
    id?: SortOrder
    messageId?: SortOrder
    bankCode?: SortOrder
    direction?: SortOrder
    accountIban?: SortOrder
    maskedAccount?: SortOrderInput | SortOrder
    transactionDate?: SortOrder
    amount?: SortOrder
    senderName?: SortOrderInput | SortOrder
    counterpartyName?: SortOrderInput | SortOrder
    balanceAfter?: SortOrderInput | SortOrder
    isMatched?: SortOrder
    matchedCustomerId?: SortOrderInput | SortOrder
    confidenceScore?: SortOrderInput | SortOrder
    rawEmailData?: SortOrderInput | SortOrder
    parsedData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    customer?: CustomerOrderByWithRelationInput
    paymentMatches?: PaymentMatchOrderByRelationAggregateInput
  }

  export type BankTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    messageId?: string
    AND?: BankTransactionWhereInput | BankTransactionWhereInput[]
    OR?: BankTransactionWhereInput[]
    NOT?: BankTransactionWhereInput | BankTransactionWhereInput[]
    bankCode?: StringFilter<"BankTransaction"> | string
    direction?: StringFilter<"BankTransaction"> | string
    accountIban?: StringFilter<"BankTransaction"> | string
    maskedAccount?: StringNullableFilter<"BankTransaction"> | string | null
    transactionDate?: DateTimeFilter<"BankTransaction"> | Date | string
    amount?: FloatFilter<"BankTransaction"> | number
    senderName?: StringNullableFilter<"BankTransaction"> | string | null
    counterpartyName?: StringNullableFilter<"BankTransaction"> | string | null
    balanceAfter?: FloatNullableFilter<"BankTransaction"> | number | null
    isMatched?: BoolFilter<"BankTransaction"> | boolean
    matchedCustomerId?: StringNullableFilter<"BankTransaction"> | string | null
    confidenceScore?: FloatNullableFilter<"BankTransaction"> | number | null
    rawEmailData?: StringNullableFilter<"BankTransaction"> | string | null
    parsedData?: StringNullableFilter<"BankTransaction"> | string | null
    createdAt?: DateTimeFilter<"BankTransaction"> | Date | string
    processedAt?: DateTimeNullableFilter<"BankTransaction"> | Date | string | null
    customer?: XOR<CustomerNullableRelationFilter, CustomerWhereInput> | null
    paymentMatches?: PaymentMatchListRelationFilter
  }, "id" | "messageId">

  export type BankTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    messageId?: SortOrder
    bankCode?: SortOrder
    direction?: SortOrder
    accountIban?: SortOrder
    maskedAccount?: SortOrderInput | SortOrder
    transactionDate?: SortOrder
    amount?: SortOrder
    senderName?: SortOrderInput | SortOrder
    counterpartyName?: SortOrderInput | SortOrder
    balanceAfter?: SortOrderInput | SortOrder
    isMatched?: SortOrder
    matchedCustomerId?: SortOrderInput | SortOrder
    confidenceScore?: SortOrderInput | SortOrder
    rawEmailData?: SortOrderInput | SortOrder
    parsedData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    _count?: BankTransactionCountOrderByAggregateInput
    _avg?: BankTransactionAvgOrderByAggregateInput
    _max?: BankTransactionMaxOrderByAggregateInput
    _min?: BankTransactionMinOrderByAggregateInput
    _sum?: BankTransactionSumOrderByAggregateInput
  }

  export type BankTransactionScalarWhereWithAggregatesInput = {
    AND?: BankTransactionScalarWhereWithAggregatesInput | BankTransactionScalarWhereWithAggregatesInput[]
    OR?: BankTransactionScalarWhereWithAggregatesInput[]
    NOT?: BankTransactionScalarWhereWithAggregatesInput | BankTransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BankTransaction"> | string
    messageId?: StringWithAggregatesFilter<"BankTransaction"> | string
    bankCode?: StringWithAggregatesFilter<"BankTransaction"> | string
    direction?: StringWithAggregatesFilter<"BankTransaction"> | string
    accountIban?: StringWithAggregatesFilter<"BankTransaction"> | string
    maskedAccount?: StringNullableWithAggregatesFilter<"BankTransaction"> | string | null
    transactionDate?: DateTimeWithAggregatesFilter<"BankTransaction"> | Date | string
    amount?: FloatWithAggregatesFilter<"BankTransaction"> | number
    senderName?: StringNullableWithAggregatesFilter<"BankTransaction"> | string | null
    counterpartyName?: StringNullableWithAggregatesFilter<"BankTransaction"> | string | null
    balanceAfter?: FloatNullableWithAggregatesFilter<"BankTransaction"> | number | null
    isMatched?: BoolWithAggregatesFilter<"BankTransaction"> | boolean
    matchedCustomerId?: StringNullableWithAggregatesFilter<"BankTransaction"> | string | null
    confidenceScore?: FloatNullableWithAggregatesFilter<"BankTransaction"> | number | null
    rawEmailData?: StringNullableWithAggregatesFilter<"BankTransaction"> | string | null
    parsedData?: StringNullableWithAggregatesFilter<"BankTransaction"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"BankTransaction"> | Date | string
    processedAt?: DateTimeNullableWithAggregatesFilter<"BankTransaction"> | Date | string | null
  }

  export type PaymentMatchWhereInput = {
    AND?: PaymentMatchWhereInput | PaymentMatchWhereInput[]
    OR?: PaymentMatchWhereInput[]
    NOT?: PaymentMatchWhereInput | PaymentMatchWhereInput[]
    id?: StringFilter<"PaymentMatch"> | string
    bankTransactionId?: StringFilter<"PaymentMatch"> | string
    customerId?: StringFilter<"PaymentMatch"> | string
    matchedAmount?: FloatFilter<"PaymentMatch"> | number
    confidenceScore?: FloatFilter<"PaymentMatch"> | number
    matchMethod?: StringFilter<"PaymentMatch"> | string
    isConfirmed?: BoolFilter<"PaymentMatch"> | boolean
    createdAt?: DateTimeFilter<"PaymentMatch"> | Date | string
    bankTransaction?: XOR<BankTransactionRelationFilter, BankTransactionWhereInput>
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
  }

  export type PaymentMatchOrderByWithRelationInput = {
    id?: SortOrder
    bankTransactionId?: SortOrder
    customerId?: SortOrder
    matchedAmount?: SortOrder
    confidenceScore?: SortOrder
    matchMethod?: SortOrder
    isConfirmed?: SortOrder
    createdAt?: SortOrder
    bankTransaction?: BankTransactionOrderByWithRelationInput
    customer?: CustomerOrderByWithRelationInput
  }

  export type PaymentMatchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PaymentMatchWhereInput | PaymentMatchWhereInput[]
    OR?: PaymentMatchWhereInput[]
    NOT?: PaymentMatchWhereInput | PaymentMatchWhereInput[]
    bankTransactionId?: StringFilter<"PaymentMatch"> | string
    customerId?: StringFilter<"PaymentMatch"> | string
    matchedAmount?: FloatFilter<"PaymentMatch"> | number
    confidenceScore?: FloatFilter<"PaymentMatch"> | number
    matchMethod?: StringFilter<"PaymentMatch"> | string
    isConfirmed?: BoolFilter<"PaymentMatch"> | boolean
    createdAt?: DateTimeFilter<"PaymentMatch"> | Date | string
    bankTransaction?: XOR<BankTransactionRelationFilter, BankTransactionWhereInput>
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
  }, "id">

  export type PaymentMatchOrderByWithAggregationInput = {
    id?: SortOrder
    bankTransactionId?: SortOrder
    customerId?: SortOrder
    matchedAmount?: SortOrder
    confidenceScore?: SortOrder
    matchMethod?: SortOrder
    isConfirmed?: SortOrder
    createdAt?: SortOrder
    _count?: PaymentMatchCountOrderByAggregateInput
    _avg?: PaymentMatchAvgOrderByAggregateInput
    _max?: PaymentMatchMaxOrderByAggregateInput
    _min?: PaymentMatchMinOrderByAggregateInput
    _sum?: PaymentMatchSumOrderByAggregateInput
  }

  export type PaymentMatchScalarWhereWithAggregatesInput = {
    AND?: PaymentMatchScalarWhereWithAggregatesInput | PaymentMatchScalarWhereWithAggregatesInput[]
    OR?: PaymentMatchScalarWhereWithAggregatesInput[]
    NOT?: PaymentMatchScalarWhereWithAggregatesInput | PaymentMatchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PaymentMatch"> | string
    bankTransactionId?: StringWithAggregatesFilter<"PaymentMatch"> | string
    customerId?: StringWithAggregatesFilter<"PaymentMatch"> | string
    matchedAmount?: FloatWithAggregatesFilter<"PaymentMatch"> | number
    confidenceScore?: FloatWithAggregatesFilter<"PaymentMatch"> | number
    matchMethod?: StringWithAggregatesFilter<"PaymentMatch"> | string
    isConfirmed?: BoolWithAggregatesFilter<"PaymentMatch"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"PaymentMatch"> | Date | string
  }

  export type CashFlowWhereInput = {
    AND?: CashFlowWhereInput | CashFlowWhereInput[]
    OR?: CashFlowWhereInput[]
    NOT?: CashFlowWhereInput | CashFlowWhereInput[]
    id?: StringFilter<"CashFlow"> | string
    date?: DateTimeFilter<"CashFlow"> | Date | string
    openingBalance?: FloatFilter<"CashFlow"> | number
    closingBalance?: FloatFilter<"CashFlow"> | number
    totalIncome?: FloatFilter<"CashFlow"> | number
    totalExpense?: FloatFilter<"CashFlow"> | number
    difference?: FloatFilter<"CashFlow"> | number
    notes?: StringNullableFilter<"CashFlow"> | string | null
    userId?: StringFilter<"CashFlow"> | string
    createdAt?: DateTimeFilter<"CashFlow"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CashFlowOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    openingBalance?: SortOrder
    closingBalance?: SortOrder
    totalIncome?: SortOrder
    totalExpense?: SortOrder
    difference?: SortOrder
    notes?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type CashFlowWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CashFlowWhereInput | CashFlowWhereInput[]
    OR?: CashFlowWhereInput[]
    NOT?: CashFlowWhereInput | CashFlowWhereInput[]
    date?: DateTimeFilter<"CashFlow"> | Date | string
    openingBalance?: FloatFilter<"CashFlow"> | number
    closingBalance?: FloatFilter<"CashFlow"> | number
    totalIncome?: FloatFilter<"CashFlow"> | number
    totalExpense?: FloatFilter<"CashFlow"> | number
    difference?: FloatFilter<"CashFlow"> | number
    notes?: StringNullableFilter<"CashFlow"> | string | null
    userId?: StringFilter<"CashFlow"> | string
    createdAt?: DateTimeFilter<"CashFlow"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type CashFlowOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    openingBalance?: SortOrder
    closingBalance?: SortOrder
    totalIncome?: SortOrder
    totalExpense?: SortOrder
    difference?: SortOrder
    notes?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: CashFlowCountOrderByAggregateInput
    _avg?: CashFlowAvgOrderByAggregateInput
    _max?: CashFlowMaxOrderByAggregateInput
    _min?: CashFlowMinOrderByAggregateInput
    _sum?: CashFlowSumOrderByAggregateInput
  }

  export type CashFlowScalarWhereWithAggregatesInput = {
    AND?: CashFlowScalarWhereWithAggregatesInput | CashFlowScalarWhereWithAggregatesInput[]
    OR?: CashFlowScalarWhereWithAggregatesInput[]
    NOT?: CashFlowScalarWhereWithAggregatesInput | CashFlowScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CashFlow"> | string
    date?: DateTimeWithAggregatesFilter<"CashFlow"> | Date | string
    openingBalance?: FloatWithAggregatesFilter<"CashFlow"> | number
    closingBalance?: FloatWithAggregatesFilter<"CashFlow"> | number
    totalIncome?: FloatWithAggregatesFilter<"CashFlow"> | number
    totalExpense?: FloatWithAggregatesFilter<"CashFlow"> | number
    difference?: FloatWithAggregatesFilter<"CashFlow"> | number
    notes?: StringNullableWithAggregatesFilter<"CashFlow"> | string | null
    userId?: StringWithAggregatesFilter<"CashFlow"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CashFlow"> | Date | string
  }

  export type ReportCacheWhereInput = {
    AND?: ReportCacheWhereInput | ReportCacheWhereInput[]
    OR?: ReportCacheWhereInput[]
    NOT?: ReportCacheWhereInput | ReportCacheWhereInput[]
    id?: StringFilter<"ReportCache"> | string
    reportKey?: StringFilter<"ReportCache"> | string
    data?: StringFilter<"ReportCache"> | string
    expiresAt?: DateTimeFilter<"ReportCache"> | Date | string
    createdAt?: DateTimeFilter<"ReportCache"> | Date | string
  }

  export type ReportCacheOrderByWithRelationInput = {
    id?: SortOrder
    reportKey?: SortOrder
    data?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type ReportCacheWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    reportKey?: string
    AND?: ReportCacheWhereInput | ReportCacheWhereInput[]
    OR?: ReportCacheWhereInput[]
    NOT?: ReportCacheWhereInput | ReportCacheWhereInput[]
    data?: StringFilter<"ReportCache"> | string
    expiresAt?: DateTimeFilter<"ReportCache"> | Date | string
    createdAt?: DateTimeFilter<"ReportCache"> | Date | string
  }, "id" | "reportKey">

  export type ReportCacheOrderByWithAggregationInput = {
    id?: SortOrder
    reportKey?: SortOrder
    data?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    _count?: ReportCacheCountOrderByAggregateInput
    _max?: ReportCacheMaxOrderByAggregateInput
    _min?: ReportCacheMinOrderByAggregateInput
  }

  export type ReportCacheScalarWhereWithAggregatesInput = {
    AND?: ReportCacheScalarWhereWithAggregatesInput | ReportCacheScalarWhereWithAggregatesInput[]
    OR?: ReportCacheScalarWhereWithAggregatesInput[]
    NOT?: ReportCacheScalarWhereWithAggregatesInput | ReportCacheScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReportCache"> | string
    reportKey?: StringWithAggregatesFilter<"ReportCache"> | string
    data?: StringWithAggregatesFilter<"ReportCache"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"ReportCache"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"ReportCache"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    table?: StringFilter<"AuditLog"> | string
    recordId?: StringNullableFilter<"AuditLog"> | string | null
    oldData?: StringNullableFilter<"AuditLog"> | string | null
    newData?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    table?: SortOrder
    recordId?: SortOrderInput | SortOrder
    oldData?: SortOrderInput | SortOrder
    newData?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    userId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    table?: StringFilter<"AuditLog"> | string
    recordId?: StringNullableFilter<"AuditLog"> | string | null
    oldData?: StringNullableFilter<"AuditLog"> | string | null
    newData?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    table?: SortOrder
    recordId?: SortOrderInput | SortOrder
    oldData?: SortOrderInput | SortOrder
    newData?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    userId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    table?: StringWithAggregatesFilter<"AuditLog"> | string
    recordId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    oldData?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    newData?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    username: string
    email: string
    password: string
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionCreateNestedManyWithoutUserInput
    categories?: CategoryCreateNestedManyWithoutUserInput
    extracts?: ExtractCreateNestedManyWithoutUserInput
    cashFlows?: CashFlowCreateNestedManyWithoutUserInput
    customers?: CustomerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    email: string
    password: string
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    categories?: CategoryUncheckedCreateNestedManyWithoutUserInput
    extracts?: ExtractUncheckedCreateNestedManyWithoutUserInput
    cashFlows?: CashFlowUncheckedCreateNestedManyWithoutUserInput
    customers?: CustomerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    categories?: CategoryUpdateManyWithoutUserNestedInput
    extracts?: ExtractUpdateManyWithoutUserNestedInput
    cashFlows?: CashFlowUpdateManyWithoutUserNestedInput
    customers?: CustomerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    categories?: CategoryUncheckedUpdateManyWithoutUserNestedInput
    extracts?: ExtractUncheckedUpdateManyWithoutUserNestedInput
    cashFlows?: CashFlowUncheckedUpdateManyWithoutUserNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    email: string
    password: string
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerCreateInput = {
    id?: string
    code: string
    name: string
    originalName?: string | null
    nameVariations?: string | null
    phone?: string | null
    address?: string | null
    type?: string
    accountType?: string | null
    lastPaymentDate?: Date | string | null
    paymentPattern?: string | null
    dueDays?: number | null
    tag1?: string | null
    tag2?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCustomersInput
    transactions?: TransactionCreateNestedManyWithoutCustomerInput
    extractTransactions?: ExtractTransactionCreateNestedManyWithoutCustomerInput
    bankTransactions?: BankTransactionCreateNestedManyWithoutCustomerInput
    paymentMatches?: PaymentMatchCreateNestedManyWithoutCustomerInput
    balance?: BalanceCreateNestedOneWithoutCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    id?: string
    code: string
    name: string
    originalName?: string | null
    nameVariations?: string | null
    phone?: string | null
    address?: string | null
    type?: string
    accountType?: string | null
    lastPaymentDate?: Date | string | null
    paymentPattern?: string | null
    dueDays?: number | null
    tag1?: string | null
    tag2?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    transactions?: TransactionUncheckedCreateNestedManyWithoutCustomerInput
    extractTransactions?: ExtractTransactionUncheckedCreateNestedManyWithoutCustomerInput
    bankTransactions?: BankTransactionUncheckedCreateNestedManyWithoutCustomerInput
    paymentMatches?: PaymentMatchUncheckedCreateNestedManyWithoutCustomerInput
    balance?: BalanceUncheckedCreateNestedOneWithoutCustomerInput
  }

  export type CustomerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    nameVariations?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentPattern?: NullableStringFieldUpdateOperationsInput | string | null
    dueDays?: NullableIntFieldUpdateOperationsInput | number | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCustomersNestedInput
    transactions?: TransactionUpdateManyWithoutCustomerNestedInput
    extractTransactions?: ExtractTransactionUpdateManyWithoutCustomerNestedInput
    bankTransactions?: BankTransactionUpdateManyWithoutCustomerNestedInput
    paymentMatches?: PaymentMatchUpdateManyWithoutCustomerNestedInput
    balance?: BalanceUpdateOneWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    nameVariations?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentPattern?: NullableStringFieldUpdateOperationsInput | string | null
    dueDays?: NullableIntFieldUpdateOperationsInput | number | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    transactions?: TransactionUncheckedUpdateManyWithoutCustomerNestedInput
    extractTransactions?: ExtractTransactionUncheckedUpdateManyWithoutCustomerNestedInput
    bankTransactions?: BankTransactionUncheckedUpdateManyWithoutCustomerNestedInput
    paymentMatches?: PaymentMatchUncheckedUpdateManyWithoutCustomerNestedInput
    balance?: BalanceUncheckedUpdateOneWithoutCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    id?: string
    code: string
    name: string
    originalName?: string | null
    nameVariations?: string | null
    phone?: string | null
    address?: string | null
    type?: string
    accountType?: string | null
    lastPaymentDate?: Date | string | null
    paymentPattern?: string | null
    dueDays?: number | null
    tag1?: string | null
    tag2?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type CustomerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    nameVariations?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentPattern?: NullableStringFieldUpdateOperationsInput | string | null
    dueDays?: NullableIntFieldUpdateOperationsInput | number | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    nameVariations?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentPattern?: NullableStringFieldUpdateOperationsInput | string | null
    dueDays?: NullableIntFieldUpdateOperationsInput | number | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    type: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    children?: CategoryCreateNestedManyWithoutParentInput
    user?: UserCreateNestedOneWithoutCategoriesInput
    transactions?: TransactionCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    type: string
    parentId?: string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
    user?: UserUpdateOneWithoutCategoriesNestedInput
    transactions?: TransactionUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    type: string
    parentId?: string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateInput = {
    id?: string
    type: string
    amount: number
    currency?: string
    description?: string | null
    date: Date | string
    sourceFile?: string | null
    sourceRow?: number | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category?: CategoryCreateNestedOneWithoutTransactionsInput
    customer?: CustomerCreateNestedOneWithoutTransactionsInput
    user: UserCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateInput = {
    id?: string
    type: string
    amount: number
    currency?: string
    description?: string | null
    date: Date | string
    categoryId?: string | null
    customerId?: string | null
    userId: string
    sourceFile?: string | null
    sourceRow?: number | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sourceFile?: NullableStringFieldUpdateOperationsInput | string | null
    sourceRow?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneWithoutTransactionsNestedInput
    customer?: CustomerUpdateOneWithoutTransactionsNestedInput
    user?: UserUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sourceFile?: NullableStringFieldUpdateOperationsInput | string | null
    sourceRow?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateManyInput = {
    id?: string
    type: string
    amount: number
    currency?: string
    description?: string | null
    date: Date | string
    categoryId?: string | null
    customerId?: string | null
    userId: string
    sourceFile?: string | null
    sourceRow?: number | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sourceFile?: NullableStringFieldUpdateOperationsInput | string | null
    sourceRow?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sourceFile?: NullableStringFieldUpdateOperationsInput | string | null
    sourceRow?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BalanceCreateInput = {
    id?: string
    totalDebit?: number
    totalCredit?: number
    netBalance?: number
    lastUpdated?: Date | string
    customer: CustomerCreateNestedOneWithoutBalanceInput
  }

  export type BalanceUncheckedCreateInput = {
    id?: string
    customerId: string
    totalDebit?: number
    totalCredit?: number
    netBalance?: number
    lastUpdated?: Date | string
  }

  export type BalanceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalDebit?: FloatFieldUpdateOperationsInput | number
    totalCredit?: FloatFieldUpdateOperationsInput | number
    netBalance?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutBalanceNestedInput
  }

  export type BalanceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    totalDebit?: FloatFieldUpdateOperationsInput | number
    totalCredit?: FloatFieldUpdateOperationsInput | number
    netBalance?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BalanceCreateManyInput = {
    id?: string
    customerId: string
    totalDebit?: number
    totalCredit?: number
    netBalance?: number
    lastUpdated?: Date | string
  }

  export type BalanceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalDebit?: FloatFieldUpdateOperationsInput | number
    totalCredit?: FloatFieldUpdateOperationsInput | number
    netBalance?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BalanceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    totalDebit?: FloatFieldUpdateOperationsInput | number
    totalCredit?: FloatFieldUpdateOperationsInput | number
    netBalance?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExtractCreateInput = {
    id?: string
    fileName: string
    uploadDate?: Date | string
    status: string
    totalRows?: number
    processedRows?: number
    errorRows?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutExtractsInput
    transactions?: ExtractTransactionCreateNestedManyWithoutExtractInput
  }

  export type ExtractUncheckedCreateInput = {
    id?: string
    fileName: string
    uploadDate?: Date | string
    status: string
    totalRows?: number
    processedRows?: number
    errorRows?: number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: ExtractTransactionUncheckedCreateNestedManyWithoutExtractInput
  }

  export type ExtractUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalRows?: IntFieldUpdateOperationsInput | number
    processedRows?: IntFieldUpdateOperationsInput | number
    errorRows?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutExtractsNestedInput
    transactions?: ExtractTransactionUpdateManyWithoutExtractNestedInput
  }

  export type ExtractUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalRows?: IntFieldUpdateOperationsInput | number
    processedRows?: IntFieldUpdateOperationsInput | number
    errorRows?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: ExtractTransactionUncheckedUpdateManyWithoutExtractNestedInput
  }

  export type ExtractCreateManyInput = {
    id?: string
    fileName: string
    uploadDate?: Date | string
    status: string
    totalRows?: number
    processedRows?: number
    errorRows?: number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExtractUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalRows?: IntFieldUpdateOperationsInput | number
    processedRows?: IntFieldUpdateOperationsInput | number
    errorRows?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExtractUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalRows?: IntFieldUpdateOperationsInput | number
    processedRows?: IntFieldUpdateOperationsInput | number
    errorRows?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExtractTransactionCreateInput = {
    id?: string
    date: Date | string
    description: string
    debit?: number
    credit?: number
    documentType?: string | null
    voucherNo?: string | null
    dueDate?: Date | string | null
    amountBase?: number
    discount?: number
    amountNet?: number
    vat?: number
    sourceRow: number
    createdAt?: Date | string
    extract: ExtractCreateNestedOneWithoutTransactionsInput
    customer?: CustomerCreateNestedOneWithoutExtractTransactionsInput
  }

  export type ExtractTransactionUncheckedCreateInput = {
    id?: string
    extractId: string
    customerId?: string | null
    date: Date | string
    description: string
    debit?: number
    credit?: number
    documentType?: string | null
    voucherNo?: string | null
    dueDate?: Date | string | null
    amountBase?: number
    discount?: number
    amountNet?: number
    vat?: number
    sourceRow: number
    createdAt?: Date | string
  }

  export type ExtractTransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    debit?: FloatFieldUpdateOperationsInput | number
    credit?: FloatFieldUpdateOperationsInput | number
    documentType?: NullableStringFieldUpdateOperationsInput | string | null
    voucherNo?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountBase?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    amountNet?: FloatFieldUpdateOperationsInput | number
    vat?: FloatFieldUpdateOperationsInput | number
    sourceRow?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    extract?: ExtractUpdateOneRequiredWithoutTransactionsNestedInput
    customer?: CustomerUpdateOneWithoutExtractTransactionsNestedInput
  }

  export type ExtractTransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    extractId?: StringFieldUpdateOperationsInput | string
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    debit?: FloatFieldUpdateOperationsInput | number
    credit?: FloatFieldUpdateOperationsInput | number
    documentType?: NullableStringFieldUpdateOperationsInput | string | null
    voucherNo?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountBase?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    amountNet?: FloatFieldUpdateOperationsInput | number
    vat?: FloatFieldUpdateOperationsInput | number
    sourceRow?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExtractTransactionCreateManyInput = {
    id?: string
    extractId: string
    customerId?: string | null
    date: Date | string
    description: string
    debit?: number
    credit?: number
    documentType?: string | null
    voucherNo?: string | null
    dueDate?: Date | string | null
    amountBase?: number
    discount?: number
    amountNet?: number
    vat?: number
    sourceRow: number
    createdAt?: Date | string
  }

  export type ExtractTransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    debit?: FloatFieldUpdateOperationsInput | number
    credit?: FloatFieldUpdateOperationsInput | number
    documentType?: NullableStringFieldUpdateOperationsInput | string | null
    voucherNo?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountBase?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    amountNet?: FloatFieldUpdateOperationsInput | number
    vat?: FloatFieldUpdateOperationsInput | number
    sourceRow?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExtractTransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    extractId?: StringFieldUpdateOperationsInput | string
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    debit?: FloatFieldUpdateOperationsInput | number
    credit?: FloatFieldUpdateOperationsInput | number
    documentType?: NullableStringFieldUpdateOperationsInput | string | null
    voucherNo?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountBase?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    amountNet?: FloatFieldUpdateOperationsInput | number
    vat?: FloatFieldUpdateOperationsInput | number
    sourceRow?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankTransactionCreateInput = {
    id?: string
    messageId: string
    bankCode?: string
    direction: string
    accountIban: string
    maskedAccount?: string | null
    transactionDate: Date | string
    amount: number
    senderName?: string | null
    counterpartyName?: string | null
    balanceAfter?: number | null
    isMatched?: boolean
    confidenceScore?: number | null
    rawEmailData?: string | null
    parsedData?: string | null
    createdAt?: Date | string
    processedAt?: Date | string | null
    customer?: CustomerCreateNestedOneWithoutBankTransactionsInput
    paymentMatches?: PaymentMatchCreateNestedManyWithoutBankTransactionInput
  }

  export type BankTransactionUncheckedCreateInput = {
    id?: string
    messageId: string
    bankCode?: string
    direction: string
    accountIban: string
    maskedAccount?: string | null
    transactionDate: Date | string
    amount: number
    senderName?: string | null
    counterpartyName?: string | null
    balanceAfter?: number | null
    isMatched?: boolean
    matchedCustomerId?: string | null
    confidenceScore?: number | null
    rawEmailData?: string | null
    parsedData?: string | null
    createdAt?: Date | string
    processedAt?: Date | string | null
    paymentMatches?: PaymentMatchUncheckedCreateNestedManyWithoutBankTransactionInput
  }

  export type BankTransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    bankCode?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    accountIban?: StringFieldUpdateOperationsInput | string
    maskedAccount?: NullableStringFieldUpdateOperationsInput | string | null
    transactionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    senderName?: NullableStringFieldUpdateOperationsInput | string | null
    counterpartyName?: NullableStringFieldUpdateOperationsInput | string | null
    balanceAfter?: NullableFloatFieldUpdateOperationsInput | number | null
    isMatched?: BoolFieldUpdateOperationsInput | boolean
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    rawEmailData?: NullableStringFieldUpdateOperationsInput | string | null
    parsedData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customer?: CustomerUpdateOneWithoutBankTransactionsNestedInput
    paymentMatches?: PaymentMatchUpdateManyWithoutBankTransactionNestedInput
  }

  export type BankTransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    bankCode?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    accountIban?: StringFieldUpdateOperationsInput | string
    maskedAccount?: NullableStringFieldUpdateOperationsInput | string | null
    transactionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    senderName?: NullableStringFieldUpdateOperationsInput | string | null
    counterpartyName?: NullableStringFieldUpdateOperationsInput | string | null
    balanceAfter?: NullableFloatFieldUpdateOperationsInput | number | null
    isMatched?: BoolFieldUpdateOperationsInput | boolean
    matchedCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    rawEmailData?: NullableStringFieldUpdateOperationsInput | string | null
    parsedData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentMatches?: PaymentMatchUncheckedUpdateManyWithoutBankTransactionNestedInput
  }

  export type BankTransactionCreateManyInput = {
    id?: string
    messageId: string
    bankCode?: string
    direction: string
    accountIban: string
    maskedAccount?: string | null
    transactionDate: Date | string
    amount: number
    senderName?: string | null
    counterpartyName?: string | null
    balanceAfter?: number | null
    isMatched?: boolean
    matchedCustomerId?: string | null
    confidenceScore?: number | null
    rawEmailData?: string | null
    parsedData?: string | null
    createdAt?: Date | string
    processedAt?: Date | string | null
  }

  export type BankTransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    bankCode?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    accountIban?: StringFieldUpdateOperationsInput | string
    maskedAccount?: NullableStringFieldUpdateOperationsInput | string | null
    transactionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    senderName?: NullableStringFieldUpdateOperationsInput | string | null
    counterpartyName?: NullableStringFieldUpdateOperationsInput | string | null
    balanceAfter?: NullableFloatFieldUpdateOperationsInput | number | null
    isMatched?: BoolFieldUpdateOperationsInput | boolean
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    rawEmailData?: NullableStringFieldUpdateOperationsInput | string | null
    parsedData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BankTransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    bankCode?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    accountIban?: StringFieldUpdateOperationsInput | string
    maskedAccount?: NullableStringFieldUpdateOperationsInput | string | null
    transactionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    senderName?: NullableStringFieldUpdateOperationsInput | string | null
    counterpartyName?: NullableStringFieldUpdateOperationsInput | string | null
    balanceAfter?: NullableFloatFieldUpdateOperationsInput | number | null
    isMatched?: BoolFieldUpdateOperationsInput | boolean
    matchedCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    rawEmailData?: NullableStringFieldUpdateOperationsInput | string | null
    parsedData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PaymentMatchCreateInput = {
    id?: string
    matchedAmount: number
    confidenceScore: number
    matchMethod: string
    isConfirmed?: boolean
    createdAt?: Date | string
    bankTransaction: BankTransactionCreateNestedOneWithoutPaymentMatchesInput
    customer: CustomerCreateNestedOneWithoutPaymentMatchesInput
  }

  export type PaymentMatchUncheckedCreateInput = {
    id?: string
    bankTransactionId: string
    customerId: string
    matchedAmount: number
    confidenceScore: number
    matchMethod: string
    isConfirmed?: boolean
    createdAt?: Date | string
  }

  export type PaymentMatchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchedAmount?: FloatFieldUpdateOperationsInput | number
    confidenceScore?: FloatFieldUpdateOperationsInput | number
    matchMethod?: StringFieldUpdateOperationsInput | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bankTransaction?: BankTransactionUpdateOneRequiredWithoutPaymentMatchesNestedInput
    customer?: CustomerUpdateOneRequiredWithoutPaymentMatchesNestedInput
  }

  export type PaymentMatchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bankTransactionId?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    matchedAmount?: FloatFieldUpdateOperationsInput | number
    confidenceScore?: FloatFieldUpdateOperationsInput | number
    matchMethod?: StringFieldUpdateOperationsInput | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentMatchCreateManyInput = {
    id?: string
    bankTransactionId: string
    customerId: string
    matchedAmount: number
    confidenceScore: number
    matchMethod: string
    isConfirmed?: boolean
    createdAt?: Date | string
  }

  export type PaymentMatchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchedAmount?: FloatFieldUpdateOperationsInput | number
    confidenceScore?: FloatFieldUpdateOperationsInput | number
    matchMethod?: StringFieldUpdateOperationsInput | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentMatchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    bankTransactionId?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    matchedAmount?: FloatFieldUpdateOperationsInput | number
    confidenceScore?: FloatFieldUpdateOperationsInput | number
    matchMethod?: StringFieldUpdateOperationsInput | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CashFlowCreateInput = {
    id?: string
    date: Date | string
    openingBalance: number
    closingBalance: number
    totalIncome?: number
    totalExpense?: number
    difference?: number
    notes?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutCashFlowsInput
  }

  export type CashFlowUncheckedCreateInput = {
    id?: string
    date: Date | string
    openingBalance: number
    closingBalance: number
    totalIncome?: number
    totalExpense?: number
    difference?: number
    notes?: string | null
    userId: string
    createdAt?: Date | string
  }

  export type CashFlowUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    openingBalance?: FloatFieldUpdateOperationsInput | number
    closingBalance?: FloatFieldUpdateOperationsInput | number
    totalIncome?: FloatFieldUpdateOperationsInput | number
    totalExpense?: FloatFieldUpdateOperationsInput | number
    difference?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCashFlowsNestedInput
  }

  export type CashFlowUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    openingBalance?: FloatFieldUpdateOperationsInput | number
    closingBalance?: FloatFieldUpdateOperationsInput | number
    totalIncome?: FloatFieldUpdateOperationsInput | number
    totalExpense?: FloatFieldUpdateOperationsInput | number
    difference?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CashFlowCreateManyInput = {
    id?: string
    date: Date | string
    openingBalance: number
    closingBalance: number
    totalIncome?: number
    totalExpense?: number
    difference?: number
    notes?: string | null
    userId: string
    createdAt?: Date | string
  }

  export type CashFlowUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    openingBalance?: FloatFieldUpdateOperationsInput | number
    closingBalance?: FloatFieldUpdateOperationsInput | number
    totalIncome?: FloatFieldUpdateOperationsInput | number
    totalExpense?: FloatFieldUpdateOperationsInput | number
    difference?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CashFlowUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    openingBalance?: FloatFieldUpdateOperationsInput | number
    closingBalance?: FloatFieldUpdateOperationsInput | number
    totalIncome?: FloatFieldUpdateOperationsInput | number
    totalExpense?: FloatFieldUpdateOperationsInput | number
    difference?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportCacheCreateInput = {
    id?: string
    reportKey: string
    data: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type ReportCacheUncheckedCreateInput = {
    id?: string
    reportKey: string
    data: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type ReportCacheUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportKey?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportCacheUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportKey?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportCacheCreateManyInput = {
    id?: string
    reportKey: string
    data: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type ReportCacheUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportKey?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportCacheUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportKey?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    id?: string
    userId?: string | null
    action: string
    table: string
    recordId?: string | null
    oldData?: string | null
    newData?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    userId?: string | null
    action: string
    table: string
    recordId?: string | null
    oldData?: string | null
    newData?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    table?: StringFieldUpdateOperationsInput | string
    recordId?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableStringFieldUpdateOperationsInput | string | null
    newData?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    table?: StringFieldUpdateOperationsInput | string
    recordId?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableStringFieldUpdateOperationsInput | string | null
    newData?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    userId?: string | null
    action: string
    table: string
    recordId?: string | null
    oldData?: string | null
    newData?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    table?: StringFieldUpdateOperationsInput | string
    recordId?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableStringFieldUpdateOperationsInput | string | null
    newData?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    table?: StringFieldUpdateOperationsInput | string
    recordId?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableStringFieldUpdateOperationsInput | string | null
    newData?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type ExtractListRelationFilter = {
    every?: ExtractWhereInput
    some?: ExtractWhereInput
    none?: ExtractWhereInput
  }

  export type CashFlowListRelationFilter = {
    every?: CashFlowWhereInput
    some?: CashFlowWhereInput
    none?: CashFlowWhereInput
  }

  export type CustomerListRelationFilter = {
    every?: CustomerWhereInput
    some?: CustomerWhereInput
    none?: CustomerWhereInput
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExtractOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CashFlowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ExtractTransactionListRelationFilter = {
    every?: ExtractTransactionWhereInput
    some?: ExtractTransactionWhereInput
    none?: ExtractTransactionWhereInput
  }

  export type BankTransactionListRelationFilter = {
    every?: BankTransactionWhereInput
    some?: BankTransactionWhereInput
    none?: BankTransactionWhereInput
  }

  export type PaymentMatchListRelationFilter = {
    every?: PaymentMatchWhereInput
    some?: PaymentMatchWhereInput
    none?: PaymentMatchWhereInput
  }

  export type BalanceNullableRelationFilter = {
    is?: BalanceWhereInput | null
    isNot?: BalanceWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ExtractTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BankTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentMatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    originalName?: SortOrder
    nameVariations?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    type?: SortOrder
    accountType?: SortOrder
    lastPaymentDate?: SortOrder
    paymentPattern?: SortOrder
    dueDays?: SortOrder
    tag1?: SortOrder
    tag2?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    dueDays?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    originalName?: SortOrder
    nameVariations?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    type?: SortOrder
    accountType?: SortOrder
    lastPaymentDate?: SortOrder
    paymentPattern?: SortOrder
    dueDays?: SortOrder
    tag1?: SortOrder
    tag2?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    originalName?: SortOrder
    nameVariations?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    type?: SortOrder
    accountType?: SortOrder
    lastPaymentDate?: SortOrder
    paymentPattern?: SortOrder
    dueDays?: SortOrder
    tag1?: SortOrder
    tag2?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    dueDays?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type CategoryNullableRelationFilter = {
    is?: CategoryWhereInput | null
    isNot?: CategoryWhereInput | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type CategoryNameTypeCompoundUniqueInput = {
    name: string
    type: string
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    parentId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    parentId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    parentId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CustomerNullableRelationFilter = {
    is?: CustomerWhereInput | null
    isNot?: CustomerWhereInput | null
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    description?: SortOrder
    date?: SortOrder
    categoryId?: SortOrder
    customerId?: SortOrder
    userId?: SortOrder
    sourceFile?: SortOrder
    sourceRow?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
    sourceRow?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    description?: SortOrder
    date?: SortOrder
    categoryId?: SortOrder
    customerId?: SortOrder
    userId?: SortOrder
    sourceFile?: SortOrder
    sourceRow?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    description?: SortOrder
    date?: SortOrder
    categoryId?: SortOrder
    customerId?: SortOrder
    userId?: SortOrder
    sourceFile?: SortOrder
    sourceRow?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    amount?: SortOrder
    sourceRow?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type CustomerRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type BalanceCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    totalDebit?: SortOrder
    totalCredit?: SortOrder
    netBalance?: SortOrder
    lastUpdated?: SortOrder
  }

  export type BalanceAvgOrderByAggregateInput = {
    totalDebit?: SortOrder
    totalCredit?: SortOrder
    netBalance?: SortOrder
  }

  export type BalanceMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    totalDebit?: SortOrder
    totalCredit?: SortOrder
    netBalance?: SortOrder
    lastUpdated?: SortOrder
  }

  export type BalanceMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    totalDebit?: SortOrder
    totalCredit?: SortOrder
    netBalance?: SortOrder
    lastUpdated?: SortOrder
  }

  export type BalanceSumOrderByAggregateInput = {
    totalDebit?: SortOrder
    totalCredit?: SortOrder
    netBalance?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ExtractCountOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    uploadDate?: SortOrder
    status?: SortOrder
    totalRows?: SortOrder
    processedRows?: SortOrder
    errorRows?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExtractAvgOrderByAggregateInput = {
    totalRows?: SortOrder
    processedRows?: SortOrder
    errorRows?: SortOrder
  }

  export type ExtractMaxOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    uploadDate?: SortOrder
    status?: SortOrder
    totalRows?: SortOrder
    processedRows?: SortOrder
    errorRows?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExtractMinOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    uploadDate?: SortOrder
    status?: SortOrder
    totalRows?: SortOrder
    processedRows?: SortOrder
    errorRows?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExtractSumOrderByAggregateInput = {
    totalRows?: SortOrder
    processedRows?: SortOrder
    errorRows?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ExtractRelationFilter = {
    is?: ExtractWhereInput
    isNot?: ExtractWhereInput
  }

  export type ExtractTransactionCustomerIdVoucherNoDateDescriptionDebitCreditCompoundUniqueInput = {
    customerId: string
    voucherNo: string
    date: Date | string
    description: string
    debit: number
    credit: number
  }

  export type ExtractTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    extractId?: SortOrder
    customerId?: SortOrder
    date?: SortOrder
    description?: SortOrder
    debit?: SortOrder
    credit?: SortOrder
    documentType?: SortOrder
    voucherNo?: SortOrder
    dueDate?: SortOrder
    amountBase?: SortOrder
    discount?: SortOrder
    amountNet?: SortOrder
    vat?: SortOrder
    sourceRow?: SortOrder
    createdAt?: SortOrder
  }

  export type ExtractTransactionAvgOrderByAggregateInput = {
    debit?: SortOrder
    credit?: SortOrder
    amountBase?: SortOrder
    discount?: SortOrder
    amountNet?: SortOrder
    vat?: SortOrder
    sourceRow?: SortOrder
  }

  export type ExtractTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    extractId?: SortOrder
    customerId?: SortOrder
    date?: SortOrder
    description?: SortOrder
    debit?: SortOrder
    credit?: SortOrder
    documentType?: SortOrder
    voucherNo?: SortOrder
    dueDate?: SortOrder
    amountBase?: SortOrder
    discount?: SortOrder
    amountNet?: SortOrder
    vat?: SortOrder
    sourceRow?: SortOrder
    createdAt?: SortOrder
  }

  export type ExtractTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    extractId?: SortOrder
    customerId?: SortOrder
    date?: SortOrder
    description?: SortOrder
    debit?: SortOrder
    credit?: SortOrder
    documentType?: SortOrder
    voucherNo?: SortOrder
    dueDate?: SortOrder
    amountBase?: SortOrder
    discount?: SortOrder
    amountNet?: SortOrder
    vat?: SortOrder
    sourceRow?: SortOrder
    createdAt?: SortOrder
  }

  export type ExtractTransactionSumOrderByAggregateInput = {
    debit?: SortOrder
    credit?: SortOrder
    amountBase?: SortOrder
    discount?: SortOrder
    amountNet?: SortOrder
    vat?: SortOrder
    sourceRow?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type BankTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    bankCode?: SortOrder
    direction?: SortOrder
    accountIban?: SortOrder
    maskedAccount?: SortOrder
    transactionDate?: SortOrder
    amount?: SortOrder
    senderName?: SortOrder
    counterpartyName?: SortOrder
    balanceAfter?: SortOrder
    isMatched?: SortOrder
    matchedCustomerId?: SortOrder
    confidenceScore?: SortOrder
    rawEmailData?: SortOrder
    parsedData?: SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrder
  }

  export type BankTransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
    balanceAfter?: SortOrder
    confidenceScore?: SortOrder
  }

  export type BankTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    bankCode?: SortOrder
    direction?: SortOrder
    accountIban?: SortOrder
    maskedAccount?: SortOrder
    transactionDate?: SortOrder
    amount?: SortOrder
    senderName?: SortOrder
    counterpartyName?: SortOrder
    balanceAfter?: SortOrder
    isMatched?: SortOrder
    matchedCustomerId?: SortOrder
    confidenceScore?: SortOrder
    rawEmailData?: SortOrder
    parsedData?: SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrder
  }

  export type BankTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    bankCode?: SortOrder
    direction?: SortOrder
    accountIban?: SortOrder
    maskedAccount?: SortOrder
    transactionDate?: SortOrder
    amount?: SortOrder
    senderName?: SortOrder
    counterpartyName?: SortOrder
    balanceAfter?: SortOrder
    isMatched?: SortOrder
    matchedCustomerId?: SortOrder
    confidenceScore?: SortOrder
    rawEmailData?: SortOrder
    parsedData?: SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrder
  }

  export type BankTransactionSumOrderByAggregateInput = {
    amount?: SortOrder
    balanceAfter?: SortOrder
    confidenceScore?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type BankTransactionRelationFilter = {
    is?: BankTransactionWhereInput
    isNot?: BankTransactionWhereInput
  }

  export type PaymentMatchCountOrderByAggregateInput = {
    id?: SortOrder
    bankTransactionId?: SortOrder
    customerId?: SortOrder
    matchedAmount?: SortOrder
    confidenceScore?: SortOrder
    matchMethod?: SortOrder
    isConfirmed?: SortOrder
    createdAt?: SortOrder
  }

  export type PaymentMatchAvgOrderByAggregateInput = {
    matchedAmount?: SortOrder
    confidenceScore?: SortOrder
  }

  export type PaymentMatchMaxOrderByAggregateInput = {
    id?: SortOrder
    bankTransactionId?: SortOrder
    customerId?: SortOrder
    matchedAmount?: SortOrder
    confidenceScore?: SortOrder
    matchMethod?: SortOrder
    isConfirmed?: SortOrder
    createdAt?: SortOrder
  }

  export type PaymentMatchMinOrderByAggregateInput = {
    id?: SortOrder
    bankTransactionId?: SortOrder
    customerId?: SortOrder
    matchedAmount?: SortOrder
    confidenceScore?: SortOrder
    matchMethod?: SortOrder
    isConfirmed?: SortOrder
    createdAt?: SortOrder
  }

  export type PaymentMatchSumOrderByAggregateInput = {
    matchedAmount?: SortOrder
    confidenceScore?: SortOrder
  }

  export type CashFlowCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    openingBalance?: SortOrder
    closingBalance?: SortOrder
    totalIncome?: SortOrder
    totalExpense?: SortOrder
    difference?: SortOrder
    notes?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type CashFlowAvgOrderByAggregateInput = {
    openingBalance?: SortOrder
    closingBalance?: SortOrder
    totalIncome?: SortOrder
    totalExpense?: SortOrder
    difference?: SortOrder
  }

  export type CashFlowMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    openingBalance?: SortOrder
    closingBalance?: SortOrder
    totalIncome?: SortOrder
    totalExpense?: SortOrder
    difference?: SortOrder
    notes?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type CashFlowMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    openingBalance?: SortOrder
    closingBalance?: SortOrder
    totalIncome?: SortOrder
    totalExpense?: SortOrder
    difference?: SortOrder
    notes?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type CashFlowSumOrderByAggregateInput = {
    openingBalance?: SortOrder
    closingBalance?: SortOrder
    totalIncome?: SortOrder
    totalExpense?: SortOrder
    difference?: SortOrder
  }

  export type ReportCacheCountOrderByAggregateInput = {
    id?: SortOrder
    reportKey?: SortOrder
    data?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type ReportCacheMaxOrderByAggregateInput = {
    id?: SortOrder
    reportKey?: SortOrder
    data?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type ReportCacheMinOrderByAggregateInput = {
    id?: SortOrder
    reportKey?: SortOrder
    data?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    table?: SortOrder
    recordId?: SortOrder
    oldData?: SortOrder
    newData?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    table?: SortOrder
    recordId?: SortOrder
    oldData?: SortOrder
    newData?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    table?: SortOrder
    recordId?: SortOrder
    oldData?: SortOrder
    newData?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type TransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type CategoryCreateNestedManyWithoutUserInput = {
    create?: XOR<CategoryCreateWithoutUserInput, CategoryUncheckedCreateWithoutUserInput> | CategoryCreateWithoutUserInput[] | CategoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutUserInput | CategoryCreateOrConnectWithoutUserInput[]
    createMany?: CategoryCreateManyUserInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type ExtractCreateNestedManyWithoutUserInput = {
    create?: XOR<ExtractCreateWithoutUserInput, ExtractUncheckedCreateWithoutUserInput> | ExtractCreateWithoutUserInput[] | ExtractUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExtractCreateOrConnectWithoutUserInput | ExtractCreateOrConnectWithoutUserInput[]
    createMany?: ExtractCreateManyUserInputEnvelope
    connect?: ExtractWhereUniqueInput | ExtractWhereUniqueInput[]
  }

  export type CashFlowCreateNestedManyWithoutUserInput = {
    create?: XOR<CashFlowCreateWithoutUserInput, CashFlowUncheckedCreateWithoutUserInput> | CashFlowCreateWithoutUserInput[] | CashFlowUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CashFlowCreateOrConnectWithoutUserInput | CashFlowCreateOrConnectWithoutUserInput[]
    createMany?: CashFlowCreateManyUserInputEnvelope
    connect?: CashFlowWhereUniqueInput | CashFlowWhereUniqueInput[]
  }

  export type CustomerCreateNestedManyWithoutUserInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput> | CustomerCreateWithoutUserInput[] | CustomerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput | CustomerCreateOrConnectWithoutUserInput[]
    createMany?: CustomerCreateManyUserInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CategoryCreateWithoutUserInput, CategoryUncheckedCreateWithoutUserInput> | CategoryCreateWithoutUserInput[] | CategoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutUserInput | CategoryCreateOrConnectWithoutUserInput[]
    createMany?: CategoryCreateManyUserInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type ExtractUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ExtractCreateWithoutUserInput, ExtractUncheckedCreateWithoutUserInput> | ExtractCreateWithoutUserInput[] | ExtractUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExtractCreateOrConnectWithoutUserInput | ExtractCreateOrConnectWithoutUserInput[]
    createMany?: ExtractCreateManyUserInputEnvelope
    connect?: ExtractWhereUniqueInput | ExtractWhereUniqueInput[]
  }

  export type CashFlowUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CashFlowCreateWithoutUserInput, CashFlowUncheckedCreateWithoutUserInput> | CashFlowCreateWithoutUserInput[] | CashFlowUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CashFlowCreateOrConnectWithoutUserInput | CashFlowCreateOrConnectWithoutUserInput[]
    createMany?: CashFlowCreateManyUserInputEnvelope
    connect?: CashFlowWhereUniqueInput | CashFlowWhereUniqueInput[]
  }

  export type CustomerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput> | CustomerCreateWithoutUserInput[] | CustomerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput | CustomerCreateOrConnectWithoutUserInput[]
    createMany?: CustomerCreateManyUserInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TransactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutUserInput | TransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutUserInput | TransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutUserInput | TransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type CategoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<CategoryCreateWithoutUserInput, CategoryUncheckedCreateWithoutUserInput> | CategoryCreateWithoutUserInput[] | CategoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutUserInput | CategoryCreateOrConnectWithoutUserInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutUserInput | CategoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CategoryCreateManyUserInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutUserInput | CategoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutUserInput | CategoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type ExtractUpdateManyWithoutUserNestedInput = {
    create?: XOR<ExtractCreateWithoutUserInput, ExtractUncheckedCreateWithoutUserInput> | ExtractCreateWithoutUserInput[] | ExtractUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExtractCreateOrConnectWithoutUserInput | ExtractCreateOrConnectWithoutUserInput[]
    upsert?: ExtractUpsertWithWhereUniqueWithoutUserInput | ExtractUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ExtractCreateManyUserInputEnvelope
    set?: ExtractWhereUniqueInput | ExtractWhereUniqueInput[]
    disconnect?: ExtractWhereUniqueInput | ExtractWhereUniqueInput[]
    delete?: ExtractWhereUniqueInput | ExtractWhereUniqueInput[]
    connect?: ExtractWhereUniqueInput | ExtractWhereUniqueInput[]
    update?: ExtractUpdateWithWhereUniqueWithoutUserInput | ExtractUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ExtractUpdateManyWithWhereWithoutUserInput | ExtractUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ExtractScalarWhereInput | ExtractScalarWhereInput[]
  }

  export type CashFlowUpdateManyWithoutUserNestedInput = {
    create?: XOR<CashFlowCreateWithoutUserInput, CashFlowUncheckedCreateWithoutUserInput> | CashFlowCreateWithoutUserInput[] | CashFlowUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CashFlowCreateOrConnectWithoutUserInput | CashFlowCreateOrConnectWithoutUserInput[]
    upsert?: CashFlowUpsertWithWhereUniqueWithoutUserInput | CashFlowUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CashFlowCreateManyUserInputEnvelope
    set?: CashFlowWhereUniqueInput | CashFlowWhereUniqueInput[]
    disconnect?: CashFlowWhereUniqueInput | CashFlowWhereUniqueInput[]
    delete?: CashFlowWhereUniqueInput | CashFlowWhereUniqueInput[]
    connect?: CashFlowWhereUniqueInput | CashFlowWhereUniqueInput[]
    update?: CashFlowUpdateWithWhereUniqueWithoutUserInput | CashFlowUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CashFlowUpdateManyWithWhereWithoutUserInput | CashFlowUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CashFlowScalarWhereInput | CashFlowScalarWhereInput[]
  }

  export type CustomerUpdateManyWithoutUserNestedInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput> | CustomerCreateWithoutUserInput[] | CustomerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput | CustomerCreateOrConnectWithoutUserInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutUserInput | CustomerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CustomerCreateManyUserInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutUserInput | CustomerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutUserInput | CustomerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutUserInput | TransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutUserInput | TransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutUserInput | TransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CategoryCreateWithoutUserInput, CategoryUncheckedCreateWithoutUserInput> | CategoryCreateWithoutUserInput[] | CategoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutUserInput | CategoryCreateOrConnectWithoutUserInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutUserInput | CategoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CategoryCreateManyUserInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutUserInput | CategoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutUserInput | CategoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type ExtractUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ExtractCreateWithoutUserInput, ExtractUncheckedCreateWithoutUserInput> | ExtractCreateWithoutUserInput[] | ExtractUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExtractCreateOrConnectWithoutUserInput | ExtractCreateOrConnectWithoutUserInput[]
    upsert?: ExtractUpsertWithWhereUniqueWithoutUserInput | ExtractUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ExtractCreateManyUserInputEnvelope
    set?: ExtractWhereUniqueInput | ExtractWhereUniqueInput[]
    disconnect?: ExtractWhereUniqueInput | ExtractWhereUniqueInput[]
    delete?: ExtractWhereUniqueInput | ExtractWhereUniqueInput[]
    connect?: ExtractWhereUniqueInput | ExtractWhereUniqueInput[]
    update?: ExtractUpdateWithWhereUniqueWithoutUserInput | ExtractUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ExtractUpdateManyWithWhereWithoutUserInput | ExtractUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ExtractScalarWhereInput | ExtractScalarWhereInput[]
  }

  export type CashFlowUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CashFlowCreateWithoutUserInput, CashFlowUncheckedCreateWithoutUserInput> | CashFlowCreateWithoutUserInput[] | CashFlowUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CashFlowCreateOrConnectWithoutUserInput | CashFlowCreateOrConnectWithoutUserInput[]
    upsert?: CashFlowUpsertWithWhereUniqueWithoutUserInput | CashFlowUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CashFlowCreateManyUserInputEnvelope
    set?: CashFlowWhereUniqueInput | CashFlowWhereUniqueInput[]
    disconnect?: CashFlowWhereUniqueInput | CashFlowWhereUniqueInput[]
    delete?: CashFlowWhereUniqueInput | CashFlowWhereUniqueInput[]
    connect?: CashFlowWhereUniqueInput | CashFlowWhereUniqueInput[]
    update?: CashFlowUpdateWithWhereUniqueWithoutUserInput | CashFlowUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CashFlowUpdateManyWithWhereWithoutUserInput | CashFlowUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CashFlowScalarWhereInput | CashFlowScalarWhereInput[]
  }

  export type CustomerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput> | CustomerCreateWithoutUserInput[] | CustomerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput | CustomerCreateOrConnectWithoutUserInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutUserInput | CustomerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CustomerCreateManyUserInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutUserInput | CustomerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutUserInput | CustomerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCustomersInput = {
    create?: XOR<UserCreateWithoutCustomersInput, UserUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCustomersInput
    connect?: UserWhereUniqueInput
  }

  export type TransactionCreateNestedManyWithoutCustomerInput = {
    create?: XOR<TransactionCreateWithoutCustomerInput, TransactionUncheckedCreateWithoutCustomerInput> | TransactionCreateWithoutCustomerInput[] | TransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCustomerInput | TransactionCreateOrConnectWithoutCustomerInput[]
    createMany?: TransactionCreateManyCustomerInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type ExtractTransactionCreateNestedManyWithoutCustomerInput = {
    create?: XOR<ExtractTransactionCreateWithoutCustomerInput, ExtractTransactionUncheckedCreateWithoutCustomerInput> | ExtractTransactionCreateWithoutCustomerInput[] | ExtractTransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: ExtractTransactionCreateOrConnectWithoutCustomerInput | ExtractTransactionCreateOrConnectWithoutCustomerInput[]
    createMany?: ExtractTransactionCreateManyCustomerInputEnvelope
    connect?: ExtractTransactionWhereUniqueInput | ExtractTransactionWhereUniqueInput[]
  }

  export type BankTransactionCreateNestedManyWithoutCustomerInput = {
    create?: XOR<BankTransactionCreateWithoutCustomerInput, BankTransactionUncheckedCreateWithoutCustomerInput> | BankTransactionCreateWithoutCustomerInput[] | BankTransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: BankTransactionCreateOrConnectWithoutCustomerInput | BankTransactionCreateOrConnectWithoutCustomerInput[]
    createMany?: BankTransactionCreateManyCustomerInputEnvelope
    connect?: BankTransactionWhereUniqueInput | BankTransactionWhereUniqueInput[]
  }

  export type PaymentMatchCreateNestedManyWithoutCustomerInput = {
    create?: XOR<PaymentMatchCreateWithoutCustomerInput, PaymentMatchUncheckedCreateWithoutCustomerInput> | PaymentMatchCreateWithoutCustomerInput[] | PaymentMatchUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PaymentMatchCreateOrConnectWithoutCustomerInput | PaymentMatchCreateOrConnectWithoutCustomerInput[]
    createMany?: PaymentMatchCreateManyCustomerInputEnvelope
    connect?: PaymentMatchWhereUniqueInput | PaymentMatchWhereUniqueInput[]
  }

  export type BalanceCreateNestedOneWithoutCustomerInput = {
    create?: XOR<BalanceCreateWithoutCustomerInput, BalanceUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: BalanceCreateOrConnectWithoutCustomerInput
    connect?: BalanceWhereUniqueInput
  }

  export type TransactionUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<TransactionCreateWithoutCustomerInput, TransactionUncheckedCreateWithoutCustomerInput> | TransactionCreateWithoutCustomerInput[] | TransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCustomerInput | TransactionCreateOrConnectWithoutCustomerInput[]
    createMany?: TransactionCreateManyCustomerInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type ExtractTransactionUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<ExtractTransactionCreateWithoutCustomerInput, ExtractTransactionUncheckedCreateWithoutCustomerInput> | ExtractTransactionCreateWithoutCustomerInput[] | ExtractTransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: ExtractTransactionCreateOrConnectWithoutCustomerInput | ExtractTransactionCreateOrConnectWithoutCustomerInput[]
    createMany?: ExtractTransactionCreateManyCustomerInputEnvelope
    connect?: ExtractTransactionWhereUniqueInput | ExtractTransactionWhereUniqueInput[]
  }

  export type BankTransactionUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<BankTransactionCreateWithoutCustomerInput, BankTransactionUncheckedCreateWithoutCustomerInput> | BankTransactionCreateWithoutCustomerInput[] | BankTransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: BankTransactionCreateOrConnectWithoutCustomerInput | BankTransactionCreateOrConnectWithoutCustomerInput[]
    createMany?: BankTransactionCreateManyCustomerInputEnvelope
    connect?: BankTransactionWhereUniqueInput | BankTransactionWhereUniqueInput[]
  }

  export type PaymentMatchUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<PaymentMatchCreateWithoutCustomerInput, PaymentMatchUncheckedCreateWithoutCustomerInput> | PaymentMatchCreateWithoutCustomerInput[] | PaymentMatchUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PaymentMatchCreateOrConnectWithoutCustomerInput | PaymentMatchCreateOrConnectWithoutCustomerInput[]
    createMany?: PaymentMatchCreateManyCustomerInputEnvelope
    connect?: PaymentMatchWhereUniqueInput | PaymentMatchWhereUniqueInput[]
  }

  export type BalanceUncheckedCreateNestedOneWithoutCustomerInput = {
    create?: XOR<BalanceCreateWithoutCustomerInput, BalanceUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: BalanceCreateOrConnectWithoutCustomerInput
    connect?: BalanceWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutCustomersNestedInput = {
    create?: XOR<UserCreateWithoutCustomersInput, UserUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCustomersInput
    upsert?: UserUpsertWithoutCustomersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCustomersInput, UserUpdateWithoutCustomersInput>, UserUncheckedUpdateWithoutCustomersInput>
  }

  export type TransactionUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<TransactionCreateWithoutCustomerInput, TransactionUncheckedCreateWithoutCustomerInput> | TransactionCreateWithoutCustomerInput[] | TransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCustomerInput | TransactionCreateOrConnectWithoutCustomerInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutCustomerInput | TransactionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: TransactionCreateManyCustomerInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutCustomerInput | TransactionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutCustomerInput | TransactionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type ExtractTransactionUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<ExtractTransactionCreateWithoutCustomerInput, ExtractTransactionUncheckedCreateWithoutCustomerInput> | ExtractTransactionCreateWithoutCustomerInput[] | ExtractTransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: ExtractTransactionCreateOrConnectWithoutCustomerInput | ExtractTransactionCreateOrConnectWithoutCustomerInput[]
    upsert?: ExtractTransactionUpsertWithWhereUniqueWithoutCustomerInput | ExtractTransactionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: ExtractTransactionCreateManyCustomerInputEnvelope
    set?: ExtractTransactionWhereUniqueInput | ExtractTransactionWhereUniqueInput[]
    disconnect?: ExtractTransactionWhereUniqueInput | ExtractTransactionWhereUniqueInput[]
    delete?: ExtractTransactionWhereUniqueInput | ExtractTransactionWhereUniqueInput[]
    connect?: ExtractTransactionWhereUniqueInput | ExtractTransactionWhereUniqueInput[]
    update?: ExtractTransactionUpdateWithWhereUniqueWithoutCustomerInput | ExtractTransactionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: ExtractTransactionUpdateManyWithWhereWithoutCustomerInput | ExtractTransactionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: ExtractTransactionScalarWhereInput | ExtractTransactionScalarWhereInput[]
  }

  export type BankTransactionUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<BankTransactionCreateWithoutCustomerInput, BankTransactionUncheckedCreateWithoutCustomerInput> | BankTransactionCreateWithoutCustomerInput[] | BankTransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: BankTransactionCreateOrConnectWithoutCustomerInput | BankTransactionCreateOrConnectWithoutCustomerInput[]
    upsert?: BankTransactionUpsertWithWhereUniqueWithoutCustomerInput | BankTransactionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: BankTransactionCreateManyCustomerInputEnvelope
    set?: BankTransactionWhereUniqueInput | BankTransactionWhereUniqueInput[]
    disconnect?: BankTransactionWhereUniqueInput | BankTransactionWhereUniqueInput[]
    delete?: BankTransactionWhereUniqueInput | BankTransactionWhereUniqueInput[]
    connect?: BankTransactionWhereUniqueInput | BankTransactionWhereUniqueInput[]
    update?: BankTransactionUpdateWithWhereUniqueWithoutCustomerInput | BankTransactionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: BankTransactionUpdateManyWithWhereWithoutCustomerInput | BankTransactionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: BankTransactionScalarWhereInput | BankTransactionScalarWhereInput[]
  }

  export type PaymentMatchUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<PaymentMatchCreateWithoutCustomerInput, PaymentMatchUncheckedCreateWithoutCustomerInput> | PaymentMatchCreateWithoutCustomerInput[] | PaymentMatchUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PaymentMatchCreateOrConnectWithoutCustomerInput | PaymentMatchCreateOrConnectWithoutCustomerInput[]
    upsert?: PaymentMatchUpsertWithWhereUniqueWithoutCustomerInput | PaymentMatchUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: PaymentMatchCreateManyCustomerInputEnvelope
    set?: PaymentMatchWhereUniqueInput | PaymentMatchWhereUniqueInput[]
    disconnect?: PaymentMatchWhereUniqueInput | PaymentMatchWhereUniqueInput[]
    delete?: PaymentMatchWhereUniqueInput | PaymentMatchWhereUniqueInput[]
    connect?: PaymentMatchWhereUniqueInput | PaymentMatchWhereUniqueInput[]
    update?: PaymentMatchUpdateWithWhereUniqueWithoutCustomerInput | PaymentMatchUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: PaymentMatchUpdateManyWithWhereWithoutCustomerInput | PaymentMatchUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: PaymentMatchScalarWhereInput | PaymentMatchScalarWhereInput[]
  }

  export type BalanceUpdateOneWithoutCustomerNestedInput = {
    create?: XOR<BalanceCreateWithoutCustomerInput, BalanceUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: BalanceCreateOrConnectWithoutCustomerInput
    upsert?: BalanceUpsertWithoutCustomerInput
    disconnect?: BalanceWhereInput | boolean
    delete?: BalanceWhereInput | boolean
    connect?: BalanceWhereUniqueInput
    update?: XOR<XOR<BalanceUpdateToOneWithWhereWithoutCustomerInput, BalanceUpdateWithoutCustomerInput>, BalanceUncheckedUpdateWithoutCustomerInput>
  }

  export type TransactionUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<TransactionCreateWithoutCustomerInput, TransactionUncheckedCreateWithoutCustomerInput> | TransactionCreateWithoutCustomerInput[] | TransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCustomerInput | TransactionCreateOrConnectWithoutCustomerInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutCustomerInput | TransactionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: TransactionCreateManyCustomerInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutCustomerInput | TransactionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutCustomerInput | TransactionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type ExtractTransactionUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<ExtractTransactionCreateWithoutCustomerInput, ExtractTransactionUncheckedCreateWithoutCustomerInput> | ExtractTransactionCreateWithoutCustomerInput[] | ExtractTransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: ExtractTransactionCreateOrConnectWithoutCustomerInput | ExtractTransactionCreateOrConnectWithoutCustomerInput[]
    upsert?: ExtractTransactionUpsertWithWhereUniqueWithoutCustomerInput | ExtractTransactionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: ExtractTransactionCreateManyCustomerInputEnvelope
    set?: ExtractTransactionWhereUniqueInput | ExtractTransactionWhereUniqueInput[]
    disconnect?: ExtractTransactionWhereUniqueInput | ExtractTransactionWhereUniqueInput[]
    delete?: ExtractTransactionWhereUniqueInput | ExtractTransactionWhereUniqueInput[]
    connect?: ExtractTransactionWhereUniqueInput | ExtractTransactionWhereUniqueInput[]
    update?: ExtractTransactionUpdateWithWhereUniqueWithoutCustomerInput | ExtractTransactionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: ExtractTransactionUpdateManyWithWhereWithoutCustomerInput | ExtractTransactionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: ExtractTransactionScalarWhereInput | ExtractTransactionScalarWhereInput[]
  }

  export type BankTransactionUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<BankTransactionCreateWithoutCustomerInput, BankTransactionUncheckedCreateWithoutCustomerInput> | BankTransactionCreateWithoutCustomerInput[] | BankTransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: BankTransactionCreateOrConnectWithoutCustomerInput | BankTransactionCreateOrConnectWithoutCustomerInput[]
    upsert?: BankTransactionUpsertWithWhereUniqueWithoutCustomerInput | BankTransactionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: BankTransactionCreateManyCustomerInputEnvelope
    set?: BankTransactionWhereUniqueInput | BankTransactionWhereUniqueInput[]
    disconnect?: BankTransactionWhereUniqueInput | BankTransactionWhereUniqueInput[]
    delete?: BankTransactionWhereUniqueInput | BankTransactionWhereUniqueInput[]
    connect?: BankTransactionWhereUniqueInput | BankTransactionWhereUniqueInput[]
    update?: BankTransactionUpdateWithWhereUniqueWithoutCustomerInput | BankTransactionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: BankTransactionUpdateManyWithWhereWithoutCustomerInput | BankTransactionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: BankTransactionScalarWhereInput | BankTransactionScalarWhereInput[]
  }

  export type PaymentMatchUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<PaymentMatchCreateWithoutCustomerInput, PaymentMatchUncheckedCreateWithoutCustomerInput> | PaymentMatchCreateWithoutCustomerInput[] | PaymentMatchUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PaymentMatchCreateOrConnectWithoutCustomerInput | PaymentMatchCreateOrConnectWithoutCustomerInput[]
    upsert?: PaymentMatchUpsertWithWhereUniqueWithoutCustomerInput | PaymentMatchUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: PaymentMatchCreateManyCustomerInputEnvelope
    set?: PaymentMatchWhereUniqueInput | PaymentMatchWhereUniqueInput[]
    disconnect?: PaymentMatchWhereUniqueInput | PaymentMatchWhereUniqueInput[]
    delete?: PaymentMatchWhereUniqueInput | PaymentMatchWhereUniqueInput[]
    connect?: PaymentMatchWhereUniqueInput | PaymentMatchWhereUniqueInput[]
    update?: PaymentMatchUpdateWithWhereUniqueWithoutCustomerInput | PaymentMatchUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: PaymentMatchUpdateManyWithWhereWithoutCustomerInput | PaymentMatchUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: PaymentMatchScalarWhereInput | PaymentMatchScalarWhereInput[]
  }

  export type BalanceUncheckedUpdateOneWithoutCustomerNestedInput = {
    create?: XOR<BalanceCreateWithoutCustomerInput, BalanceUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: BalanceCreateOrConnectWithoutCustomerInput
    upsert?: BalanceUpsertWithoutCustomerInput
    disconnect?: BalanceWhereInput | boolean
    delete?: BalanceWhereInput | boolean
    connect?: BalanceWhereUniqueInput
    update?: XOR<XOR<BalanceUpdateToOneWithWhereWithoutCustomerInput, BalanceUpdateWithoutCustomerInput>, BalanceUncheckedUpdateWithoutCustomerInput>
  }

  export type CategoryCreateNestedOneWithoutChildrenInput = {
    create?: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutChildrenInput
    connect?: CategoryWhereUniqueInput
  }

  export type CategoryCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<UserCreateWithoutCategoriesInput, UserUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCategoriesInput
    connect?: UserWhereUniqueInput
  }

  export type TransactionCreateNestedManyWithoutCategoryInput = {
    create?: XOR<TransactionCreateWithoutCategoryInput, TransactionUncheckedCreateWithoutCategoryInput> | TransactionCreateWithoutCategoryInput[] | TransactionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCategoryInput | TransactionCreateOrConnectWithoutCategoryInput[]
    createMany?: TransactionCreateManyCategoryInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<TransactionCreateWithoutCategoryInput, TransactionUncheckedCreateWithoutCategoryInput> | TransactionCreateWithoutCategoryInput[] | TransactionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCategoryInput | TransactionCreateOrConnectWithoutCategoryInput[]
    createMany?: TransactionCreateManyCategoryInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type CategoryUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutChildrenInput
    upsert?: CategoryUpsertWithoutChildrenInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutChildrenInput, CategoryUpdateWithoutChildrenInput>, CategoryUncheckedUpdateWithoutChildrenInput>
  }

  export type CategoryUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type UserUpdateOneWithoutCategoriesNestedInput = {
    create?: XOR<UserCreateWithoutCategoriesInput, UserUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCategoriesInput
    upsert?: UserUpsertWithoutCategoriesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCategoriesInput, UserUpdateWithoutCategoriesInput>, UserUncheckedUpdateWithoutCategoriesInput>
  }

  export type TransactionUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<TransactionCreateWithoutCategoryInput, TransactionUncheckedCreateWithoutCategoryInput> | TransactionCreateWithoutCategoryInput[] | TransactionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCategoryInput | TransactionCreateOrConnectWithoutCategoryInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutCategoryInput | TransactionUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: TransactionCreateManyCategoryInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutCategoryInput | TransactionUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutCategoryInput | TransactionUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<TransactionCreateWithoutCategoryInput, TransactionUncheckedCreateWithoutCategoryInput> | TransactionCreateWithoutCategoryInput[] | TransactionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCategoryInput | TransactionCreateOrConnectWithoutCategoryInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutCategoryInput | TransactionUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: TransactionCreateManyCategoryInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutCategoryInput | TransactionUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutCategoryInput | TransactionUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<CategoryCreateWithoutTransactionsInput, CategoryUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutTransactionsInput
    connect?: CategoryWhereUniqueInput
  }

  export type CustomerCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<CustomerCreateWithoutTransactionsInput, CustomerUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutTransactionsInput
    connect?: CustomerWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CategoryUpdateOneWithoutTransactionsNestedInput = {
    create?: XOR<CategoryCreateWithoutTransactionsInput, CategoryUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutTransactionsInput
    upsert?: CategoryUpsertWithoutTransactionsInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutTransactionsInput, CategoryUpdateWithoutTransactionsInput>, CategoryUncheckedUpdateWithoutTransactionsInput>
  }

  export type CustomerUpdateOneWithoutTransactionsNestedInput = {
    create?: XOR<CustomerCreateWithoutTransactionsInput, CustomerUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutTransactionsInput
    upsert?: CustomerUpsertWithoutTransactionsInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutTransactionsInput, CustomerUpdateWithoutTransactionsInput>, CustomerUncheckedUpdateWithoutTransactionsInput>
  }

  export type UserUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    upsert?: UserUpsertWithoutTransactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTransactionsInput, UserUpdateWithoutTransactionsInput>, UserUncheckedUpdateWithoutTransactionsInput>
  }

  export type CustomerCreateNestedOneWithoutBalanceInput = {
    create?: XOR<CustomerCreateWithoutBalanceInput, CustomerUncheckedCreateWithoutBalanceInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutBalanceInput
    connect?: CustomerWhereUniqueInput
  }

  export type CustomerUpdateOneRequiredWithoutBalanceNestedInput = {
    create?: XOR<CustomerCreateWithoutBalanceInput, CustomerUncheckedCreateWithoutBalanceInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutBalanceInput
    upsert?: CustomerUpsertWithoutBalanceInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutBalanceInput, CustomerUpdateWithoutBalanceInput>, CustomerUncheckedUpdateWithoutBalanceInput>
  }

  export type UserCreateNestedOneWithoutExtractsInput = {
    create?: XOR<UserCreateWithoutExtractsInput, UserUncheckedCreateWithoutExtractsInput>
    connectOrCreate?: UserCreateOrConnectWithoutExtractsInput
    connect?: UserWhereUniqueInput
  }

  export type ExtractTransactionCreateNestedManyWithoutExtractInput = {
    create?: XOR<ExtractTransactionCreateWithoutExtractInput, ExtractTransactionUncheckedCreateWithoutExtractInput> | ExtractTransactionCreateWithoutExtractInput[] | ExtractTransactionUncheckedCreateWithoutExtractInput[]
    connectOrCreate?: ExtractTransactionCreateOrConnectWithoutExtractInput | ExtractTransactionCreateOrConnectWithoutExtractInput[]
    createMany?: ExtractTransactionCreateManyExtractInputEnvelope
    connect?: ExtractTransactionWhereUniqueInput | ExtractTransactionWhereUniqueInput[]
  }

  export type ExtractTransactionUncheckedCreateNestedManyWithoutExtractInput = {
    create?: XOR<ExtractTransactionCreateWithoutExtractInput, ExtractTransactionUncheckedCreateWithoutExtractInput> | ExtractTransactionCreateWithoutExtractInput[] | ExtractTransactionUncheckedCreateWithoutExtractInput[]
    connectOrCreate?: ExtractTransactionCreateOrConnectWithoutExtractInput | ExtractTransactionCreateOrConnectWithoutExtractInput[]
    createMany?: ExtractTransactionCreateManyExtractInputEnvelope
    connect?: ExtractTransactionWhereUniqueInput | ExtractTransactionWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutExtractsNestedInput = {
    create?: XOR<UserCreateWithoutExtractsInput, UserUncheckedCreateWithoutExtractsInput>
    connectOrCreate?: UserCreateOrConnectWithoutExtractsInput
    upsert?: UserUpsertWithoutExtractsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutExtractsInput, UserUpdateWithoutExtractsInput>, UserUncheckedUpdateWithoutExtractsInput>
  }

  export type ExtractTransactionUpdateManyWithoutExtractNestedInput = {
    create?: XOR<ExtractTransactionCreateWithoutExtractInput, ExtractTransactionUncheckedCreateWithoutExtractInput> | ExtractTransactionCreateWithoutExtractInput[] | ExtractTransactionUncheckedCreateWithoutExtractInput[]
    connectOrCreate?: ExtractTransactionCreateOrConnectWithoutExtractInput | ExtractTransactionCreateOrConnectWithoutExtractInput[]
    upsert?: ExtractTransactionUpsertWithWhereUniqueWithoutExtractInput | ExtractTransactionUpsertWithWhereUniqueWithoutExtractInput[]
    createMany?: ExtractTransactionCreateManyExtractInputEnvelope
    set?: ExtractTransactionWhereUniqueInput | ExtractTransactionWhereUniqueInput[]
    disconnect?: ExtractTransactionWhereUniqueInput | ExtractTransactionWhereUniqueInput[]
    delete?: ExtractTransactionWhereUniqueInput | ExtractTransactionWhereUniqueInput[]
    connect?: ExtractTransactionWhereUniqueInput | ExtractTransactionWhereUniqueInput[]
    update?: ExtractTransactionUpdateWithWhereUniqueWithoutExtractInput | ExtractTransactionUpdateWithWhereUniqueWithoutExtractInput[]
    updateMany?: ExtractTransactionUpdateManyWithWhereWithoutExtractInput | ExtractTransactionUpdateManyWithWhereWithoutExtractInput[]
    deleteMany?: ExtractTransactionScalarWhereInput | ExtractTransactionScalarWhereInput[]
  }

  export type ExtractTransactionUncheckedUpdateManyWithoutExtractNestedInput = {
    create?: XOR<ExtractTransactionCreateWithoutExtractInput, ExtractTransactionUncheckedCreateWithoutExtractInput> | ExtractTransactionCreateWithoutExtractInput[] | ExtractTransactionUncheckedCreateWithoutExtractInput[]
    connectOrCreate?: ExtractTransactionCreateOrConnectWithoutExtractInput | ExtractTransactionCreateOrConnectWithoutExtractInput[]
    upsert?: ExtractTransactionUpsertWithWhereUniqueWithoutExtractInput | ExtractTransactionUpsertWithWhereUniqueWithoutExtractInput[]
    createMany?: ExtractTransactionCreateManyExtractInputEnvelope
    set?: ExtractTransactionWhereUniqueInput | ExtractTransactionWhereUniqueInput[]
    disconnect?: ExtractTransactionWhereUniqueInput | ExtractTransactionWhereUniqueInput[]
    delete?: ExtractTransactionWhereUniqueInput | ExtractTransactionWhereUniqueInput[]
    connect?: ExtractTransactionWhereUniqueInput | ExtractTransactionWhereUniqueInput[]
    update?: ExtractTransactionUpdateWithWhereUniqueWithoutExtractInput | ExtractTransactionUpdateWithWhereUniqueWithoutExtractInput[]
    updateMany?: ExtractTransactionUpdateManyWithWhereWithoutExtractInput | ExtractTransactionUpdateManyWithWhereWithoutExtractInput[]
    deleteMany?: ExtractTransactionScalarWhereInput | ExtractTransactionScalarWhereInput[]
  }

  export type ExtractCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<ExtractCreateWithoutTransactionsInput, ExtractUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: ExtractCreateOrConnectWithoutTransactionsInput
    connect?: ExtractWhereUniqueInput
  }

  export type CustomerCreateNestedOneWithoutExtractTransactionsInput = {
    create?: XOR<CustomerCreateWithoutExtractTransactionsInput, CustomerUncheckedCreateWithoutExtractTransactionsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutExtractTransactionsInput
    connect?: CustomerWhereUniqueInput
  }

  export type ExtractUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<ExtractCreateWithoutTransactionsInput, ExtractUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: ExtractCreateOrConnectWithoutTransactionsInput
    upsert?: ExtractUpsertWithoutTransactionsInput
    connect?: ExtractWhereUniqueInput
    update?: XOR<XOR<ExtractUpdateToOneWithWhereWithoutTransactionsInput, ExtractUpdateWithoutTransactionsInput>, ExtractUncheckedUpdateWithoutTransactionsInput>
  }

  export type CustomerUpdateOneWithoutExtractTransactionsNestedInput = {
    create?: XOR<CustomerCreateWithoutExtractTransactionsInput, CustomerUncheckedCreateWithoutExtractTransactionsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutExtractTransactionsInput
    upsert?: CustomerUpsertWithoutExtractTransactionsInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutExtractTransactionsInput, CustomerUpdateWithoutExtractTransactionsInput>, CustomerUncheckedUpdateWithoutExtractTransactionsInput>
  }

  export type CustomerCreateNestedOneWithoutBankTransactionsInput = {
    create?: XOR<CustomerCreateWithoutBankTransactionsInput, CustomerUncheckedCreateWithoutBankTransactionsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutBankTransactionsInput
    connect?: CustomerWhereUniqueInput
  }

  export type PaymentMatchCreateNestedManyWithoutBankTransactionInput = {
    create?: XOR<PaymentMatchCreateWithoutBankTransactionInput, PaymentMatchUncheckedCreateWithoutBankTransactionInput> | PaymentMatchCreateWithoutBankTransactionInput[] | PaymentMatchUncheckedCreateWithoutBankTransactionInput[]
    connectOrCreate?: PaymentMatchCreateOrConnectWithoutBankTransactionInput | PaymentMatchCreateOrConnectWithoutBankTransactionInput[]
    createMany?: PaymentMatchCreateManyBankTransactionInputEnvelope
    connect?: PaymentMatchWhereUniqueInput | PaymentMatchWhereUniqueInput[]
  }

  export type PaymentMatchUncheckedCreateNestedManyWithoutBankTransactionInput = {
    create?: XOR<PaymentMatchCreateWithoutBankTransactionInput, PaymentMatchUncheckedCreateWithoutBankTransactionInput> | PaymentMatchCreateWithoutBankTransactionInput[] | PaymentMatchUncheckedCreateWithoutBankTransactionInput[]
    connectOrCreate?: PaymentMatchCreateOrConnectWithoutBankTransactionInput | PaymentMatchCreateOrConnectWithoutBankTransactionInput[]
    createMany?: PaymentMatchCreateManyBankTransactionInputEnvelope
    connect?: PaymentMatchWhereUniqueInput | PaymentMatchWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CustomerUpdateOneWithoutBankTransactionsNestedInput = {
    create?: XOR<CustomerCreateWithoutBankTransactionsInput, CustomerUncheckedCreateWithoutBankTransactionsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutBankTransactionsInput
    upsert?: CustomerUpsertWithoutBankTransactionsInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutBankTransactionsInput, CustomerUpdateWithoutBankTransactionsInput>, CustomerUncheckedUpdateWithoutBankTransactionsInput>
  }

  export type PaymentMatchUpdateManyWithoutBankTransactionNestedInput = {
    create?: XOR<PaymentMatchCreateWithoutBankTransactionInput, PaymentMatchUncheckedCreateWithoutBankTransactionInput> | PaymentMatchCreateWithoutBankTransactionInput[] | PaymentMatchUncheckedCreateWithoutBankTransactionInput[]
    connectOrCreate?: PaymentMatchCreateOrConnectWithoutBankTransactionInput | PaymentMatchCreateOrConnectWithoutBankTransactionInput[]
    upsert?: PaymentMatchUpsertWithWhereUniqueWithoutBankTransactionInput | PaymentMatchUpsertWithWhereUniqueWithoutBankTransactionInput[]
    createMany?: PaymentMatchCreateManyBankTransactionInputEnvelope
    set?: PaymentMatchWhereUniqueInput | PaymentMatchWhereUniqueInput[]
    disconnect?: PaymentMatchWhereUniqueInput | PaymentMatchWhereUniqueInput[]
    delete?: PaymentMatchWhereUniqueInput | PaymentMatchWhereUniqueInput[]
    connect?: PaymentMatchWhereUniqueInput | PaymentMatchWhereUniqueInput[]
    update?: PaymentMatchUpdateWithWhereUniqueWithoutBankTransactionInput | PaymentMatchUpdateWithWhereUniqueWithoutBankTransactionInput[]
    updateMany?: PaymentMatchUpdateManyWithWhereWithoutBankTransactionInput | PaymentMatchUpdateManyWithWhereWithoutBankTransactionInput[]
    deleteMany?: PaymentMatchScalarWhereInput | PaymentMatchScalarWhereInput[]
  }

  export type PaymentMatchUncheckedUpdateManyWithoutBankTransactionNestedInput = {
    create?: XOR<PaymentMatchCreateWithoutBankTransactionInput, PaymentMatchUncheckedCreateWithoutBankTransactionInput> | PaymentMatchCreateWithoutBankTransactionInput[] | PaymentMatchUncheckedCreateWithoutBankTransactionInput[]
    connectOrCreate?: PaymentMatchCreateOrConnectWithoutBankTransactionInput | PaymentMatchCreateOrConnectWithoutBankTransactionInput[]
    upsert?: PaymentMatchUpsertWithWhereUniqueWithoutBankTransactionInput | PaymentMatchUpsertWithWhereUniqueWithoutBankTransactionInput[]
    createMany?: PaymentMatchCreateManyBankTransactionInputEnvelope
    set?: PaymentMatchWhereUniqueInput | PaymentMatchWhereUniqueInput[]
    disconnect?: PaymentMatchWhereUniqueInput | PaymentMatchWhereUniqueInput[]
    delete?: PaymentMatchWhereUniqueInput | PaymentMatchWhereUniqueInput[]
    connect?: PaymentMatchWhereUniqueInput | PaymentMatchWhereUniqueInput[]
    update?: PaymentMatchUpdateWithWhereUniqueWithoutBankTransactionInput | PaymentMatchUpdateWithWhereUniqueWithoutBankTransactionInput[]
    updateMany?: PaymentMatchUpdateManyWithWhereWithoutBankTransactionInput | PaymentMatchUpdateManyWithWhereWithoutBankTransactionInput[]
    deleteMany?: PaymentMatchScalarWhereInput | PaymentMatchScalarWhereInput[]
  }

  export type BankTransactionCreateNestedOneWithoutPaymentMatchesInput = {
    create?: XOR<BankTransactionCreateWithoutPaymentMatchesInput, BankTransactionUncheckedCreateWithoutPaymentMatchesInput>
    connectOrCreate?: BankTransactionCreateOrConnectWithoutPaymentMatchesInput
    connect?: BankTransactionWhereUniqueInput
  }

  export type CustomerCreateNestedOneWithoutPaymentMatchesInput = {
    create?: XOR<CustomerCreateWithoutPaymentMatchesInput, CustomerUncheckedCreateWithoutPaymentMatchesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutPaymentMatchesInput
    connect?: CustomerWhereUniqueInput
  }

  export type BankTransactionUpdateOneRequiredWithoutPaymentMatchesNestedInput = {
    create?: XOR<BankTransactionCreateWithoutPaymentMatchesInput, BankTransactionUncheckedCreateWithoutPaymentMatchesInput>
    connectOrCreate?: BankTransactionCreateOrConnectWithoutPaymentMatchesInput
    upsert?: BankTransactionUpsertWithoutPaymentMatchesInput
    connect?: BankTransactionWhereUniqueInput
    update?: XOR<XOR<BankTransactionUpdateToOneWithWhereWithoutPaymentMatchesInput, BankTransactionUpdateWithoutPaymentMatchesInput>, BankTransactionUncheckedUpdateWithoutPaymentMatchesInput>
  }

  export type CustomerUpdateOneRequiredWithoutPaymentMatchesNestedInput = {
    create?: XOR<CustomerCreateWithoutPaymentMatchesInput, CustomerUncheckedCreateWithoutPaymentMatchesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutPaymentMatchesInput
    upsert?: CustomerUpsertWithoutPaymentMatchesInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutPaymentMatchesInput, CustomerUpdateWithoutPaymentMatchesInput>, CustomerUncheckedUpdateWithoutPaymentMatchesInput>
  }

  export type UserCreateNestedOneWithoutCashFlowsInput = {
    create?: XOR<UserCreateWithoutCashFlowsInput, UserUncheckedCreateWithoutCashFlowsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCashFlowsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCashFlowsNestedInput = {
    create?: XOR<UserCreateWithoutCashFlowsInput, UserUncheckedCreateWithoutCashFlowsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCashFlowsInput
    upsert?: UserUpsertWithoutCashFlowsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCashFlowsInput, UserUpdateWithoutCashFlowsInput>, UserUncheckedUpdateWithoutCashFlowsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type TransactionCreateWithoutUserInput = {
    id?: string
    type: string
    amount: number
    currency?: string
    description?: string | null
    date: Date | string
    sourceFile?: string | null
    sourceRow?: number | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category?: CategoryCreateNestedOneWithoutTransactionsInput
    customer?: CustomerCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    amount: number
    currency?: string
    description?: string | null
    date: Date | string
    categoryId?: string | null
    customerId?: string | null
    sourceFile?: string | null
    sourceRow?: number | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutUserInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput>
  }

  export type TransactionCreateManyUserInputEnvelope = {
    data: TransactionCreateManyUserInput | TransactionCreateManyUserInput[]
  }

  export type CategoryCreateWithoutUserInput = {
    id?: string
    name: string
    type: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    children?: CategoryCreateNestedManyWithoutParentInput
    transactions?: TransactionCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    type: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutUserInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutUserInput, CategoryUncheckedCreateWithoutUserInput>
  }

  export type CategoryCreateManyUserInputEnvelope = {
    data: CategoryCreateManyUserInput | CategoryCreateManyUserInput[]
  }

  export type ExtractCreateWithoutUserInput = {
    id?: string
    fileName: string
    uploadDate?: Date | string
    status: string
    totalRows?: number
    processedRows?: number
    errorRows?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: ExtractTransactionCreateNestedManyWithoutExtractInput
  }

  export type ExtractUncheckedCreateWithoutUserInput = {
    id?: string
    fileName: string
    uploadDate?: Date | string
    status: string
    totalRows?: number
    processedRows?: number
    errorRows?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: ExtractTransactionUncheckedCreateNestedManyWithoutExtractInput
  }

  export type ExtractCreateOrConnectWithoutUserInput = {
    where: ExtractWhereUniqueInput
    create: XOR<ExtractCreateWithoutUserInput, ExtractUncheckedCreateWithoutUserInput>
  }

  export type ExtractCreateManyUserInputEnvelope = {
    data: ExtractCreateManyUserInput | ExtractCreateManyUserInput[]
  }

  export type CashFlowCreateWithoutUserInput = {
    id?: string
    date: Date | string
    openingBalance: number
    closingBalance: number
    totalIncome?: number
    totalExpense?: number
    difference?: number
    notes?: string | null
    createdAt?: Date | string
  }

  export type CashFlowUncheckedCreateWithoutUserInput = {
    id?: string
    date: Date | string
    openingBalance: number
    closingBalance: number
    totalIncome?: number
    totalExpense?: number
    difference?: number
    notes?: string | null
    createdAt?: Date | string
  }

  export type CashFlowCreateOrConnectWithoutUserInput = {
    where: CashFlowWhereUniqueInput
    create: XOR<CashFlowCreateWithoutUserInput, CashFlowUncheckedCreateWithoutUserInput>
  }

  export type CashFlowCreateManyUserInputEnvelope = {
    data: CashFlowCreateManyUserInput | CashFlowCreateManyUserInput[]
  }

  export type CustomerCreateWithoutUserInput = {
    id?: string
    code: string
    name: string
    originalName?: string | null
    nameVariations?: string | null
    phone?: string | null
    address?: string | null
    type?: string
    accountType?: string | null
    lastPaymentDate?: Date | string | null
    paymentPattern?: string | null
    dueDays?: number | null
    tag1?: string | null
    tag2?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionCreateNestedManyWithoutCustomerInput
    extractTransactions?: ExtractTransactionCreateNestedManyWithoutCustomerInput
    bankTransactions?: BankTransactionCreateNestedManyWithoutCustomerInput
    paymentMatches?: PaymentMatchCreateNestedManyWithoutCustomerInput
    balance?: BalanceCreateNestedOneWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutUserInput = {
    id?: string
    code: string
    name: string
    originalName?: string | null
    nameVariations?: string | null
    phone?: string | null
    address?: string | null
    type?: string
    accountType?: string | null
    lastPaymentDate?: Date | string | null
    paymentPattern?: string | null
    dueDays?: number | null
    tag1?: string | null
    tag2?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutCustomerInput
    extractTransactions?: ExtractTransactionUncheckedCreateNestedManyWithoutCustomerInput
    bankTransactions?: BankTransactionUncheckedCreateNestedManyWithoutCustomerInput
    paymentMatches?: PaymentMatchUncheckedCreateNestedManyWithoutCustomerInput
    balance?: BalanceUncheckedCreateNestedOneWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutUserInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
  }

  export type CustomerCreateManyUserInputEnvelope = {
    data: CustomerCreateManyUserInput | CustomerCreateManyUserInput[]
  }

  export type TransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutUserInput, TransactionUncheckedUpdateWithoutUserInput>
    create: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutUserInput, TransactionUncheckedUpdateWithoutUserInput>
  }

  export type TransactionUpdateManyWithWhereWithoutUserInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutUserInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    OR?: TransactionScalarWhereInput[]
    NOT?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    id?: StringFilter<"Transaction"> | string
    type?: StringFilter<"Transaction"> | string
    amount?: FloatFilter<"Transaction"> | number
    currency?: StringFilter<"Transaction"> | string
    description?: StringNullableFilter<"Transaction"> | string | null
    date?: DateTimeFilter<"Transaction"> | Date | string
    categoryId?: StringNullableFilter<"Transaction"> | string | null
    customerId?: StringNullableFilter<"Transaction"> | string | null
    userId?: StringFilter<"Transaction"> | string
    sourceFile?: StringNullableFilter<"Transaction"> | string | null
    sourceRow?: IntNullableFilter<"Transaction"> | number | null
    metadata?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
  }

  export type CategoryUpsertWithWhereUniqueWithoutUserInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutUserInput, CategoryUncheckedUpdateWithoutUserInput>
    create: XOR<CategoryCreateWithoutUserInput, CategoryUncheckedCreateWithoutUserInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutUserInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutUserInput, CategoryUncheckedUpdateWithoutUserInput>
  }

  export type CategoryUpdateManyWithWhereWithoutUserInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutUserInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    OR?: CategoryScalarWhereInput[]
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    type?: StringFilter<"Category"> | string
    parentId?: StringNullableFilter<"Category"> | string | null
    userId?: StringNullableFilter<"Category"> | string | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
  }

  export type ExtractUpsertWithWhereUniqueWithoutUserInput = {
    where: ExtractWhereUniqueInput
    update: XOR<ExtractUpdateWithoutUserInput, ExtractUncheckedUpdateWithoutUserInput>
    create: XOR<ExtractCreateWithoutUserInput, ExtractUncheckedCreateWithoutUserInput>
  }

  export type ExtractUpdateWithWhereUniqueWithoutUserInput = {
    where: ExtractWhereUniqueInput
    data: XOR<ExtractUpdateWithoutUserInput, ExtractUncheckedUpdateWithoutUserInput>
  }

  export type ExtractUpdateManyWithWhereWithoutUserInput = {
    where: ExtractScalarWhereInput
    data: XOR<ExtractUpdateManyMutationInput, ExtractUncheckedUpdateManyWithoutUserInput>
  }

  export type ExtractScalarWhereInput = {
    AND?: ExtractScalarWhereInput | ExtractScalarWhereInput[]
    OR?: ExtractScalarWhereInput[]
    NOT?: ExtractScalarWhereInput | ExtractScalarWhereInput[]
    id?: StringFilter<"Extract"> | string
    fileName?: StringFilter<"Extract"> | string
    uploadDate?: DateTimeFilter<"Extract"> | Date | string
    status?: StringFilter<"Extract"> | string
    totalRows?: IntFilter<"Extract"> | number
    processedRows?: IntFilter<"Extract"> | number
    errorRows?: IntFilter<"Extract"> | number
    userId?: StringFilter<"Extract"> | string
    createdAt?: DateTimeFilter<"Extract"> | Date | string
    updatedAt?: DateTimeFilter<"Extract"> | Date | string
  }

  export type CashFlowUpsertWithWhereUniqueWithoutUserInput = {
    where: CashFlowWhereUniqueInput
    update: XOR<CashFlowUpdateWithoutUserInput, CashFlowUncheckedUpdateWithoutUserInput>
    create: XOR<CashFlowCreateWithoutUserInput, CashFlowUncheckedCreateWithoutUserInput>
  }

  export type CashFlowUpdateWithWhereUniqueWithoutUserInput = {
    where: CashFlowWhereUniqueInput
    data: XOR<CashFlowUpdateWithoutUserInput, CashFlowUncheckedUpdateWithoutUserInput>
  }

  export type CashFlowUpdateManyWithWhereWithoutUserInput = {
    where: CashFlowScalarWhereInput
    data: XOR<CashFlowUpdateManyMutationInput, CashFlowUncheckedUpdateManyWithoutUserInput>
  }

  export type CashFlowScalarWhereInput = {
    AND?: CashFlowScalarWhereInput | CashFlowScalarWhereInput[]
    OR?: CashFlowScalarWhereInput[]
    NOT?: CashFlowScalarWhereInput | CashFlowScalarWhereInput[]
    id?: StringFilter<"CashFlow"> | string
    date?: DateTimeFilter<"CashFlow"> | Date | string
    openingBalance?: FloatFilter<"CashFlow"> | number
    closingBalance?: FloatFilter<"CashFlow"> | number
    totalIncome?: FloatFilter<"CashFlow"> | number
    totalExpense?: FloatFilter<"CashFlow"> | number
    difference?: FloatFilter<"CashFlow"> | number
    notes?: StringNullableFilter<"CashFlow"> | string | null
    userId?: StringFilter<"CashFlow"> | string
    createdAt?: DateTimeFilter<"CashFlow"> | Date | string
  }

  export type CustomerUpsertWithWhereUniqueWithoutUserInput = {
    where: CustomerWhereUniqueInput
    update: XOR<CustomerUpdateWithoutUserInput, CustomerUncheckedUpdateWithoutUserInput>
    create: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
  }

  export type CustomerUpdateWithWhereUniqueWithoutUserInput = {
    where: CustomerWhereUniqueInput
    data: XOR<CustomerUpdateWithoutUserInput, CustomerUncheckedUpdateWithoutUserInput>
  }

  export type CustomerUpdateManyWithWhereWithoutUserInput = {
    where: CustomerScalarWhereInput
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyWithoutUserInput>
  }

  export type CustomerScalarWhereInput = {
    AND?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
    OR?: CustomerScalarWhereInput[]
    NOT?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
    id?: StringFilter<"Customer"> | string
    code?: StringFilter<"Customer"> | string
    name?: StringFilter<"Customer"> | string
    originalName?: StringNullableFilter<"Customer"> | string | null
    nameVariations?: StringNullableFilter<"Customer"> | string | null
    phone?: StringNullableFilter<"Customer"> | string | null
    address?: StringNullableFilter<"Customer"> | string | null
    type?: StringFilter<"Customer"> | string
    accountType?: StringNullableFilter<"Customer"> | string | null
    lastPaymentDate?: DateTimeNullableFilter<"Customer"> | Date | string | null
    paymentPattern?: StringNullableFilter<"Customer"> | string | null
    dueDays?: IntNullableFilter<"Customer"> | number | null
    tag1?: StringNullableFilter<"Customer"> | string | null
    tag2?: StringNullableFilter<"Customer"> | string | null
    isActive?: BoolFilter<"Customer"> | boolean
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    userId?: StringFilter<"Customer"> | string
  }

  export type UserCreateWithoutCustomersInput = {
    id?: string
    username: string
    email: string
    password: string
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionCreateNestedManyWithoutUserInput
    categories?: CategoryCreateNestedManyWithoutUserInput
    extracts?: ExtractCreateNestedManyWithoutUserInput
    cashFlows?: CashFlowCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCustomersInput = {
    id?: string
    username: string
    email: string
    password: string
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    categories?: CategoryUncheckedCreateNestedManyWithoutUserInput
    extracts?: ExtractUncheckedCreateNestedManyWithoutUserInput
    cashFlows?: CashFlowUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCustomersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCustomersInput, UserUncheckedCreateWithoutCustomersInput>
  }

  export type TransactionCreateWithoutCustomerInput = {
    id?: string
    type: string
    amount: number
    currency?: string
    description?: string | null
    date: Date | string
    sourceFile?: string | null
    sourceRow?: number | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category?: CategoryCreateNestedOneWithoutTransactionsInput
    user: UserCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutCustomerInput = {
    id?: string
    type: string
    amount: number
    currency?: string
    description?: string | null
    date: Date | string
    categoryId?: string | null
    userId: string
    sourceFile?: string | null
    sourceRow?: number | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutCustomerInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutCustomerInput, TransactionUncheckedCreateWithoutCustomerInput>
  }

  export type TransactionCreateManyCustomerInputEnvelope = {
    data: TransactionCreateManyCustomerInput | TransactionCreateManyCustomerInput[]
  }

  export type ExtractTransactionCreateWithoutCustomerInput = {
    id?: string
    date: Date | string
    description: string
    debit?: number
    credit?: number
    documentType?: string | null
    voucherNo?: string | null
    dueDate?: Date | string | null
    amountBase?: number
    discount?: number
    amountNet?: number
    vat?: number
    sourceRow: number
    createdAt?: Date | string
    extract: ExtractCreateNestedOneWithoutTransactionsInput
  }

  export type ExtractTransactionUncheckedCreateWithoutCustomerInput = {
    id?: string
    extractId: string
    date: Date | string
    description: string
    debit?: number
    credit?: number
    documentType?: string | null
    voucherNo?: string | null
    dueDate?: Date | string | null
    amountBase?: number
    discount?: number
    amountNet?: number
    vat?: number
    sourceRow: number
    createdAt?: Date | string
  }

  export type ExtractTransactionCreateOrConnectWithoutCustomerInput = {
    where: ExtractTransactionWhereUniqueInput
    create: XOR<ExtractTransactionCreateWithoutCustomerInput, ExtractTransactionUncheckedCreateWithoutCustomerInput>
  }

  export type ExtractTransactionCreateManyCustomerInputEnvelope = {
    data: ExtractTransactionCreateManyCustomerInput | ExtractTransactionCreateManyCustomerInput[]
  }

  export type BankTransactionCreateWithoutCustomerInput = {
    id?: string
    messageId: string
    bankCode?: string
    direction: string
    accountIban: string
    maskedAccount?: string | null
    transactionDate: Date | string
    amount: number
    senderName?: string | null
    counterpartyName?: string | null
    balanceAfter?: number | null
    isMatched?: boolean
    confidenceScore?: number | null
    rawEmailData?: string | null
    parsedData?: string | null
    createdAt?: Date | string
    processedAt?: Date | string | null
    paymentMatches?: PaymentMatchCreateNestedManyWithoutBankTransactionInput
  }

  export type BankTransactionUncheckedCreateWithoutCustomerInput = {
    id?: string
    messageId: string
    bankCode?: string
    direction: string
    accountIban: string
    maskedAccount?: string | null
    transactionDate: Date | string
    amount: number
    senderName?: string | null
    counterpartyName?: string | null
    balanceAfter?: number | null
    isMatched?: boolean
    confidenceScore?: number | null
    rawEmailData?: string | null
    parsedData?: string | null
    createdAt?: Date | string
    processedAt?: Date | string | null
    paymentMatches?: PaymentMatchUncheckedCreateNestedManyWithoutBankTransactionInput
  }

  export type BankTransactionCreateOrConnectWithoutCustomerInput = {
    where: BankTransactionWhereUniqueInput
    create: XOR<BankTransactionCreateWithoutCustomerInput, BankTransactionUncheckedCreateWithoutCustomerInput>
  }

  export type BankTransactionCreateManyCustomerInputEnvelope = {
    data: BankTransactionCreateManyCustomerInput | BankTransactionCreateManyCustomerInput[]
  }

  export type PaymentMatchCreateWithoutCustomerInput = {
    id?: string
    matchedAmount: number
    confidenceScore: number
    matchMethod: string
    isConfirmed?: boolean
    createdAt?: Date | string
    bankTransaction: BankTransactionCreateNestedOneWithoutPaymentMatchesInput
  }

  export type PaymentMatchUncheckedCreateWithoutCustomerInput = {
    id?: string
    bankTransactionId: string
    matchedAmount: number
    confidenceScore: number
    matchMethod: string
    isConfirmed?: boolean
    createdAt?: Date | string
  }

  export type PaymentMatchCreateOrConnectWithoutCustomerInput = {
    where: PaymentMatchWhereUniqueInput
    create: XOR<PaymentMatchCreateWithoutCustomerInput, PaymentMatchUncheckedCreateWithoutCustomerInput>
  }

  export type PaymentMatchCreateManyCustomerInputEnvelope = {
    data: PaymentMatchCreateManyCustomerInput | PaymentMatchCreateManyCustomerInput[]
  }

  export type BalanceCreateWithoutCustomerInput = {
    id?: string
    totalDebit?: number
    totalCredit?: number
    netBalance?: number
    lastUpdated?: Date | string
  }

  export type BalanceUncheckedCreateWithoutCustomerInput = {
    id?: string
    totalDebit?: number
    totalCredit?: number
    netBalance?: number
    lastUpdated?: Date | string
  }

  export type BalanceCreateOrConnectWithoutCustomerInput = {
    where: BalanceWhereUniqueInput
    create: XOR<BalanceCreateWithoutCustomerInput, BalanceUncheckedCreateWithoutCustomerInput>
  }

  export type UserUpsertWithoutCustomersInput = {
    update: XOR<UserUpdateWithoutCustomersInput, UserUncheckedUpdateWithoutCustomersInput>
    create: XOR<UserCreateWithoutCustomersInput, UserUncheckedCreateWithoutCustomersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCustomersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCustomersInput, UserUncheckedUpdateWithoutCustomersInput>
  }

  export type UserUpdateWithoutCustomersInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    categories?: CategoryUpdateManyWithoutUserNestedInput
    extracts?: ExtractUpdateManyWithoutUserNestedInput
    cashFlows?: CashFlowUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCustomersInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    categories?: CategoryUncheckedUpdateManyWithoutUserNestedInput
    extracts?: ExtractUncheckedUpdateManyWithoutUserNestedInput
    cashFlows?: CashFlowUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TransactionUpsertWithWhereUniqueWithoutCustomerInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutCustomerInput, TransactionUncheckedUpdateWithoutCustomerInput>
    create: XOR<TransactionCreateWithoutCustomerInput, TransactionUncheckedCreateWithoutCustomerInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutCustomerInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutCustomerInput, TransactionUncheckedUpdateWithoutCustomerInput>
  }

  export type TransactionUpdateManyWithWhereWithoutCustomerInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutCustomerInput>
  }

  export type ExtractTransactionUpsertWithWhereUniqueWithoutCustomerInput = {
    where: ExtractTransactionWhereUniqueInput
    update: XOR<ExtractTransactionUpdateWithoutCustomerInput, ExtractTransactionUncheckedUpdateWithoutCustomerInput>
    create: XOR<ExtractTransactionCreateWithoutCustomerInput, ExtractTransactionUncheckedCreateWithoutCustomerInput>
  }

  export type ExtractTransactionUpdateWithWhereUniqueWithoutCustomerInput = {
    where: ExtractTransactionWhereUniqueInput
    data: XOR<ExtractTransactionUpdateWithoutCustomerInput, ExtractTransactionUncheckedUpdateWithoutCustomerInput>
  }

  export type ExtractTransactionUpdateManyWithWhereWithoutCustomerInput = {
    where: ExtractTransactionScalarWhereInput
    data: XOR<ExtractTransactionUpdateManyMutationInput, ExtractTransactionUncheckedUpdateManyWithoutCustomerInput>
  }

  export type ExtractTransactionScalarWhereInput = {
    AND?: ExtractTransactionScalarWhereInput | ExtractTransactionScalarWhereInput[]
    OR?: ExtractTransactionScalarWhereInput[]
    NOT?: ExtractTransactionScalarWhereInput | ExtractTransactionScalarWhereInput[]
    id?: StringFilter<"ExtractTransaction"> | string
    extractId?: StringFilter<"ExtractTransaction"> | string
    customerId?: StringNullableFilter<"ExtractTransaction"> | string | null
    date?: DateTimeFilter<"ExtractTransaction"> | Date | string
    description?: StringFilter<"ExtractTransaction"> | string
    debit?: FloatFilter<"ExtractTransaction"> | number
    credit?: FloatFilter<"ExtractTransaction"> | number
    documentType?: StringNullableFilter<"ExtractTransaction"> | string | null
    voucherNo?: StringNullableFilter<"ExtractTransaction"> | string | null
    dueDate?: DateTimeNullableFilter<"ExtractTransaction"> | Date | string | null
    amountBase?: FloatFilter<"ExtractTransaction"> | number
    discount?: FloatFilter<"ExtractTransaction"> | number
    amountNet?: FloatFilter<"ExtractTransaction"> | number
    vat?: FloatFilter<"ExtractTransaction"> | number
    sourceRow?: IntFilter<"ExtractTransaction"> | number
    createdAt?: DateTimeFilter<"ExtractTransaction"> | Date | string
  }

  export type BankTransactionUpsertWithWhereUniqueWithoutCustomerInput = {
    where: BankTransactionWhereUniqueInput
    update: XOR<BankTransactionUpdateWithoutCustomerInput, BankTransactionUncheckedUpdateWithoutCustomerInput>
    create: XOR<BankTransactionCreateWithoutCustomerInput, BankTransactionUncheckedCreateWithoutCustomerInput>
  }

  export type BankTransactionUpdateWithWhereUniqueWithoutCustomerInput = {
    where: BankTransactionWhereUniqueInput
    data: XOR<BankTransactionUpdateWithoutCustomerInput, BankTransactionUncheckedUpdateWithoutCustomerInput>
  }

  export type BankTransactionUpdateManyWithWhereWithoutCustomerInput = {
    where: BankTransactionScalarWhereInput
    data: XOR<BankTransactionUpdateManyMutationInput, BankTransactionUncheckedUpdateManyWithoutCustomerInput>
  }

  export type BankTransactionScalarWhereInput = {
    AND?: BankTransactionScalarWhereInput | BankTransactionScalarWhereInput[]
    OR?: BankTransactionScalarWhereInput[]
    NOT?: BankTransactionScalarWhereInput | BankTransactionScalarWhereInput[]
    id?: StringFilter<"BankTransaction"> | string
    messageId?: StringFilter<"BankTransaction"> | string
    bankCode?: StringFilter<"BankTransaction"> | string
    direction?: StringFilter<"BankTransaction"> | string
    accountIban?: StringFilter<"BankTransaction"> | string
    maskedAccount?: StringNullableFilter<"BankTransaction"> | string | null
    transactionDate?: DateTimeFilter<"BankTransaction"> | Date | string
    amount?: FloatFilter<"BankTransaction"> | number
    senderName?: StringNullableFilter<"BankTransaction"> | string | null
    counterpartyName?: StringNullableFilter<"BankTransaction"> | string | null
    balanceAfter?: FloatNullableFilter<"BankTransaction"> | number | null
    isMatched?: BoolFilter<"BankTransaction"> | boolean
    matchedCustomerId?: StringNullableFilter<"BankTransaction"> | string | null
    confidenceScore?: FloatNullableFilter<"BankTransaction"> | number | null
    rawEmailData?: StringNullableFilter<"BankTransaction"> | string | null
    parsedData?: StringNullableFilter<"BankTransaction"> | string | null
    createdAt?: DateTimeFilter<"BankTransaction"> | Date | string
    processedAt?: DateTimeNullableFilter<"BankTransaction"> | Date | string | null
  }

  export type PaymentMatchUpsertWithWhereUniqueWithoutCustomerInput = {
    where: PaymentMatchWhereUniqueInput
    update: XOR<PaymentMatchUpdateWithoutCustomerInput, PaymentMatchUncheckedUpdateWithoutCustomerInput>
    create: XOR<PaymentMatchCreateWithoutCustomerInput, PaymentMatchUncheckedCreateWithoutCustomerInput>
  }

  export type PaymentMatchUpdateWithWhereUniqueWithoutCustomerInput = {
    where: PaymentMatchWhereUniqueInput
    data: XOR<PaymentMatchUpdateWithoutCustomerInput, PaymentMatchUncheckedUpdateWithoutCustomerInput>
  }

  export type PaymentMatchUpdateManyWithWhereWithoutCustomerInput = {
    where: PaymentMatchScalarWhereInput
    data: XOR<PaymentMatchUpdateManyMutationInput, PaymentMatchUncheckedUpdateManyWithoutCustomerInput>
  }

  export type PaymentMatchScalarWhereInput = {
    AND?: PaymentMatchScalarWhereInput | PaymentMatchScalarWhereInput[]
    OR?: PaymentMatchScalarWhereInput[]
    NOT?: PaymentMatchScalarWhereInput | PaymentMatchScalarWhereInput[]
    id?: StringFilter<"PaymentMatch"> | string
    bankTransactionId?: StringFilter<"PaymentMatch"> | string
    customerId?: StringFilter<"PaymentMatch"> | string
    matchedAmount?: FloatFilter<"PaymentMatch"> | number
    confidenceScore?: FloatFilter<"PaymentMatch"> | number
    matchMethod?: StringFilter<"PaymentMatch"> | string
    isConfirmed?: BoolFilter<"PaymentMatch"> | boolean
    createdAt?: DateTimeFilter<"PaymentMatch"> | Date | string
  }

  export type BalanceUpsertWithoutCustomerInput = {
    update: XOR<BalanceUpdateWithoutCustomerInput, BalanceUncheckedUpdateWithoutCustomerInput>
    create: XOR<BalanceCreateWithoutCustomerInput, BalanceUncheckedCreateWithoutCustomerInput>
    where?: BalanceWhereInput
  }

  export type BalanceUpdateToOneWithWhereWithoutCustomerInput = {
    where?: BalanceWhereInput
    data: XOR<BalanceUpdateWithoutCustomerInput, BalanceUncheckedUpdateWithoutCustomerInput>
  }

  export type BalanceUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalDebit?: FloatFieldUpdateOperationsInput | number
    totalCredit?: FloatFieldUpdateOperationsInput | number
    netBalance?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BalanceUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalDebit?: FloatFieldUpdateOperationsInput | number
    totalCredit?: FloatFieldUpdateOperationsInput | number
    netBalance?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateWithoutChildrenInput = {
    id?: string
    name: string
    type: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    user?: UserCreateNestedOneWithoutCategoriesInput
    transactions?: TransactionCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutChildrenInput = {
    id?: string
    name: string
    type: string
    parentId?: string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutChildrenInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
  }

  export type CategoryCreateWithoutParentInput = {
    id?: string
    name: string
    type: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryCreateNestedManyWithoutParentInput
    user?: UserCreateNestedOneWithoutCategoriesInput
    transactions?: TransactionCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutParentInput = {
    id?: string
    name: string
    type: string
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutParentInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryCreateManyParentInputEnvelope = {
    data: CategoryCreateManyParentInput | CategoryCreateManyParentInput[]
  }

  export type UserCreateWithoutCategoriesInput = {
    id?: string
    username: string
    email: string
    password: string
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionCreateNestedManyWithoutUserInput
    extracts?: ExtractCreateNestedManyWithoutUserInput
    cashFlows?: CashFlowCreateNestedManyWithoutUserInput
    customers?: CustomerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCategoriesInput = {
    id?: string
    username: string
    email: string
    password: string
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    extracts?: ExtractUncheckedCreateNestedManyWithoutUserInput
    cashFlows?: CashFlowUncheckedCreateNestedManyWithoutUserInput
    customers?: CustomerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCategoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCategoriesInput, UserUncheckedCreateWithoutCategoriesInput>
  }

  export type TransactionCreateWithoutCategoryInput = {
    id?: string
    type: string
    amount: number
    currency?: string
    description?: string | null
    date: Date | string
    sourceFile?: string | null
    sourceRow?: number | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer?: CustomerCreateNestedOneWithoutTransactionsInput
    user: UserCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutCategoryInput = {
    id?: string
    type: string
    amount: number
    currency?: string
    description?: string | null
    date: Date | string
    customerId?: string | null
    userId: string
    sourceFile?: string | null
    sourceRow?: number | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutCategoryInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutCategoryInput, TransactionUncheckedCreateWithoutCategoryInput>
  }

  export type TransactionCreateManyCategoryInputEnvelope = {
    data: TransactionCreateManyCategoryInput | TransactionCreateManyCategoryInput[]
  }

  export type CategoryUpsertWithoutChildrenInput = {
    update: XOR<CategoryUpdateWithoutChildrenInput, CategoryUncheckedUpdateWithoutChildrenInput>
    create: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutChildrenInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutChildrenInput, CategoryUncheckedUpdateWithoutChildrenInput>
  }

  export type CategoryUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    user?: UserUpdateOneWithoutCategoriesNestedInput
    transactions?: TransactionUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUpsertWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
  }

  export type CategoryUpdateManyWithWhereWithoutParentInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutParentInput>
  }

  export type UserUpsertWithoutCategoriesInput = {
    update: XOR<UserUpdateWithoutCategoriesInput, UserUncheckedUpdateWithoutCategoriesInput>
    create: XOR<UserCreateWithoutCategoriesInput, UserUncheckedCreateWithoutCategoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCategoriesInput, UserUncheckedUpdateWithoutCategoriesInput>
  }

  export type UserUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    extracts?: ExtractUpdateManyWithoutUserNestedInput
    cashFlows?: CashFlowUpdateManyWithoutUserNestedInput
    customers?: CustomerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    extracts?: ExtractUncheckedUpdateManyWithoutUserNestedInput
    cashFlows?: CashFlowUncheckedUpdateManyWithoutUserNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TransactionUpsertWithWhereUniqueWithoutCategoryInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutCategoryInput, TransactionUncheckedUpdateWithoutCategoryInput>
    create: XOR<TransactionCreateWithoutCategoryInput, TransactionUncheckedCreateWithoutCategoryInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutCategoryInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutCategoryInput, TransactionUncheckedUpdateWithoutCategoryInput>
  }

  export type TransactionUpdateManyWithWhereWithoutCategoryInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutCategoryInput>
  }

  export type CategoryCreateWithoutTransactionsInput = {
    id?: string
    name: string
    type: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    children?: CategoryCreateNestedManyWithoutParentInput
    user?: UserCreateNestedOneWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutTransactionsInput = {
    id?: string
    name: string
    type: string
    parentId?: string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
  }

  export type CategoryCreateOrConnectWithoutTransactionsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutTransactionsInput, CategoryUncheckedCreateWithoutTransactionsInput>
  }

  export type CustomerCreateWithoutTransactionsInput = {
    id?: string
    code: string
    name: string
    originalName?: string | null
    nameVariations?: string | null
    phone?: string | null
    address?: string | null
    type?: string
    accountType?: string | null
    lastPaymentDate?: Date | string | null
    paymentPattern?: string | null
    dueDays?: number | null
    tag1?: string | null
    tag2?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCustomersInput
    extractTransactions?: ExtractTransactionCreateNestedManyWithoutCustomerInput
    bankTransactions?: BankTransactionCreateNestedManyWithoutCustomerInput
    paymentMatches?: PaymentMatchCreateNestedManyWithoutCustomerInput
    balance?: BalanceCreateNestedOneWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutTransactionsInput = {
    id?: string
    code: string
    name: string
    originalName?: string | null
    nameVariations?: string | null
    phone?: string | null
    address?: string | null
    type?: string
    accountType?: string | null
    lastPaymentDate?: Date | string | null
    paymentPattern?: string | null
    dueDays?: number | null
    tag1?: string | null
    tag2?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    extractTransactions?: ExtractTransactionUncheckedCreateNestedManyWithoutCustomerInput
    bankTransactions?: BankTransactionUncheckedCreateNestedManyWithoutCustomerInput
    paymentMatches?: PaymentMatchUncheckedCreateNestedManyWithoutCustomerInput
    balance?: BalanceUncheckedCreateNestedOneWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutTransactionsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutTransactionsInput, CustomerUncheckedCreateWithoutTransactionsInput>
  }

  export type UserCreateWithoutTransactionsInput = {
    id?: string
    username: string
    email: string
    password: string
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: CategoryCreateNestedManyWithoutUserInput
    extracts?: ExtractCreateNestedManyWithoutUserInput
    cashFlows?: CashFlowCreateNestedManyWithoutUserInput
    customers?: CustomerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTransactionsInput = {
    id?: string
    username: string
    email: string
    password: string
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: CategoryUncheckedCreateNestedManyWithoutUserInput
    extracts?: ExtractUncheckedCreateNestedManyWithoutUserInput
    cashFlows?: CashFlowUncheckedCreateNestedManyWithoutUserInput
    customers?: CustomerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
  }

  export type CategoryUpsertWithoutTransactionsInput = {
    update: XOR<CategoryUpdateWithoutTransactionsInput, CategoryUncheckedUpdateWithoutTransactionsInput>
    create: XOR<CategoryCreateWithoutTransactionsInput, CategoryUncheckedCreateWithoutTransactionsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutTransactionsInput, CategoryUncheckedUpdateWithoutTransactionsInput>
  }

  export type CategoryUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
    user?: UserUpdateOneWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
  }

  export type CustomerUpsertWithoutTransactionsInput = {
    update: XOR<CustomerUpdateWithoutTransactionsInput, CustomerUncheckedUpdateWithoutTransactionsInput>
    create: XOR<CustomerCreateWithoutTransactionsInput, CustomerUncheckedCreateWithoutTransactionsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutTransactionsInput, CustomerUncheckedUpdateWithoutTransactionsInput>
  }

  export type CustomerUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    nameVariations?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentPattern?: NullableStringFieldUpdateOperationsInput | string | null
    dueDays?: NullableIntFieldUpdateOperationsInput | number | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCustomersNestedInput
    extractTransactions?: ExtractTransactionUpdateManyWithoutCustomerNestedInput
    bankTransactions?: BankTransactionUpdateManyWithoutCustomerNestedInput
    paymentMatches?: PaymentMatchUpdateManyWithoutCustomerNestedInput
    balance?: BalanceUpdateOneWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    nameVariations?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentPattern?: NullableStringFieldUpdateOperationsInput | string | null
    dueDays?: NullableIntFieldUpdateOperationsInput | number | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    extractTransactions?: ExtractTransactionUncheckedUpdateManyWithoutCustomerNestedInput
    bankTransactions?: BankTransactionUncheckedUpdateManyWithoutCustomerNestedInput
    paymentMatches?: PaymentMatchUncheckedUpdateManyWithoutCustomerNestedInput
    balance?: BalanceUncheckedUpdateOneWithoutCustomerNestedInput
  }

  export type UserUpsertWithoutTransactionsInput = {
    update: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
  }

  export type UserUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: CategoryUpdateManyWithoutUserNestedInput
    extracts?: ExtractUpdateManyWithoutUserNestedInput
    cashFlows?: CashFlowUpdateManyWithoutUserNestedInput
    customers?: CustomerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: CategoryUncheckedUpdateManyWithoutUserNestedInput
    extracts?: ExtractUncheckedUpdateManyWithoutUserNestedInput
    cashFlows?: CashFlowUncheckedUpdateManyWithoutUserNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CustomerCreateWithoutBalanceInput = {
    id?: string
    code: string
    name: string
    originalName?: string | null
    nameVariations?: string | null
    phone?: string | null
    address?: string | null
    type?: string
    accountType?: string | null
    lastPaymentDate?: Date | string | null
    paymentPattern?: string | null
    dueDays?: number | null
    tag1?: string | null
    tag2?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCustomersInput
    transactions?: TransactionCreateNestedManyWithoutCustomerInput
    extractTransactions?: ExtractTransactionCreateNestedManyWithoutCustomerInput
    bankTransactions?: BankTransactionCreateNestedManyWithoutCustomerInput
    paymentMatches?: PaymentMatchCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutBalanceInput = {
    id?: string
    code: string
    name: string
    originalName?: string | null
    nameVariations?: string | null
    phone?: string | null
    address?: string | null
    type?: string
    accountType?: string | null
    lastPaymentDate?: Date | string | null
    paymentPattern?: string | null
    dueDays?: number | null
    tag1?: string | null
    tag2?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    transactions?: TransactionUncheckedCreateNestedManyWithoutCustomerInput
    extractTransactions?: ExtractTransactionUncheckedCreateNestedManyWithoutCustomerInput
    bankTransactions?: BankTransactionUncheckedCreateNestedManyWithoutCustomerInput
    paymentMatches?: PaymentMatchUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutBalanceInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutBalanceInput, CustomerUncheckedCreateWithoutBalanceInput>
  }

  export type CustomerUpsertWithoutBalanceInput = {
    update: XOR<CustomerUpdateWithoutBalanceInput, CustomerUncheckedUpdateWithoutBalanceInput>
    create: XOR<CustomerCreateWithoutBalanceInput, CustomerUncheckedCreateWithoutBalanceInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutBalanceInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutBalanceInput, CustomerUncheckedUpdateWithoutBalanceInput>
  }

  export type CustomerUpdateWithoutBalanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    nameVariations?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentPattern?: NullableStringFieldUpdateOperationsInput | string | null
    dueDays?: NullableIntFieldUpdateOperationsInput | number | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCustomersNestedInput
    transactions?: TransactionUpdateManyWithoutCustomerNestedInput
    extractTransactions?: ExtractTransactionUpdateManyWithoutCustomerNestedInput
    bankTransactions?: BankTransactionUpdateManyWithoutCustomerNestedInput
    paymentMatches?: PaymentMatchUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutBalanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    nameVariations?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentPattern?: NullableStringFieldUpdateOperationsInput | string | null
    dueDays?: NullableIntFieldUpdateOperationsInput | number | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    transactions?: TransactionUncheckedUpdateManyWithoutCustomerNestedInput
    extractTransactions?: ExtractTransactionUncheckedUpdateManyWithoutCustomerNestedInput
    bankTransactions?: BankTransactionUncheckedUpdateManyWithoutCustomerNestedInput
    paymentMatches?: PaymentMatchUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type UserCreateWithoutExtractsInput = {
    id?: string
    username: string
    email: string
    password: string
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionCreateNestedManyWithoutUserInput
    categories?: CategoryCreateNestedManyWithoutUserInput
    cashFlows?: CashFlowCreateNestedManyWithoutUserInput
    customers?: CustomerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutExtractsInput = {
    id?: string
    username: string
    email: string
    password: string
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    categories?: CategoryUncheckedCreateNestedManyWithoutUserInput
    cashFlows?: CashFlowUncheckedCreateNestedManyWithoutUserInput
    customers?: CustomerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutExtractsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutExtractsInput, UserUncheckedCreateWithoutExtractsInput>
  }

  export type ExtractTransactionCreateWithoutExtractInput = {
    id?: string
    date: Date | string
    description: string
    debit?: number
    credit?: number
    documentType?: string | null
    voucherNo?: string | null
    dueDate?: Date | string | null
    amountBase?: number
    discount?: number
    amountNet?: number
    vat?: number
    sourceRow: number
    createdAt?: Date | string
    customer?: CustomerCreateNestedOneWithoutExtractTransactionsInput
  }

  export type ExtractTransactionUncheckedCreateWithoutExtractInput = {
    id?: string
    customerId?: string | null
    date: Date | string
    description: string
    debit?: number
    credit?: number
    documentType?: string | null
    voucherNo?: string | null
    dueDate?: Date | string | null
    amountBase?: number
    discount?: number
    amountNet?: number
    vat?: number
    sourceRow: number
    createdAt?: Date | string
  }

  export type ExtractTransactionCreateOrConnectWithoutExtractInput = {
    where: ExtractTransactionWhereUniqueInput
    create: XOR<ExtractTransactionCreateWithoutExtractInput, ExtractTransactionUncheckedCreateWithoutExtractInput>
  }

  export type ExtractTransactionCreateManyExtractInputEnvelope = {
    data: ExtractTransactionCreateManyExtractInput | ExtractTransactionCreateManyExtractInput[]
  }

  export type UserUpsertWithoutExtractsInput = {
    update: XOR<UserUpdateWithoutExtractsInput, UserUncheckedUpdateWithoutExtractsInput>
    create: XOR<UserCreateWithoutExtractsInput, UserUncheckedCreateWithoutExtractsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutExtractsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutExtractsInput, UserUncheckedUpdateWithoutExtractsInput>
  }

  export type UserUpdateWithoutExtractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    categories?: CategoryUpdateManyWithoutUserNestedInput
    cashFlows?: CashFlowUpdateManyWithoutUserNestedInput
    customers?: CustomerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutExtractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    categories?: CategoryUncheckedUpdateManyWithoutUserNestedInput
    cashFlows?: CashFlowUncheckedUpdateManyWithoutUserNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ExtractTransactionUpsertWithWhereUniqueWithoutExtractInput = {
    where: ExtractTransactionWhereUniqueInput
    update: XOR<ExtractTransactionUpdateWithoutExtractInput, ExtractTransactionUncheckedUpdateWithoutExtractInput>
    create: XOR<ExtractTransactionCreateWithoutExtractInput, ExtractTransactionUncheckedCreateWithoutExtractInput>
  }

  export type ExtractTransactionUpdateWithWhereUniqueWithoutExtractInput = {
    where: ExtractTransactionWhereUniqueInput
    data: XOR<ExtractTransactionUpdateWithoutExtractInput, ExtractTransactionUncheckedUpdateWithoutExtractInput>
  }

  export type ExtractTransactionUpdateManyWithWhereWithoutExtractInput = {
    where: ExtractTransactionScalarWhereInput
    data: XOR<ExtractTransactionUpdateManyMutationInput, ExtractTransactionUncheckedUpdateManyWithoutExtractInput>
  }

  export type ExtractCreateWithoutTransactionsInput = {
    id?: string
    fileName: string
    uploadDate?: Date | string
    status: string
    totalRows?: number
    processedRows?: number
    errorRows?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutExtractsInput
  }

  export type ExtractUncheckedCreateWithoutTransactionsInput = {
    id?: string
    fileName: string
    uploadDate?: Date | string
    status: string
    totalRows?: number
    processedRows?: number
    errorRows?: number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExtractCreateOrConnectWithoutTransactionsInput = {
    where: ExtractWhereUniqueInput
    create: XOR<ExtractCreateWithoutTransactionsInput, ExtractUncheckedCreateWithoutTransactionsInput>
  }

  export type CustomerCreateWithoutExtractTransactionsInput = {
    id?: string
    code: string
    name: string
    originalName?: string | null
    nameVariations?: string | null
    phone?: string | null
    address?: string | null
    type?: string
    accountType?: string | null
    lastPaymentDate?: Date | string | null
    paymentPattern?: string | null
    dueDays?: number | null
    tag1?: string | null
    tag2?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCustomersInput
    transactions?: TransactionCreateNestedManyWithoutCustomerInput
    bankTransactions?: BankTransactionCreateNestedManyWithoutCustomerInput
    paymentMatches?: PaymentMatchCreateNestedManyWithoutCustomerInput
    balance?: BalanceCreateNestedOneWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutExtractTransactionsInput = {
    id?: string
    code: string
    name: string
    originalName?: string | null
    nameVariations?: string | null
    phone?: string | null
    address?: string | null
    type?: string
    accountType?: string | null
    lastPaymentDate?: Date | string | null
    paymentPattern?: string | null
    dueDays?: number | null
    tag1?: string | null
    tag2?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    transactions?: TransactionUncheckedCreateNestedManyWithoutCustomerInput
    bankTransactions?: BankTransactionUncheckedCreateNestedManyWithoutCustomerInput
    paymentMatches?: PaymentMatchUncheckedCreateNestedManyWithoutCustomerInput
    balance?: BalanceUncheckedCreateNestedOneWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutExtractTransactionsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutExtractTransactionsInput, CustomerUncheckedCreateWithoutExtractTransactionsInput>
  }

  export type ExtractUpsertWithoutTransactionsInput = {
    update: XOR<ExtractUpdateWithoutTransactionsInput, ExtractUncheckedUpdateWithoutTransactionsInput>
    create: XOR<ExtractCreateWithoutTransactionsInput, ExtractUncheckedCreateWithoutTransactionsInput>
    where?: ExtractWhereInput
  }

  export type ExtractUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: ExtractWhereInput
    data: XOR<ExtractUpdateWithoutTransactionsInput, ExtractUncheckedUpdateWithoutTransactionsInput>
  }

  export type ExtractUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalRows?: IntFieldUpdateOperationsInput | number
    processedRows?: IntFieldUpdateOperationsInput | number
    errorRows?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutExtractsNestedInput
  }

  export type ExtractUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalRows?: IntFieldUpdateOperationsInput | number
    processedRows?: IntFieldUpdateOperationsInput | number
    errorRows?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUpsertWithoutExtractTransactionsInput = {
    update: XOR<CustomerUpdateWithoutExtractTransactionsInput, CustomerUncheckedUpdateWithoutExtractTransactionsInput>
    create: XOR<CustomerCreateWithoutExtractTransactionsInput, CustomerUncheckedCreateWithoutExtractTransactionsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutExtractTransactionsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutExtractTransactionsInput, CustomerUncheckedUpdateWithoutExtractTransactionsInput>
  }

  export type CustomerUpdateWithoutExtractTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    nameVariations?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentPattern?: NullableStringFieldUpdateOperationsInput | string | null
    dueDays?: NullableIntFieldUpdateOperationsInput | number | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCustomersNestedInput
    transactions?: TransactionUpdateManyWithoutCustomerNestedInput
    bankTransactions?: BankTransactionUpdateManyWithoutCustomerNestedInput
    paymentMatches?: PaymentMatchUpdateManyWithoutCustomerNestedInput
    balance?: BalanceUpdateOneWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutExtractTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    nameVariations?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentPattern?: NullableStringFieldUpdateOperationsInput | string | null
    dueDays?: NullableIntFieldUpdateOperationsInput | number | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    transactions?: TransactionUncheckedUpdateManyWithoutCustomerNestedInput
    bankTransactions?: BankTransactionUncheckedUpdateManyWithoutCustomerNestedInput
    paymentMatches?: PaymentMatchUncheckedUpdateManyWithoutCustomerNestedInput
    balance?: BalanceUncheckedUpdateOneWithoutCustomerNestedInput
  }

  export type CustomerCreateWithoutBankTransactionsInput = {
    id?: string
    code: string
    name: string
    originalName?: string | null
    nameVariations?: string | null
    phone?: string | null
    address?: string | null
    type?: string
    accountType?: string | null
    lastPaymentDate?: Date | string | null
    paymentPattern?: string | null
    dueDays?: number | null
    tag1?: string | null
    tag2?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCustomersInput
    transactions?: TransactionCreateNestedManyWithoutCustomerInput
    extractTransactions?: ExtractTransactionCreateNestedManyWithoutCustomerInput
    paymentMatches?: PaymentMatchCreateNestedManyWithoutCustomerInput
    balance?: BalanceCreateNestedOneWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutBankTransactionsInput = {
    id?: string
    code: string
    name: string
    originalName?: string | null
    nameVariations?: string | null
    phone?: string | null
    address?: string | null
    type?: string
    accountType?: string | null
    lastPaymentDate?: Date | string | null
    paymentPattern?: string | null
    dueDays?: number | null
    tag1?: string | null
    tag2?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    transactions?: TransactionUncheckedCreateNestedManyWithoutCustomerInput
    extractTransactions?: ExtractTransactionUncheckedCreateNestedManyWithoutCustomerInput
    paymentMatches?: PaymentMatchUncheckedCreateNestedManyWithoutCustomerInput
    balance?: BalanceUncheckedCreateNestedOneWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutBankTransactionsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutBankTransactionsInput, CustomerUncheckedCreateWithoutBankTransactionsInput>
  }

  export type PaymentMatchCreateWithoutBankTransactionInput = {
    id?: string
    matchedAmount: number
    confidenceScore: number
    matchMethod: string
    isConfirmed?: boolean
    createdAt?: Date | string
    customer: CustomerCreateNestedOneWithoutPaymentMatchesInput
  }

  export type PaymentMatchUncheckedCreateWithoutBankTransactionInput = {
    id?: string
    customerId: string
    matchedAmount: number
    confidenceScore: number
    matchMethod: string
    isConfirmed?: boolean
    createdAt?: Date | string
  }

  export type PaymentMatchCreateOrConnectWithoutBankTransactionInput = {
    where: PaymentMatchWhereUniqueInput
    create: XOR<PaymentMatchCreateWithoutBankTransactionInput, PaymentMatchUncheckedCreateWithoutBankTransactionInput>
  }

  export type PaymentMatchCreateManyBankTransactionInputEnvelope = {
    data: PaymentMatchCreateManyBankTransactionInput | PaymentMatchCreateManyBankTransactionInput[]
  }

  export type CustomerUpsertWithoutBankTransactionsInput = {
    update: XOR<CustomerUpdateWithoutBankTransactionsInput, CustomerUncheckedUpdateWithoutBankTransactionsInput>
    create: XOR<CustomerCreateWithoutBankTransactionsInput, CustomerUncheckedCreateWithoutBankTransactionsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutBankTransactionsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutBankTransactionsInput, CustomerUncheckedUpdateWithoutBankTransactionsInput>
  }

  export type CustomerUpdateWithoutBankTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    nameVariations?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentPattern?: NullableStringFieldUpdateOperationsInput | string | null
    dueDays?: NullableIntFieldUpdateOperationsInput | number | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCustomersNestedInput
    transactions?: TransactionUpdateManyWithoutCustomerNestedInput
    extractTransactions?: ExtractTransactionUpdateManyWithoutCustomerNestedInput
    paymentMatches?: PaymentMatchUpdateManyWithoutCustomerNestedInput
    balance?: BalanceUpdateOneWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutBankTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    nameVariations?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentPattern?: NullableStringFieldUpdateOperationsInput | string | null
    dueDays?: NullableIntFieldUpdateOperationsInput | number | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    transactions?: TransactionUncheckedUpdateManyWithoutCustomerNestedInput
    extractTransactions?: ExtractTransactionUncheckedUpdateManyWithoutCustomerNestedInput
    paymentMatches?: PaymentMatchUncheckedUpdateManyWithoutCustomerNestedInput
    balance?: BalanceUncheckedUpdateOneWithoutCustomerNestedInput
  }

  export type PaymentMatchUpsertWithWhereUniqueWithoutBankTransactionInput = {
    where: PaymentMatchWhereUniqueInput
    update: XOR<PaymentMatchUpdateWithoutBankTransactionInput, PaymentMatchUncheckedUpdateWithoutBankTransactionInput>
    create: XOR<PaymentMatchCreateWithoutBankTransactionInput, PaymentMatchUncheckedCreateWithoutBankTransactionInput>
  }

  export type PaymentMatchUpdateWithWhereUniqueWithoutBankTransactionInput = {
    where: PaymentMatchWhereUniqueInput
    data: XOR<PaymentMatchUpdateWithoutBankTransactionInput, PaymentMatchUncheckedUpdateWithoutBankTransactionInput>
  }

  export type PaymentMatchUpdateManyWithWhereWithoutBankTransactionInput = {
    where: PaymentMatchScalarWhereInput
    data: XOR<PaymentMatchUpdateManyMutationInput, PaymentMatchUncheckedUpdateManyWithoutBankTransactionInput>
  }

  export type BankTransactionCreateWithoutPaymentMatchesInput = {
    id?: string
    messageId: string
    bankCode?: string
    direction: string
    accountIban: string
    maskedAccount?: string | null
    transactionDate: Date | string
    amount: number
    senderName?: string | null
    counterpartyName?: string | null
    balanceAfter?: number | null
    isMatched?: boolean
    confidenceScore?: number | null
    rawEmailData?: string | null
    parsedData?: string | null
    createdAt?: Date | string
    processedAt?: Date | string | null
    customer?: CustomerCreateNestedOneWithoutBankTransactionsInput
  }

  export type BankTransactionUncheckedCreateWithoutPaymentMatchesInput = {
    id?: string
    messageId: string
    bankCode?: string
    direction: string
    accountIban: string
    maskedAccount?: string | null
    transactionDate: Date | string
    amount: number
    senderName?: string | null
    counterpartyName?: string | null
    balanceAfter?: number | null
    isMatched?: boolean
    matchedCustomerId?: string | null
    confidenceScore?: number | null
    rawEmailData?: string | null
    parsedData?: string | null
    createdAt?: Date | string
    processedAt?: Date | string | null
  }

  export type BankTransactionCreateOrConnectWithoutPaymentMatchesInput = {
    where: BankTransactionWhereUniqueInput
    create: XOR<BankTransactionCreateWithoutPaymentMatchesInput, BankTransactionUncheckedCreateWithoutPaymentMatchesInput>
  }

  export type CustomerCreateWithoutPaymentMatchesInput = {
    id?: string
    code: string
    name: string
    originalName?: string | null
    nameVariations?: string | null
    phone?: string | null
    address?: string | null
    type?: string
    accountType?: string | null
    lastPaymentDate?: Date | string | null
    paymentPattern?: string | null
    dueDays?: number | null
    tag1?: string | null
    tag2?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCustomersInput
    transactions?: TransactionCreateNestedManyWithoutCustomerInput
    extractTransactions?: ExtractTransactionCreateNestedManyWithoutCustomerInput
    bankTransactions?: BankTransactionCreateNestedManyWithoutCustomerInput
    balance?: BalanceCreateNestedOneWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutPaymentMatchesInput = {
    id?: string
    code: string
    name: string
    originalName?: string | null
    nameVariations?: string | null
    phone?: string | null
    address?: string | null
    type?: string
    accountType?: string | null
    lastPaymentDate?: Date | string | null
    paymentPattern?: string | null
    dueDays?: number | null
    tag1?: string | null
    tag2?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    transactions?: TransactionUncheckedCreateNestedManyWithoutCustomerInput
    extractTransactions?: ExtractTransactionUncheckedCreateNestedManyWithoutCustomerInput
    bankTransactions?: BankTransactionUncheckedCreateNestedManyWithoutCustomerInput
    balance?: BalanceUncheckedCreateNestedOneWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutPaymentMatchesInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutPaymentMatchesInput, CustomerUncheckedCreateWithoutPaymentMatchesInput>
  }

  export type BankTransactionUpsertWithoutPaymentMatchesInput = {
    update: XOR<BankTransactionUpdateWithoutPaymentMatchesInput, BankTransactionUncheckedUpdateWithoutPaymentMatchesInput>
    create: XOR<BankTransactionCreateWithoutPaymentMatchesInput, BankTransactionUncheckedCreateWithoutPaymentMatchesInput>
    where?: BankTransactionWhereInput
  }

  export type BankTransactionUpdateToOneWithWhereWithoutPaymentMatchesInput = {
    where?: BankTransactionWhereInput
    data: XOR<BankTransactionUpdateWithoutPaymentMatchesInput, BankTransactionUncheckedUpdateWithoutPaymentMatchesInput>
  }

  export type BankTransactionUpdateWithoutPaymentMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    bankCode?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    accountIban?: StringFieldUpdateOperationsInput | string
    maskedAccount?: NullableStringFieldUpdateOperationsInput | string | null
    transactionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    senderName?: NullableStringFieldUpdateOperationsInput | string | null
    counterpartyName?: NullableStringFieldUpdateOperationsInput | string | null
    balanceAfter?: NullableFloatFieldUpdateOperationsInput | number | null
    isMatched?: BoolFieldUpdateOperationsInput | boolean
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    rawEmailData?: NullableStringFieldUpdateOperationsInput | string | null
    parsedData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customer?: CustomerUpdateOneWithoutBankTransactionsNestedInput
  }

  export type BankTransactionUncheckedUpdateWithoutPaymentMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    bankCode?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    accountIban?: StringFieldUpdateOperationsInput | string
    maskedAccount?: NullableStringFieldUpdateOperationsInput | string | null
    transactionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    senderName?: NullableStringFieldUpdateOperationsInput | string | null
    counterpartyName?: NullableStringFieldUpdateOperationsInput | string | null
    balanceAfter?: NullableFloatFieldUpdateOperationsInput | number | null
    isMatched?: BoolFieldUpdateOperationsInput | boolean
    matchedCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    rawEmailData?: NullableStringFieldUpdateOperationsInput | string | null
    parsedData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CustomerUpsertWithoutPaymentMatchesInput = {
    update: XOR<CustomerUpdateWithoutPaymentMatchesInput, CustomerUncheckedUpdateWithoutPaymentMatchesInput>
    create: XOR<CustomerCreateWithoutPaymentMatchesInput, CustomerUncheckedCreateWithoutPaymentMatchesInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutPaymentMatchesInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutPaymentMatchesInput, CustomerUncheckedUpdateWithoutPaymentMatchesInput>
  }

  export type CustomerUpdateWithoutPaymentMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    nameVariations?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentPattern?: NullableStringFieldUpdateOperationsInput | string | null
    dueDays?: NullableIntFieldUpdateOperationsInput | number | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCustomersNestedInput
    transactions?: TransactionUpdateManyWithoutCustomerNestedInput
    extractTransactions?: ExtractTransactionUpdateManyWithoutCustomerNestedInput
    bankTransactions?: BankTransactionUpdateManyWithoutCustomerNestedInput
    balance?: BalanceUpdateOneWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutPaymentMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    nameVariations?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentPattern?: NullableStringFieldUpdateOperationsInput | string | null
    dueDays?: NullableIntFieldUpdateOperationsInput | number | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    transactions?: TransactionUncheckedUpdateManyWithoutCustomerNestedInput
    extractTransactions?: ExtractTransactionUncheckedUpdateManyWithoutCustomerNestedInput
    bankTransactions?: BankTransactionUncheckedUpdateManyWithoutCustomerNestedInput
    balance?: BalanceUncheckedUpdateOneWithoutCustomerNestedInput
  }

  export type UserCreateWithoutCashFlowsInput = {
    id?: string
    username: string
    email: string
    password: string
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionCreateNestedManyWithoutUserInput
    categories?: CategoryCreateNestedManyWithoutUserInput
    extracts?: ExtractCreateNestedManyWithoutUserInput
    customers?: CustomerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCashFlowsInput = {
    id?: string
    username: string
    email: string
    password: string
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    categories?: CategoryUncheckedCreateNestedManyWithoutUserInput
    extracts?: ExtractUncheckedCreateNestedManyWithoutUserInput
    customers?: CustomerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCashFlowsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCashFlowsInput, UserUncheckedCreateWithoutCashFlowsInput>
  }

  export type UserUpsertWithoutCashFlowsInput = {
    update: XOR<UserUpdateWithoutCashFlowsInput, UserUncheckedUpdateWithoutCashFlowsInput>
    create: XOR<UserCreateWithoutCashFlowsInput, UserUncheckedCreateWithoutCashFlowsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCashFlowsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCashFlowsInput, UserUncheckedUpdateWithoutCashFlowsInput>
  }

  export type UserUpdateWithoutCashFlowsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    categories?: CategoryUpdateManyWithoutUserNestedInput
    extracts?: ExtractUpdateManyWithoutUserNestedInput
    customers?: CustomerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCashFlowsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    categories?: CategoryUncheckedUpdateManyWithoutUserNestedInput
    extracts?: ExtractUncheckedUpdateManyWithoutUserNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TransactionCreateManyUserInput = {
    id?: string
    type: string
    amount: number
    currency?: string
    description?: string | null
    date: Date | string
    categoryId?: string | null
    customerId?: string | null
    sourceFile?: string | null
    sourceRow?: number | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryCreateManyUserInput = {
    id?: string
    name: string
    type: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExtractCreateManyUserInput = {
    id?: string
    fileName: string
    uploadDate?: Date | string
    status: string
    totalRows?: number
    processedRows?: number
    errorRows?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CashFlowCreateManyUserInput = {
    id?: string
    date: Date | string
    openingBalance: number
    closingBalance: number
    totalIncome?: number
    totalExpense?: number
    difference?: number
    notes?: string | null
    createdAt?: Date | string
  }

  export type CustomerCreateManyUserInput = {
    id?: string
    code: string
    name: string
    originalName?: string | null
    nameVariations?: string | null
    phone?: string | null
    address?: string | null
    type?: string
    accountType?: string | null
    lastPaymentDate?: Date | string | null
    paymentPattern?: string | null
    dueDays?: number | null
    tag1?: string | null
    tag2?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sourceFile?: NullableStringFieldUpdateOperationsInput | string | null
    sourceRow?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneWithoutTransactionsNestedInput
    customer?: CustomerUpdateOneWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceFile?: NullableStringFieldUpdateOperationsInput | string | null
    sourceRow?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceFile?: NullableStringFieldUpdateOperationsInput | string | null
    sourceRow?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
    transactions?: TransactionUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExtractUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalRows?: IntFieldUpdateOperationsInput | number
    processedRows?: IntFieldUpdateOperationsInput | number
    errorRows?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: ExtractTransactionUpdateManyWithoutExtractNestedInput
  }

  export type ExtractUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalRows?: IntFieldUpdateOperationsInput | number
    processedRows?: IntFieldUpdateOperationsInput | number
    errorRows?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: ExtractTransactionUncheckedUpdateManyWithoutExtractNestedInput
  }

  export type ExtractUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalRows?: IntFieldUpdateOperationsInput | number
    processedRows?: IntFieldUpdateOperationsInput | number
    errorRows?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CashFlowUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    openingBalance?: FloatFieldUpdateOperationsInput | number
    closingBalance?: FloatFieldUpdateOperationsInput | number
    totalIncome?: FloatFieldUpdateOperationsInput | number
    totalExpense?: FloatFieldUpdateOperationsInput | number
    difference?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CashFlowUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    openingBalance?: FloatFieldUpdateOperationsInput | number
    closingBalance?: FloatFieldUpdateOperationsInput | number
    totalIncome?: FloatFieldUpdateOperationsInput | number
    totalExpense?: FloatFieldUpdateOperationsInput | number
    difference?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CashFlowUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    openingBalance?: FloatFieldUpdateOperationsInput | number
    closingBalance?: FloatFieldUpdateOperationsInput | number
    totalIncome?: FloatFieldUpdateOperationsInput | number
    totalExpense?: FloatFieldUpdateOperationsInput | number
    difference?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    nameVariations?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentPattern?: NullableStringFieldUpdateOperationsInput | string | null
    dueDays?: NullableIntFieldUpdateOperationsInput | number | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUpdateManyWithoutCustomerNestedInput
    extractTransactions?: ExtractTransactionUpdateManyWithoutCustomerNestedInput
    bankTransactions?: BankTransactionUpdateManyWithoutCustomerNestedInput
    paymentMatches?: PaymentMatchUpdateManyWithoutCustomerNestedInput
    balance?: BalanceUpdateOneWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    nameVariations?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentPattern?: NullableStringFieldUpdateOperationsInput | string | null
    dueDays?: NullableIntFieldUpdateOperationsInput | number | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutCustomerNestedInput
    extractTransactions?: ExtractTransactionUncheckedUpdateManyWithoutCustomerNestedInput
    bankTransactions?: BankTransactionUncheckedUpdateManyWithoutCustomerNestedInput
    paymentMatches?: PaymentMatchUncheckedUpdateManyWithoutCustomerNestedInput
    balance?: BalanceUncheckedUpdateOneWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    nameVariations?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentPattern?: NullableStringFieldUpdateOperationsInput | string | null
    dueDays?: NullableIntFieldUpdateOperationsInput | number | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateManyCustomerInput = {
    id?: string
    type: string
    amount: number
    currency?: string
    description?: string | null
    date: Date | string
    categoryId?: string | null
    userId: string
    sourceFile?: string | null
    sourceRow?: number | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExtractTransactionCreateManyCustomerInput = {
    id?: string
    extractId: string
    date: Date | string
    description: string
    debit?: number
    credit?: number
    documentType?: string | null
    voucherNo?: string | null
    dueDate?: Date | string | null
    amountBase?: number
    discount?: number
    amountNet?: number
    vat?: number
    sourceRow: number
    createdAt?: Date | string
  }

  export type BankTransactionCreateManyCustomerInput = {
    id?: string
    messageId: string
    bankCode?: string
    direction: string
    accountIban: string
    maskedAccount?: string | null
    transactionDate: Date | string
    amount: number
    senderName?: string | null
    counterpartyName?: string | null
    balanceAfter?: number | null
    isMatched?: boolean
    confidenceScore?: number | null
    rawEmailData?: string | null
    parsedData?: string | null
    createdAt?: Date | string
    processedAt?: Date | string | null
  }

  export type PaymentMatchCreateManyCustomerInput = {
    id?: string
    bankTransactionId: string
    matchedAmount: number
    confidenceScore: number
    matchMethod: string
    isConfirmed?: boolean
    createdAt?: Date | string
  }

  export type TransactionUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sourceFile?: NullableStringFieldUpdateOperationsInput | string | null
    sourceRow?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneWithoutTransactionsNestedInput
    user?: UserUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sourceFile?: NullableStringFieldUpdateOperationsInput | string | null
    sourceRow?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sourceFile?: NullableStringFieldUpdateOperationsInput | string | null
    sourceRow?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExtractTransactionUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    debit?: FloatFieldUpdateOperationsInput | number
    credit?: FloatFieldUpdateOperationsInput | number
    documentType?: NullableStringFieldUpdateOperationsInput | string | null
    voucherNo?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountBase?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    amountNet?: FloatFieldUpdateOperationsInput | number
    vat?: FloatFieldUpdateOperationsInput | number
    sourceRow?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    extract?: ExtractUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type ExtractTransactionUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    extractId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    debit?: FloatFieldUpdateOperationsInput | number
    credit?: FloatFieldUpdateOperationsInput | number
    documentType?: NullableStringFieldUpdateOperationsInput | string | null
    voucherNo?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountBase?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    amountNet?: FloatFieldUpdateOperationsInput | number
    vat?: FloatFieldUpdateOperationsInput | number
    sourceRow?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExtractTransactionUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    extractId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    debit?: FloatFieldUpdateOperationsInput | number
    credit?: FloatFieldUpdateOperationsInput | number
    documentType?: NullableStringFieldUpdateOperationsInput | string | null
    voucherNo?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountBase?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    amountNet?: FloatFieldUpdateOperationsInput | number
    vat?: FloatFieldUpdateOperationsInput | number
    sourceRow?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankTransactionUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    bankCode?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    accountIban?: StringFieldUpdateOperationsInput | string
    maskedAccount?: NullableStringFieldUpdateOperationsInput | string | null
    transactionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    senderName?: NullableStringFieldUpdateOperationsInput | string | null
    counterpartyName?: NullableStringFieldUpdateOperationsInput | string | null
    balanceAfter?: NullableFloatFieldUpdateOperationsInput | number | null
    isMatched?: BoolFieldUpdateOperationsInput | boolean
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    rawEmailData?: NullableStringFieldUpdateOperationsInput | string | null
    parsedData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentMatches?: PaymentMatchUpdateManyWithoutBankTransactionNestedInput
  }

  export type BankTransactionUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    bankCode?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    accountIban?: StringFieldUpdateOperationsInput | string
    maskedAccount?: NullableStringFieldUpdateOperationsInput | string | null
    transactionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    senderName?: NullableStringFieldUpdateOperationsInput | string | null
    counterpartyName?: NullableStringFieldUpdateOperationsInput | string | null
    balanceAfter?: NullableFloatFieldUpdateOperationsInput | number | null
    isMatched?: BoolFieldUpdateOperationsInput | boolean
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    rawEmailData?: NullableStringFieldUpdateOperationsInput | string | null
    parsedData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentMatches?: PaymentMatchUncheckedUpdateManyWithoutBankTransactionNestedInput
  }

  export type BankTransactionUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    bankCode?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    accountIban?: StringFieldUpdateOperationsInput | string
    maskedAccount?: NullableStringFieldUpdateOperationsInput | string | null
    transactionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    senderName?: NullableStringFieldUpdateOperationsInput | string | null
    counterpartyName?: NullableStringFieldUpdateOperationsInput | string | null
    balanceAfter?: NullableFloatFieldUpdateOperationsInput | number | null
    isMatched?: BoolFieldUpdateOperationsInput | boolean
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    rawEmailData?: NullableStringFieldUpdateOperationsInput | string | null
    parsedData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PaymentMatchUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchedAmount?: FloatFieldUpdateOperationsInput | number
    confidenceScore?: FloatFieldUpdateOperationsInput | number
    matchMethod?: StringFieldUpdateOperationsInput | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bankTransaction?: BankTransactionUpdateOneRequiredWithoutPaymentMatchesNestedInput
  }

  export type PaymentMatchUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    bankTransactionId?: StringFieldUpdateOperationsInput | string
    matchedAmount?: FloatFieldUpdateOperationsInput | number
    confidenceScore?: FloatFieldUpdateOperationsInput | number
    matchMethod?: StringFieldUpdateOperationsInput | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentMatchUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    bankTransactionId?: StringFieldUpdateOperationsInput | string
    matchedAmount?: FloatFieldUpdateOperationsInput | number
    confidenceScore?: FloatFieldUpdateOperationsInput | number
    matchMethod?: StringFieldUpdateOperationsInput | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateManyParentInput = {
    id?: string
    name: string
    type: string
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateManyCategoryInput = {
    id?: string
    type: string
    amount: number
    currency?: string
    description?: string | null
    date: Date | string
    customerId?: string | null
    userId: string
    sourceFile?: string | null
    sourceRow?: number | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUpdateManyWithoutParentNestedInput
    user?: UserUpdateOneWithoutCategoriesNestedInput
    transactions?: TransactionUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sourceFile?: NullableStringFieldUpdateOperationsInput | string | null
    sourceRow?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneWithoutTransactionsNestedInput
    user?: UserUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sourceFile?: NullableStringFieldUpdateOperationsInput | string | null
    sourceRow?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sourceFile?: NullableStringFieldUpdateOperationsInput | string | null
    sourceRow?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExtractTransactionCreateManyExtractInput = {
    id?: string
    customerId?: string | null
    date: Date | string
    description: string
    debit?: number
    credit?: number
    documentType?: string | null
    voucherNo?: string | null
    dueDate?: Date | string | null
    amountBase?: number
    discount?: number
    amountNet?: number
    vat?: number
    sourceRow: number
    createdAt?: Date | string
  }

  export type ExtractTransactionUpdateWithoutExtractInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    debit?: FloatFieldUpdateOperationsInput | number
    credit?: FloatFieldUpdateOperationsInput | number
    documentType?: NullableStringFieldUpdateOperationsInput | string | null
    voucherNo?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountBase?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    amountNet?: FloatFieldUpdateOperationsInput | number
    vat?: FloatFieldUpdateOperationsInput | number
    sourceRow?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneWithoutExtractTransactionsNestedInput
  }

  export type ExtractTransactionUncheckedUpdateWithoutExtractInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    debit?: FloatFieldUpdateOperationsInput | number
    credit?: FloatFieldUpdateOperationsInput | number
    documentType?: NullableStringFieldUpdateOperationsInput | string | null
    voucherNo?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountBase?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    amountNet?: FloatFieldUpdateOperationsInput | number
    vat?: FloatFieldUpdateOperationsInput | number
    sourceRow?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExtractTransactionUncheckedUpdateManyWithoutExtractInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    debit?: FloatFieldUpdateOperationsInput | number
    credit?: FloatFieldUpdateOperationsInput | number
    documentType?: NullableStringFieldUpdateOperationsInput | string | null
    voucherNo?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountBase?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    amountNet?: FloatFieldUpdateOperationsInput | number
    vat?: FloatFieldUpdateOperationsInput | number
    sourceRow?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentMatchCreateManyBankTransactionInput = {
    id?: string
    customerId: string
    matchedAmount: number
    confidenceScore: number
    matchMethod: string
    isConfirmed?: boolean
    createdAt?: Date | string
  }

  export type PaymentMatchUpdateWithoutBankTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchedAmount?: FloatFieldUpdateOperationsInput | number
    confidenceScore?: FloatFieldUpdateOperationsInput | number
    matchMethod?: StringFieldUpdateOperationsInput | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutPaymentMatchesNestedInput
  }

  export type PaymentMatchUncheckedUpdateWithoutBankTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    matchedAmount?: FloatFieldUpdateOperationsInput | number
    confidenceScore?: FloatFieldUpdateOperationsInput | number
    matchMethod?: StringFieldUpdateOperationsInput | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentMatchUncheckedUpdateManyWithoutBankTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    matchedAmount?: FloatFieldUpdateOperationsInput | number
    confidenceScore?: FloatFieldUpdateOperationsInput | number
    matchMethod?: StringFieldUpdateOperationsInput | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomerCountOutputTypeDefaultArgs instead
     */
    export type CustomerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExtractCountOutputTypeDefaultArgs instead
     */
    export type ExtractCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExtractCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BankTransactionCountOutputTypeDefaultArgs instead
     */
    export type BankTransactionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BankTransactionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomerDefaultArgs instead
     */
    export type CustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransactionDefaultArgs instead
     */
    export type TransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransactionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BalanceDefaultArgs instead
     */
    export type BalanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BalanceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExtractDefaultArgs instead
     */
    export type ExtractArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExtractDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExtractTransactionDefaultArgs instead
     */
    export type ExtractTransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExtractTransactionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BankTransactionDefaultArgs instead
     */
    export type BankTransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BankTransactionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentMatchDefaultArgs instead
     */
    export type PaymentMatchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentMatchDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CashFlowDefaultArgs instead
     */
    export type CashFlowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CashFlowDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReportCacheDefaultArgs instead
     */
    export type ReportCacheArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReportCacheDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditLogDefaultArgs instead
     */
    export type AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditLogDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}