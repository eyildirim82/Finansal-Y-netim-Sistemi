// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Kullanıcılar
model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      String   @default("USER")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  transactions Transaction[]
  categories   Category[]
  extracts     Extract[]
  cashFlows    CashFlow[]
  customers    Customer[]

  @@map("users")
}

// Müşteriler (Cari Hesaplar) - Gelişmiş Model
model Customer {
  id                    String   @id @default(cuid())
  code                  String   @unique
  name                  String
  originalName          String?  // Ekstreden çıkan orijinal isim
  nameVariations        String?  // JSON array - isim varyasyonları
  phone                 String?
  address               String?
  type                  String   @default("INDIVIDUAL")
  accountType           String?  // Hesap tipi
  lastPaymentDate       DateTime?
  paymentPattern        String?  // 'regular', 'irregular', 'delayed'
  dueDays               Int?     // Vade günü (30, 60, 90 gibi)
  tag1                  String?  // Etiket 1
  tag2                  String?  // Etiket 2
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  userId                String
  user                  User     @relation(fields: [userId], references: [id])

  // İlişkiler
  transactions          Transaction[]
  extractTransactions   ExtractTransaction[]
  bankTransactions      BankTransaction[]
  paymentMatches        PaymentMatch[]
  balance               Balance?

  @@map("customers")
}

// Kategoriler
model Category {
  id        String   @id @default(cuid())
  name      String
  type      String
  parentId  String?
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  parent     Category?   @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children   Category[]  @relation("CategoryHierarchy")
  user       User?       @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@unique([name, type])
  @@map("categories")
}

// İşlemler (Birleştirilmiş)
model Transaction {
  id          String          @id @default(cuid())
  type        String
  amount      Float
  currency    String          @default("TRY")
  description String?
  date        DateTime
  categoryId  String?
  customerId  String?
  userId      String
  sourceFile  String?         // Import edilen dosya
  sourceRow   Int?            // Excel satır numarası
  metadata    String?         // Ek veriler (JSON string olarak saklanacak)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // İlişkiler
  category Category?  @relation(fields: [categoryId], references: [id])
  customer Customer?  @relation(fields: [customerId], references: [id])
  user     User       @relation(fields: [userId], references: [id])

  @@map("transactions")
}

// Bakiyeler
model Balance {
  id           String   @id @default(cuid())
  customerId   String   @unique
  totalDebit   Float    @default(0)
  totalCredit  Float    @default(0)
  netBalance   Float    @default(0)
  lastUpdated  DateTime @default(now())

  // İlişkiler
  customer Customer @relation(fields: [customerId], references: [id])

  @@map("balances")
}

// ===== EKSTRE SİSTEMİ TABLOLARI =====

// Ekstre Yüklemeleri
model Extract {
  id            String   @id @default(cuid())
  fileName      String
  uploadDate    DateTime @default(now())
  status        String   // 'processing', 'completed', 'error'
  totalRows     Int      @default(0)
  processedRows Int      @default(0)
  errorRows     Int      @default(0)
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // İlişkiler
  user         User                @relation(fields: [userId], references: [id])
  transactions ExtractTransaction[]

  @@map("extracts")
}

// Ekstre İşlemleri
model ExtractTransaction {
  id           String    @id @default(cuid())
  extractId    String
  customerId   String?
  date         DateTime
  description  String
  debit        Float     @default(0)
  credit       Float     @default(0)
  documentType String?
  voucherNo    String?   // Evrak No
  dueDate      DateTime? // Vade Tarihi
  amountBase   Float     @default(0) // Matrah
  discount     Float     @default(0) // İskonto
  amountNet    Float     @default(0) // Net Matrah
  vat          Float     @default(0) // KDV
  sourceRow    Int
  createdAt    DateTime  @default(now())

  // İlişkiler
  extract  Extract   @relation(fields: [extractId], references: [id])
  customer Customer? @relation(fields: [customerId], references: [id])

  // Benzersiz işlem tanımlayıcısı
  @@unique([customerId, voucherNo, date, description, debit, credit])
  @@map("extract_transactions")
}

// ===== YAPI KREDİ SİSTEMİ TABLOLARI =====

// Banka İşlemleri
model BankTransaction {
  id              String   @id @default(cuid())
  messageId       String   @unique
  bankCode        String   @default("YAPIKREDI")
  direction       String   // 'IN', 'OUT'
  accountIban     String
  maskedAccount   String?
  transactionDate DateTime
  amount          Float
  senderName      String?
  counterpartyName String?
  balanceAfter    Float?
  isMatched       Boolean  @default(false)
  matchedCustomerId String?
  confidenceScore Float?   // 0-1 arası
  rawEmailData    String?  // Ham e-posta verisi (JSON)
  parsedData      String?  // Parse edilmiş veri (JSON)
  createdAt       DateTime @default(now())
  processedAt     DateTime?

  // İlişkiler
  customer       Customer?       @relation(fields: [matchedCustomerId], references: [id])
  paymentMatches PaymentMatch[]

  @@map("bank_transactions")
}

// Ödeme Eşleştirmeleri
model PaymentMatch {
  id                String   @id @default(cuid())
  bankTransactionId String
  customerId        String
  matchedAmount     Float
  confidenceScore   Float    // 0-1 arası
  matchMethod       String   // 'auto_name', 'auto_amount', 'manual'
  isConfirmed       Boolean  @default(false)
  createdAt         DateTime @default(now())

  // İlişkiler
  bankTransaction BankTransaction @relation(fields: [bankTransactionId], references: [id])
  customer        Customer        @relation(fields: [customerId], references: [id])

  @@map("payment_matches")
}

// ===== KASA YÖNETİMİ TABLOLARI =====

// Kasa Akışları
model CashFlow {
  id             String   @id @default(cuid())
  date           DateTime
  openingBalance Float
  closingBalance Float
  totalIncome    Float    @default(0)
  totalExpense   Float    @default(0)
  difference     Float    @default(0)
  notes          String?
  userId         String
  createdAt      DateTime @default(now())

  // İlişkiler
  user User @relation(fields: [userId], references: [id])

  @@map("cash_flows")
}

// ===== RAPORLAMA TABLOLARI =====

// Rapor Önbelleği
model ReportCache {
  id        String   @id @default(cuid())
  reportKey String   @unique
  data      String   // JSON string
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("report_cache")
}

// Denetim Kayıtları
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  table     String
  recordId  String?
  oldData   String?  // JSON string
  newData   String?  // JSON string
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

 