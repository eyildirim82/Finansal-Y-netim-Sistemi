import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
import { YapiKrediFASTEmailService } from './emailService';
import { PaymentMatchingService } from './paymentMatchingService';

const prisma = new PrismaClient();

export class BankingController {
  private emailService: YapiKrediFASTEmailService;
  private matchingService: PaymentMatchingService;

  constructor() {
    this.emailService = new YapiKrediFASTEmailService();
    this.matchingService = new PaymentMatchingService();
  }

  // Otomatik email √ßekme
  async fetchEmails(req: Request, res: Response) {
    try {
      console.log('üìß Otomatik email √ßekme ba≈ülatƒ±lƒ±yor...');
      
      const emails = await this.emailService.fetchYapiKrediFASTEmails();
      
      if (emails.length === 0) {
        return res.json({
          success: true,
          message: 'Yeni email bulunamadƒ±',
          data: { processed: 0, transactions: [] }
        });
      }

      const processedTransactions = [];
      let duplicateCount = 0;

      for (const emailData of emails) {
        try {
          // Duplikasyon kontrol√º
          const existingTransaction = await prisma.bankTransaction.findFirst({
            where: { messageId: emailData.transaction.messageId }
          });

          if (existingTransaction) {
            duplicateCount++;
            continue;
          }

          // ƒ∞≈ülemi kaydet
          const savedTransaction = await prisma.bankTransaction.create({
            data: emailData.transaction
          });

          // Otomatik e≈üle≈ütirme
          const matchResult = await this.matchingService.matchTransaction(savedTransaction);
          await this.matchingService.saveMatchResult(savedTransaction.id, matchResult);

          processedTransactions.push({
            transaction: savedTransaction,
            matchResult
          });

        } catch (error) {
          console.error('Email i≈üleme hatasƒ±:', error);
        }
      }

      const metrics = this.emailService.getMetrics();

      res.json({
        success: true,
        message: `${processedTransactions.length} email i≈ülendi, ${duplicateCount} duplikasyon`,
        data: {
          processed: processedTransactions.length,
          duplicates: duplicateCount,
          transactions: processedTransactions,
          metrics
        }
      });

    } catch (error) {
      console.error('Otomatik email √ßekme hatasƒ±:', error);
      res.status(500).json({
        success: false,
        message: 'Email √ßekme sƒ±rasƒ±nda hata olu≈ütu',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  // Email i≈üleme (manuel)
  async processEmail(req: Request, res: Response) {
    try {
      const { emailContent, emailSubject, messageId } = req.body;

      if (!emailContent || !messageId) {
        return res.status(400).json({
          success: false,
          message: 'Email i√ßeriƒüi ve messageId gerekli'
        });
      }

      // Email parsing
      const transaction = await this.parseYapiKrediEmail(emailContent, emailSubject, messageId);
      
      if (!transaction) {
        return res.status(400).json({
          success: false,
          message: 'Email parse edilemedi'
        });
      }

      // Duplikasyon kontrol√º
      const existingTransaction = await prisma.bankTransaction.findFirst({
        where: { messageId: transaction.messageId }
      });

      if (existingTransaction) {
        return res.status(409).json({
          success: false,
          message: 'Bu i≈ülem zaten mevcut',
          transactionId: existingTransaction.id
        });
      }

      // ƒ∞≈ülemi kaydet
      const savedTransaction = await prisma.bankTransaction.create({
        data: transaction
      });

      // Otomatik e≈üle≈ütirme
      const matchResult = await this.matchingService.matchTransaction(savedTransaction);
      await this.matchingService.saveMatchResult(savedTransaction.id, matchResult);

      res.json({
        success: true,
        message: 'Email ba≈üarƒ±yla i≈ülendi',
        data: {
          transaction: savedTransaction,
          matchResult
        }
      });

    } catch (error) {
      console.error('Email i≈üleme hatasƒ±:', error);
      res.status(500).json({
        success: false,
        message: 'Email i≈ülenirken hata olu≈ütu'
      });
    }
  }

  // Banka i≈ülemleri listesi
  async getBankTransactions(req: Request, res: Response) {
    try {
      const { page = 1, limit = 20, direction, isMatched } = req.query;
      const pageNum = Number(page);
      const limitNum = Number(limit);

      if (
        !Number.isInteger(pageNum) ||
        !Number.isInteger(limitNum) ||
        pageNum <= 0 ||
        limitNum <= 0
      ) {
        return res.status(400).json({
          success: false,
          message: 'Sayfa ve limit pozitif tamsayƒ± olmalƒ±dƒ±r'
        });
      }

      const skip = (pageNum - 1) * limitNum;

      const where: any = {};
      if (direction) where.direction = direction;
      if (isMatched !== undefined) where.isMatched = isMatched === 'true';

      const transactions = await prisma.bankTransaction.findMany({
        where,
        include: {
          customer: true,
          paymentMatches: {
            include: { customer: true }
          }
        },
        orderBy: { transactionDate: 'desc' },
        skip,
        take: limitNum
      });

      const total = await prisma.bankTransaction.count({ where });

      res.json({
        transactions,
        pagination: {
          page: pageNum,
          limit: limitNum,
          total,
          pages: Math.ceil(total / limitNum)
        }
      });

    } catch (error) {
      console.error('Banka i≈ülemleri getirme hatasƒ±:', error);
      res.status(500).json({ error: 'Banka i≈ülemleri getirilemedi' });
    }
  }

  // E≈üle≈ümeyen √∂demeler
  async getUnmatchedPayments(req: Request, res: Response) {
    try {
      const { limit = 50 } = req.query;
      const limitNum = Number(limit);

      if (!Number.isInteger(limitNum) || limitNum <= 0) {
        return res.status(400).json({
          success: false,
          message: 'Limit pozitif tamsayƒ± olmalƒ±dƒ±r'
        });
      }

      const transactions = await this.matchingService.getUnmatchedTransactions(limitNum);

      res.json({
        success: true,
        data: transactions,
        count: transactions.length
      });

    } catch (error) {
      console.error('E≈üle≈ümeyen √∂demeler getirme hatasƒ±:', error);
      res.status(500).json({
        success: false,
        error: 'E≈üle≈ümeyen √∂demeler getirilemedi'
      });
    }
  }

  // Manuel e≈üle≈ütirme
  async matchPayment(req: Request, res: Response) {
    try {
      const { transactionId, customerId } = req.body;
      
      if (!transactionId || !customerId) {
        return res.status(400).json({
          success: false,
          error: 'Transaction ID ve Customer ID gerekli'
        });
      }

      // Transaction'ƒ± getir
      const transaction = await prisma.bankTransaction.findUnique({
        where: { id: Number(transactionId) }
      });
      
      if (!transaction) {
        return res.status(404).json({
          success: false,
          error: 'ƒ∞≈ülem bulunamadƒ±'
        });
      }

      // M√º≈üteriyi getir
      const customer = await prisma.customer.findUnique({
        where: { id: Number(customerId) }
      });
      
      if (!customer) {
        return res.status(404).json({
          success: false,
          error: 'M√º≈üteri bulunamadƒ±'
        });
      }

      // Manuel e≈üle≈ütirme sonucu olu≈ütur
      const matchResult = {
        matched: true,
        customer: customer,
        confidence: 1.0,
        methods: ['manual_match']
      };

      // E≈üle≈ütirmeyi kaydet
      await this.matchingService.saveMatchResult(Number(transactionId), matchResult);

      res.json({
        success: true,
        message: 'E≈üle≈ütirme ba≈üarƒ±yla kaydedildi',
        data: {
          transaction: transaction,
          customer: customer,
          confidence: 1.0
        }
      });

    } catch (error) {
      console.error('Manuel e≈üle≈ütirme hatasƒ±:', error);
      res.status(500).json({
        success: false,
        error: 'Manuel e≈üle≈ütirme yapƒ±lamadƒ±'
      });
    }
  }

  // Email ayarlarƒ±
  async getEmailSettings(req: Request, res: Response) {
    try {
      const settings = {
        host: process.env.EMAIL_HOST,
        port: process.env.EMAIL_PORT,
        user: process.env.EMAIL_USER,
        isConfigured: !!(process.env.EMAIL_HOST && process.env.EMAIL_USER && process.env.EMAIL_PASS)
      };

      res.json({
        success: true,
        data: settings
      });

    } catch (error) {
      console.error('Email ayarlarƒ± getirme hatasƒ±:', error);
      res.status(500).json({
        success: false,
        error: 'Email ayarlarƒ± getirilemedi'
      });
    }
  }

  // Email baƒülantƒ± testi
  async testEmailConnection(req: Request, res: Response) {
    try {
      const isConnected = await this.emailService.testConnection();
      
      res.json({
        success: true,
        data: {
          connected: isConnected
        }
      });

    } catch (error) {
      console.error('Email baƒülantƒ± testi hatasƒ±:', error);
      res.status(500).json({
        success: false,
        error: 'Email baƒülantƒ± testi yapƒ±lamadƒ±'
      });
    }
  }

  // E≈üle≈ütirme istatistikleri
  async getMatchingStats(req: Request, res: Response) {
    try {
      const stats = await this.matchingService.getMatchingStatistics();
      
      res.json({
        success: true,
        data: stats
      });

    } catch (error) {
      console.error('E≈üle≈ütirme istatistikleri hatasƒ±:', error);
      res.status(500).json({
        success: false,
        error: 'E≈üle≈ütirme istatistikleri getirilemedi'
      });
    }
  }

  // Otomatik e≈üle≈ütirme √ßalƒ±≈ütƒ±r
  async runAutoMatching(req: Request, res: Response) {
    try {
      const { limit = 100 } = req.query;
      const limitNum = Number(limit);

      if (!Number.isInteger(limitNum) || limitNum <= 0) {
        return res.status(400).json({
          success: false,
          message: 'Limit pozitif tamsayƒ± olmalƒ±dƒ±r'
        });
      }

      const unmatchedTransactions = await this.matchingService.getUnmatchedTransactions(limitNum);
      let matchedCount = 0;

      for (const transaction of unmatchedTransactions) {
        const matchResult = await this.matchingService.matchTransaction(transaction);
        if (matchResult.matched) {
          await this.matchingService.saveMatchResult(transaction.id, matchResult);
          matchedCount++;
        }
      }

      res.json({
        success: true,
        message: `${matchedCount} i≈ülem e≈üle≈ütirildi`,
        data: {
          processed: unmatchedTransactions.length,
          matched: matchedCount
        }
      });

    } catch (error) {
      console.error('Otomatik e≈üle≈ütirme hatasƒ±:', error);
      res.status(500).json({
        success: false,
        error: 'Otomatik e≈üle≈ütirme √ßalƒ±≈ütƒ±rƒ±lamadƒ±'
      });
    }
  }

  // Private methods
  private async parseYapiKrediEmail(emailContent: any, emailSubject: string, messageId: string) {
    try {
      // Email service'i kullanarak parse et
      const mockEmail = {
        html: emailContent,
        subject: emailSubject,
        messageId: messageId,
        from: '',
        date: new Date()
      };

      return await this.emailService.parseYapiKrediFASTEmail(mockEmail);
    } catch (error) {
      console.error('Email parse hatasƒ±:', error);
      return null;
    }
  }
} 