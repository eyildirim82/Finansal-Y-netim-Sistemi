import { logError } from '../logger';
import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// Request interface'ini geni≈ület
declare global {
  namespace Express {
    interface Request {
      user?: any;
    }
  }
}

export const authMiddleware = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    console.log('üîê Auth middleware - URL:', req.url);
    console.log('üîê Auth middleware - Headers:', req.headers);
    
    // Token'ƒ± header'dan al
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.log('‚ùå Auth middleware - Token bulunamadƒ±');
      return res.status(401).json({
        success: false,
        error: 'Yetkilendirme token\'ƒ± gerekli'
      });
    }

    const token = authHeader.substring(7); // "Bearer " kƒ±smƒ±nƒ± √ßƒ±kar
    console.log('üîê Auth middleware - Token alƒ±ndƒ±:', token.substring(0, 20) + '...');

    // Token'ƒ± doƒürula
    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as any;
    console.log('üîê Auth middleware - Token doƒürulandƒ±, userId:', decoded.userId);

    // Kullanƒ±cƒ±yƒ± veritabanƒ±ndan kontrol et
    const user = await prisma.user.findUnique({
      where: { id: decoded.userId },
      select: {
        id: true,
        username: true,
        email: true,
        role: true,
        isActive: true
      }
    });

    console.log('üîê Auth middleware - Kullanƒ±cƒ± bulundu:', user ? 'Evet' : 'Hayƒ±r');

    if (!user || !user.isActive) {
      console.log('‚ùå Auth middleware - Kullanƒ±cƒ± bulunamadƒ± veya pasif');
      return res.status(401).json({
        success: false,
        error: 'Ge√ßersiz veya pasif kullanƒ±cƒ±'
      });
    }

    // Kullanƒ±cƒ±yƒ± request'e ekle
    req.user = user;
    console.log('‚úÖ Auth middleware - Kullanƒ±cƒ± doƒürulandƒ±:', user.username);
    return next();

  } catch (error) {
    console.error('‚ùå Auth middleware error:', error);
    logError('Auth middleware error:', error);
    
    if (error instanceof jwt.JsonWebTokenError) {
      return res.status(401).json({
        success: false,
        error: 'Ge√ßersiz token'
      });
    }

    if (error instanceof jwt.TokenExpiredError) {
      return res.status(401).json({
        success: false,
        error: 'Token s√ºresi dolmu≈ü'
      });
    }

    return res.status(500).json({
      success: false,
      error: 'Kimlik doƒürulama hatasƒ±'
    });
  }
};

// Admin yetkisi kontrol√º
export const adminMiddleware = (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  if (!req.user || req.user.role !== 'ADMIN') {
    return res.status(403).json({
      success: false,
      error: 'Admin yetkisi gerekli'
    });
  }
  return next();
};

// Rol tabanlƒ± yetkilendirme
export const roleMiddleware = (allowedRoles: string[]) => {
  return (req: Request, res: Response, next: NextFunction) => {
    if (!req.user || !allowedRoles.includes(req.user.role)) {
      return res.status(403).json({
        success: false,
        error: 'Bu i≈ülem i√ßin yetkiniz yok'
      });
    }
    return next();
  };
}; 